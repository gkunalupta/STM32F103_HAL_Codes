
GB_STM32_HLW8012_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004188  08004188  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004188  08004188  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004188  08004188  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004190  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000020  080041b0  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080041b0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd9c  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5d  00000000  00000000  0002bde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0002e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179da  00000000  00000000  0002f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c44a  00000000  00000000  00046c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a91c  00000000  00000000  000530c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd9e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  000dda34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	080040ac 	.word	0x080040ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	080040ac 	.word	0x080040ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <size_of_command>:
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

uint16_t size_of_command( const char* gb_string)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	uint16_t counter=0;
 800108c:	2300      	movs	r3, #0
 800108e:	81fb      	strh	r3, [r7, #14]
	while(*gb_string)
 8001090:	e005      	b.n	800109e <size_of_command+0x1a>
	{
		counter = counter+1;
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	3301      	adds	r3, #1
 8001096:	81fb      	strh	r3, [r7, #14]
		*gb_string++;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
	while(*gb_string)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f5      	bne.n	8001092 <size_of_command+0xe>
	}
	return counter;
 80010a6:	89fb      	ldrh	r3, [r7, #14]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
	...

080010b4 <GB_printString1>:
void GB_printString1(const char *gb_myString)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)gb_myString,size_of_command(gb_myString), 100);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffe1 	bl	8001084 <size_of_command>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <GB_printString1+0x24>)
 80010cc:	f002 f979 	bl	80033c2 <HAL_UART_Transmit>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000144 	.word	0x20000144
 80010dc:	00000000 	.word	0x00000000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */



	HAL_Init();
 80010e6:	f000 fba9 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f885 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 f9f5 	bl	80014dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010f2:	f000 f9c9 	bl	8001488 <MX_USART1_UART_Init>

  MX_TIM3_Init();
 80010f6:	f000 f8c3 	bl	8001280 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010fa:	f000 f943 	bl	8001384 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);   // main channel
 80010fe:	2104      	movs	r1, #4
 8001100:	4831      	ldr	r0, [pc, #196]	; (80011c8 <main+0xe8>)
 8001102:	f001 fbf5 	bl	80028f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);   // indirect channel
 8001106:	2100      	movs	r1, #0
 8001108:	482f      	ldr	r0, [pc, #188]	; (80011c8 <main+0xe8>)
 800110a:	f001 fb31 	bl	8002770 <HAL_TIM_IC_Start>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 800110e:	2100      	movs	r1, #0
 8001110:	482e      	ldr	r0, [pc, #184]	; (80011cc <main+0xec>)
 8001112:	f001 fbed 	bl	80028f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);   // indirect channel
 8001116:	2104      	movs	r1, #4
 8001118:	482c      	ldr	r0, [pc, #176]	; (80011cc <main+0xec>)
 800111a:	f001 fb29 	bl	8002770 <HAL_TIM_IC_Start>

 hlw8012_setResistors(CURRENT_RESISTOR, VOLTAGE_RESISTOR_UPSTREAM, VOLTAGE_RESISTOR_DOWNSTREAM);
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <main+0xf0>)
 8001124:	e9cd 2300 	strd	r2, r3, [sp]
 8001128:	a323      	add	r3, pc, #140	; (adr r3, 80011b8 <main+0xd8>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	a124      	add	r1, pc, #144	; (adr r1, 80011c0 <main+0xe0>)
 8001130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001134:	f002 fd66 	bl	8003c04 <hlw8012_setResistors>

  		GB_printString1(" Default Current Multiplier");
 8001138:	4826      	ldr	r0, [pc, #152]	; (80011d4 <main+0xf4>)
 800113a:	f7ff ffbb 	bl	80010b4 <GB_printString1>
  		//GB_decimel1(hlw8012_getcurrent_multiplier());
	def_current_multi =hlw8012_getcurrent_multiplier();
 800113e:	f002 faab 	bl	8003698 <hlw8012_getcurrent_multiplier>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fc57 	bl	80009fc <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <main+0xf8>)
 8001152:	6013      	str	r3, [r2, #0]

  		GB_printString1(" Default Voltage Multiplier");
 8001154:	4821      	ldr	r0, [pc, #132]	; (80011dc <main+0xfc>)
 8001156:	f7ff ffad 	bl	80010b4 <GB_printString1>
  		//GB_decimel1(hlw8012_getvoltage_multiplier());
	def_voltage_multi =hlw8012_getvoltage_multiplier();
 800115a:	f002 faa9 	bl	80036b0 <hlw8012_getvoltage_multiplier>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc49 	bl	80009fc <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <main+0x100>)
 800116e:	6013      	str	r3, [r2, #0]

  		GB_printString1(" Default Power Multiplier");
 8001170:	481c      	ldr	r0, [pc, #112]	; (80011e4 <main+0x104>)
 8001172:	f7ff ff9f 	bl	80010b4 <GB_printString1>
  		//GB_decimel1(hlw8012_getpower_multiplier());
	def_power_multi = hlw8012_getpower_multiplier();
 8001176:	f002 faa7 	bl	80036c8 <hlw8012_getpower_multiplier>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fc3b 	bl	80009fc <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <main+0x108>)
 800118a:	6013      	str	r3, [r2, #0]



   hlw8012_calibrate();
 800118c:	f002 fd70 	bl	8003c70 <hlw8012_calibrate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 current = hlw8012_getcurrent();
 8001190:	f002 fac2 	bl	8003718 <hlw8012_getcurrent>
 8001194:	4603      	mov	r3, r0
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <main+0x10c>)
 8001198:	6013      	str	r3, [r2, #0]
 voltage =  hlw8012_getvoltage();
 800119a:	f002 fb21 	bl	80037e0 <hlw8012_getvoltage>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <main+0x110>)
 80011a2:	6013      	str	r3, [r2, #0]
 power =  hlw8012_getactivepower();
 80011a4:	f002 fb80 	bl	80038a8 <hlw8012_getactivepower>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <main+0x114>)
 80011ac:	6013      	str	r3, [r2, #0]
 HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f000 fba6 	bl	8001900 <HAL_Delay>
 current = hlw8012_getcurrent();
 80011b4:	e7ec      	b.n	8001190 <main+0xb0>
 80011b6:	bf00      	nop
 80011b8:	00000000 	.word	0x00000000
 80011bc:	4141edd8 	.word	0x4141edd8
 80011c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011c4:	3f50624d 	.word	0x3f50624d
 80011c8:	200000fc 	.word	0x200000fc
 80011cc:	200000b4 	.word	0x200000b4
 80011d0:	408f4000 	.word	0x408f4000
 80011d4:	080040c4 	.word	0x080040c4
 80011d8:	20000048 	.word	0x20000048
 80011dc:	080040e0 	.word	0x080040e0
 80011e0:	2000004c 	.word	0x2000004c
 80011e4:	080040fc 	.word	0x080040fc
 80011e8:	20000050 	.word	0x20000050
 80011ec:	2000003c 	.word	0x2000003c
 80011f0:	20000040 	.word	0x20000040
 80011f4:	20000044 	.word	0x20000044

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	2228      	movs	r2, #40	; 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f002 ff48 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001236:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fe2b 	bl	8001e9c <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800124c:	f000 f990 	bl	8001570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f897 	bl	800239c <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001274:	f000 f97c 	bl	8001570 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3740      	adds	r7, #64	; 0x40
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ac:	4b33      	ldr	r3, [pc, #204]	; (800137c <MX_TIM3_Init+0xfc>)
 80012ae:	4a34      	ldr	r2, [pc, #208]	; (8001380 <MX_TIM3_Init+0x100>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320;
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <MX_TIM3_Init+0xfc>)
 80012b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <MX_TIM3_Init+0xfc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <MX_TIM3_Init+0xfc>)
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <MX_TIM3_Init+0xfc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <MX_TIM3_Init+0xfc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012d4:	4829      	ldr	r0, [pc, #164]	; (800137c <MX_TIM3_Init+0xfc>)
 80012d6:	f001 f9fb 	bl	80026d0 <HAL_TIM_IC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80012e0:	f000 f946 	bl	8001570 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012e4:	2304      	movs	r3, #4
 80012e6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80012e8:	2360      	movs	r3, #96	; 0x60
 80012ea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012ec:	2302      	movs	r3, #2
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	481f      	ldr	r0, [pc, #124]	; (800137c <MX_TIM3_Init+0xfc>)
 8001300:	f001 fc90 	bl	8002c24 <HAL_TIM_SlaveConfigSynchro>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800130a:	f000 f931 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <MX_TIM3_Init+0xfc>)
 8001328:	f001 fbe8 	bl	8002afc <HAL_TIM_IC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001332:	f000 f91d 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001336:	2302      	movs	r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800133a:	2301      	movs	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2204      	movs	r2, #4
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_TIM3_Init+0xfc>)
 8001348:	f001 fbd8 	bl	8002afc <HAL_TIM_IC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001352:	f000 f90d 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_TIM3_Init+0xfc>)
 8001364:	f001 ff82 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800136e:	f000 f8ff 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	; 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200000fc 	.word	0x200000fc
 8001380:	40000400 	.word	0x40000400

08001384 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b0:	4b33      	ldr	r3, [pc, #204]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013b2:	4a34      	ldr	r2, [pc, #208]	; (8001484 <MX_TIM4_Init+0x100>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_TIM4_Init+0xfc>)
 80013da:	f001 f979 	bl	80026d0 <HAL_TIM_IC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80013e4:	f000 f8c4 	bl	8001570 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013e8:	2304      	movs	r3, #4
 80013ea:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013ec:	2350      	movs	r3, #80	; 0x50
 80013ee:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	481f      	ldr	r0, [pc, #124]	; (8001480 <MX_TIM4_Init+0xfc>)
 8001404:	f001 fc0e 	bl	8002c24 <HAL_TIM_SlaveConfigSynchro>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800140e:	f000 f8af 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <MX_TIM4_Init+0xfc>)
 800142c:	f001 fb66 	bl	8002afc <HAL_TIM_IC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001436:	f000 f89b 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800143a:	2302      	movs	r3, #2
 800143c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800143e:	2302      	movs	r3, #2
 8001440:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2204      	movs	r2, #4
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_TIM4_Init+0xfc>)
 800144c:	f001 fb56 	bl	8002afc <HAL_TIM_IC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001456:	f000 f88b 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_TIM4_Init+0xfc>)
 8001468:	f001 ff00 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001472:	f000 f87d 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	; 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000b4 	.word	0x200000b4
 8001484:	40000800 	.word	0x40000800

08001488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART1_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f001 ff32 	bl	8003328 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 f851 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000144 	.word	0x20000144
 80014d8:	40013800 	.word	0x40013800

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_GPIO_Init+0x8c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_GPIO_Init+0x8c>)
 80014f6:	f043 0320 	orr.w	r3, r3, #32
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_GPIO_Init+0x8c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_GPIO_Init+0x8c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <MX_GPIO_Init+0x8c>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_GPIO_Init+0x8c>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_GPIO_Init+0x8c>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <MX_GPIO_Init+0x8c>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_GPIO_Init+0x8c>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <MX_GPIO_Init+0x90>)
 800153e:	f000 fc95 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2302      	movs	r3, #2
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_GPIO_Init+0x90>)
 800155a:	f000 fb03 	bl	8001b64 <HAL_GPIO_Init>

}
 800155e:	bf00      	nop
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40010c00 	.word	0x40010c00

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	e7fe      	b.n	8001578 <Error_Handler+0x8>
	...

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_MspInit+0x5c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_MspInit+0x60>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_MspInit+0x60>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000

080015e0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <HAL_TIM_IC_MspInit+0x108>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d13e      	bne.n	800167e <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001600:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	4a39      	ldr	r2, [pc, #228]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	61d3      	str	r3, [r2, #28]
 800160c:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a33      	ldr	r2, [pc, #204]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001630:	2320      	movs	r3, #32
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	482b      	ldr	r0, [pc, #172]	; (80016f0 <HAL_TIM_IC_MspInit+0x110>)
 8001644:	f000 fa8e 	bl	8001b64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_TIM_IC_MspInit+0x114>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <HAL_TIM_IC_MspInit+0x114>)
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	201d      	movs	r0, #29
 8001672:	f000 fa40 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001676:	201d      	movs	r0, #29
 8001678:	f000 fa59 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800167c:	e030      	b.n	80016e0 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_TIM_IC_MspInit+0x118>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d12b      	bne.n	80016e0 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	61d3      	str	r3, [r2, #28]
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_TIM_IC_MspInit+0x10c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <HAL_TIM_IC_MspInit+0x110>)
 80016cc:	f000 fa4a 	bl	8001b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	201e      	movs	r0, #30
 80016d6:	f000 fa0e 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016da:	201e      	movs	r0, #30
 80016dc:	f000 fa27 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40000400 	.word	0x40000400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40010000 	.word	0x40010000
 80016f8:	40000800 	.word	0x40000800

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <HAL_UART_MspInit+0x8c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d131      	bne.n	8001780 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_UART_MspInit+0x90>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_UART_MspInit+0x90>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_UART_MspInit+0x90>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_UART_MspInit+0x90>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <HAL_UART_MspInit+0x90>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_UART_MspInit+0x90>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800174c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4619      	mov	r1, r3
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <HAL_UART_MspInit+0x94>)
 8001762:	f000 f9ff 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_UART_MspInit+0x94>)
 800177c:	f000 f9f2 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013800 	.word	0x40013800
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 f875 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
	...

080017f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001816:	f7ff ffe4 	bl	80017e2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f002 fc1b 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff fc5f 	bl	80010e0 <main>
  bx lr
 8001822:	4770      	bx	lr
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800182c:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 8001830:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001834:	200001a8 	.word	0x200001a8

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f947 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fe90 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f95f 	bl	8001b4a <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f927 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000188 	.word	0x20000188

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000188 	.word	0x20000188

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fff0 	bl	80018ec <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffe0 	bl	80018ec <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <__NVIC_EnableIRQ+0x34>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff90 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff2d 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff42 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff35 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b08b      	sub	sp, #44	; 0x2c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	e169      	b.n	8001e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8158 	bne.w	8001e46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a9a      	ldr	r2, [pc, #616]	; (8001e04 <HAL_GPIO_Init+0x2a0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d05e      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001ba0:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_GPIO_Init+0x2a0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d875      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001ba6:	4a98      	ldr	r2, [pc, #608]	; (8001e08 <HAL_GPIO_Init+0x2a4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d058      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bac:	4a96      	ldr	r2, [pc, #600]	; (8001e08 <HAL_GPIO_Init+0x2a4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d86f      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bb2:	4a96      	ldr	r2, [pc, #600]	; (8001e0c <HAL_GPIO_Init+0x2a8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d052      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bb8:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_GPIO_Init+0x2a8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d869      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bbe:	4a94      	ldr	r2, [pc, #592]	; (8001e10 <HAL_GPIO_Init+0x2ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d04c      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bc4:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_GPIO_Init+0x2ac>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d863      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bca:	4a92      	ldr	r2, [pc, #584]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d046      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bd0:	4a90      	ldr	r2, [pc, #576]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d85d      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d82a      	bhi.n	8001c30 <HAL_GPIO_Init+0xcc>
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d859      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <HAL_GPIO_Init+0x80>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001c5f 	.word	0x08001c5f
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001c4b 	.word	0x08001c4b
 8001bf0:	08001c8d 	.word	0x08001c8d
 8001bf4:	08001c93 	.word	0x08001c93
 8001bf8:	08001c93 	.word	0x08001c93
 8001bfc:	08001c93 	.word	0x08001c93
 8001c00:	08001c93 	.word	0x08001c93
 8001c04:	08001c93 	.word	0x08001c93
 8001c08:	08001c93 	.word	0x08001c93
 8001c0c:	08001c93 	.word	0x08001c93
 8001c10:	08001c93 	.word	0x08001c93
 8001c14:	08001c93 	.word	0x08001c93
 8001c18:	08001c93 	.word	0x08001c93
 8001c1c:	08001c93 	.word	0x08001c93
 8001c20:	08001c93 	.word	0x08001c93
 8001c24:	08001c93 	.word	0x08001c93
 8001c28:	08001c41 	.word	0x08001c41
 8001c2c:	08001c55 	.word	0x08001c55
 8001c30:	4a79      	ldr	r2, [pc, #484]	; (8001e18 <HAL_GPIO_Init+0x2b4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c36:	e02c      	b.n	8001c92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e029      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	3304      	adds	r3, #4
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e024      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e01f      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e01a      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c66:	2304      	movs	r3, #4
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e013      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c74:	2308      	movs	r3, #8
 8001c76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	611a      	str	r2, [r3, #16]
          break;
 8001c7e:	e009      	b.n	8001c94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	615a      	str	r2, [r3, #20]
          break;
 8001c8a:	e003      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          break;
 8001c92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2bff      	cmp	r3, #255	; 0xff
 8001c98:	d801      	bhi.n	8001c9e <HAL_GPIO_Init+0x13a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_Init+0x13e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d802      	bhi.n	8001cb0 <HAL_GPIO_Init+0x14c>
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x152>
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3b08      	subs	r3, #8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	210f      	movs	r1, #15
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	6a39      	ldr	r1, [r7, #32]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80b1 	beq.w	8001e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x2b8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x2b8>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_GPIO_Init+0x2b8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cfc:	4a48      	ldr	r2, [pc, #288]	; (8001e20 <HAL_GPIO_Init+0x2bc>)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_GPIO_Init+0x2c0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_GPIO_Init+0x1ec>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	; (8001e28 <HAL_GPIO_Init+0x2c4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00d      	beq.n	8001d4c <HAL_GPIO_Init+0x1e8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <HAL_GPIO_Init+0x2c8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d007      	beq.n	8001d48 <HAL_GPIO_Init+0x1e4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <HAL_GPIO_Init+0x2cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_GPIO_Init+0x1e0>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e006      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d50:	2300      	movs	r3, #0
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d62:	492f      	ldr	r1, [pc, #188]	; (8001e20 <HAL_GPIO_Init+0x2bc>)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	492c      	ldr	r1, [pc, #176]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4928      	ldr	r1, [pc, #160]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4922      	ldr	r1, [pc, #136]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	491e      	ldr	r1, [pc, #120]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4918      	ldr	r1, [pc, #96]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4914      	ldr	r1, [pc, #80]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d021      	beq.n	8001e38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e021      	b.n	8001e46 <HAL_GPIO_Init+0x2e2>
 8001e02:	bf00      	nop
 8001e04:	10320000 	.word	0x10320000
 8001e08:	10310000 	.word	0x10310000
 8001e0c:	10220000 	.word	0x10220000
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10120000 	.word	0x10120000
 8001e18:	10110000 	.word	0x10110000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40011400 	.word	0x40011400
 8001e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_GPIO_Init+0x304>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4909      	ldr	r1, [pc, #36]	; (8001e68 <HAL_GPIO_Init+0x304>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f ae8e 	bne.w	8001b78 <HAL_GPIO_Init+0x14>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	372c      	adds	r7, #44	; 0x2c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e26c      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d112      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
 8001ed4:	4b8c      	ldr	r3, [pc, #560]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d168      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e246      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x76>
 8001f04:	4b80      	ldr	r3, [pc, #512]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a7f      	ldr	r2, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7a      	ldr	r2, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b78      	ldr	r3, [pc, #480]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a77      	ldr	r2, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0xbc>
 8001f3e:	4b72      	ldr	r3, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a71      	ldr	r2, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f58:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a67      	ldr	r2, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fcb8 	bl	80018ec <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fcb4 	bl	80018ec <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1fa      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe4>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fca4 	bl	80018ec <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fca0 	bl	80018ec <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1e6      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x10c>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1ba      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4939      	ldr	r1, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_RCC_OscConfig+0x270>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fc59 	bl	80018ec <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff fc55 	bl	80018ec <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e19b      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_OscConfig+0x270>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fc38 	bl	80018ec <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff fc34 	bl	80018ec <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e17a      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03a      	beq.n	8002120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fc18 	bl	80018ec <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fc14 	bl	80018ec <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e15a      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 fad8 	bl	8002694 <RCC_Delay>
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fbfe 	bl	80018ec <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fbfa 	bl	80018ec <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d908      	bls.n	8002114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e140      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	42420000 	.word	0x42420000
 8002110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b9e      	ldr	r3, [pc, #632]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e9      	bne.n	80020f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a6 	beq.w	800227a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b97      	ldr	r3, [pc, #604]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b94      	ldr	r3, [pc, #592]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a93      	ldr	r2, [pc, #588]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b8e      	ldr	r3, [pc, #568]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7ff fbbb 	bl	80018ec <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217a:	f7ff fbb7 	bl	80018ec <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0fd      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x312>
 80021a0:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a7a      	ldr	r2, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e02d      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021b6:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a75      	ldr	r2, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a72      	ldr	r2, [pc, #456]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	e01c      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x356>
 80021d8:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a6c      	ldr	r2, [pc, #432]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a69      	ldr	r2, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a66      	ldr	r2, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a63      	ldr	r2, [pc, #396]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff fb6b 	bl	80018ec <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7ff fb67 	bl	80018ec <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0ab      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCC_OscConfig+0x37e>
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff fb55 	bl	80018ec <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7ff fb51 	bl	80018ec <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e095      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b48      	ldr	r3, [pc, #288]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a47      	ldr	r2, [pc, #284]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8081 	beq.w	8002386 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d061      	beq.n	8002354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d146      	bne.n	8002326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x4fc>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff fb25 	bl	80018ec <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff fb21 	bl	80018ec <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e067      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d108      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a19      	ldr	r1, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	430b      	orrs	r3, r1
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x4fc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7ff faf5 	bl	80018ec <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff faf1 	bl	80018ec <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e037      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x46a>
 8002324:	e02f      	b.n	8002386 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_RCC_OscConfig+0x4fc>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fade 	bl	80018ec <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff fada 	bl	80018ec <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e020      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x498>
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	42420060 	.word	0x42420060

0800239c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d0      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d910      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800241a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d040      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d115      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e073      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7ff fa2e 	bl	80018ec <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7ff fa2a 	bl	80018ec <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e053      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d210      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f821 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490a      	ldr	r1, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1d0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f98c 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000
 8002560:	40021000 	.word	0x40021000
 8002564:	08004170 	.word	0x08004170
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b490      	push	{r4, r7}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002578:	1d3c      	adds	r4, r7, #4
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002580:	f240 2301 	movw	r3, #513	; 0x201
 8002584:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x40>
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ae:	e02d      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	e02d      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	0c9b      	lsrs	r3, r3, #18
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025c2:	4413      	add	r3, r2
 80025c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c5b      	lsrs	r3, r3, #17
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025e2:	4413      	add	r3, r2
 80025e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ee:	fb02 f203 	mul.w	r2, r2, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e004      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4a0b      	ldr	r2, [pc, #44]	; (800262c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	623b      	str	r3, [r7, #32]
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	623b      	str	r3, [r7, #32]
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	6a3b      	ldr	r3, [r7, #32]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bc90      	pop	{r4, r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	08004118 	.word	0x08004118
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	003d0900 	.word	0x003d0900

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b02      	ldr	r3, [pc, #8]	; (8002640 <HAL_RCC_GetHCLKFreq+0x10>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff2 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08004180 	.word	0x08004180

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffde 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0adb      	lsrs	r3, r3, #11
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08004180 	.word	0x08004180

08002694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <RCC_Delay+0x34>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <RCC_Delay+0x38>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0a5b      	lsrs	r3, r3, #9
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b0:	bf00      	nop
  }
  while (Delay --);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	60fa      	str	r2, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f9      	bne.n	80026b0 <RCC_Delay+0x1c>
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000000 	.word	0x20000000
 80026cc:	10624dd3 	.word	0x10624dd3

080026d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e041      	b.n	8002766 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe ff72 	bl	80015e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 fb0e 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_TIM_IC_Start+0x1a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e013      	b.n	80027b2 <HAL_TIM_IC_Start+0x42>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d104      	bne.n	800279a <HAL_TIM_IC_Start+0x2a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_IC_Start+0x42>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d104      	bne.n	80027aa <HAL_TIM_IC_Start+0x3a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e003      	b.n	80027b2 <HAL_TIM_IC_Start+0x42>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <HAL_TIM_IC_Start+0x54>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e013      	b.n	80027ec <HAL_TIM_IC_Start+0x7c>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d104      	bne.n	80027d4 <HAL_TIM_IC_Start+0x64>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e00b      	b.n	80027ec <HAL_TIM_IC_Start+0x7c>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d104      	bne.n	80027e4 <HAL_TIM_IC_Start+0x74>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	e003      	b.n	80027ec <HAL_TIM_IC_Start+0x7c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d001      	beq.n	80027fe <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06d      	b.n	80028da <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_TIM_IC_Start+0x9e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280c:	e013      	b.n	8002836 <HAL_TIM_IC_Start+0xc6>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d104      	bne.n	800281e <HAL_TIM_IC_Start+0xae>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800281c:	e00b      	b.n	8002836 <HAL_TIM_IC_Start+0xc6>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d104      	bne.n	800282e <HAL_TIM_IC_Start+0xbe>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800282c:	e003      	b.n	8002836 <HAL_TIM_IC_Start+0xc6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_TIM_IC_Start+0xd6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002844:	e013      	b.n	800286e <HAL_TIM_IC_Start+0xfe>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d104      	bne.n	8002856 <HAL_TIM_IC_Start+0xe6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002854:	e00b      	b.n	800286e <HAL_TIM_IC_Start+0xfe>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d104      	bne.n	8002866 <HAL_TIM_IC_Start+0xf6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002864:	e003      	b.n	800286e <HAL_TIM_IC_Start+0xfe>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fcd3 	bl	8003222 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_TIM_IC_Start+0x174>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_TIM_IC_Start+0x134>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d009      	beq.n	80028a4 <HAL_TIM_IC_Start+0x134>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_TIM_IC_Start+0x178>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_TIM_IC_Start+0x134>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HAL_TIM_IC_Start+0x17c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d111      	bne.n	80028c8 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d010      	beq.n	80028d8 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c6:	e007      	b.n	80028d8 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800

080028f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <HAL_TIM_IC_Start_IT+0x1a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e013      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x42>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d104      	bne.n	800291a <HAL_TIM_IC_Start_IT+0x2a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e00b      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x42>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d104      	bne.n	800292a <HAL_TIM_IC_Start_IT+0x3a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e003      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x42>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <HAL_TIM_IC_Start_IT+0x54>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e013      	b.n	800296c <HAL_TIM_IC_Start_IT+0x7c>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b04      	cmp	r3, #4
 8002948:	d104      	bne.n	8002954 <HAL_TIM_IC_Start_IT+0x64>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e00b      	b.n	800296c <HAL_TIM_IC_Start_IT+0x7c>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b08      	cmp	r3, #8
 8002958:	d104      	bne.n	8002964 <HAL_TIM_IC_Start_IT+0x74>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e003      	b.n	800296c <HAL_TIM_IC_Start_IT+0x7c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296a:	b2db      	uxtb	r3, r3
 800296c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0b3      	b.n	8002ae6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <HAL_TIM_IC_Start_IT+0x9e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	e013      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0xc6>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d104      	bne.n	800299e <HAL_TIM_IC_Start_IT+0xae>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800299c:	e00b      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0xc6>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_IC_Start_IT+0xbe>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ac:	e003      	b.n	80029b6 <HAL_TIM_IC_Start_IT+0xc6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_IC_Start_IT+0xd6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c4:	e013      	b.n	80029ee <HAL_TIM_IC_Start_IT+0xfe>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_IC_Start_IT+0xe6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d4:	e00b      	b.n	80029ee <HAL_TIM_IC_Start_IT+0xfe>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_IC_Start_IT+0xf6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e4:	e003      	b.n	80029ee <HAL_TIM_IC_Start_IT+0xfe>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d841      	bhi.n	8002a78 <HAL_TIM_IC_Start_IT+0x188>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <HAL_TIM_IC_Start_IT+0x10c>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a31 	.word	0x08002a31
 8002a00:	08002a79 	.word	0x08002a79
 8002a04:	08002a79 	.word	0x08002a79
 8002a08:	08002a79 	.word	0x08002a79
 8002a0c:	08002a43 	.word	0x08002a43
 8002a10:	08002a79 	.word	0x08002a79
 8002a14:	08002a79 	.word	0x08002a79
 8002a18:	08002a79 	.word	0x08002a79
 8002a1c:	08002a55 	.word	0x08002a55
 8002a20:	08002a79 	.word	0x08002a79
 8002a24:	08002a79 	.word	0x08002a79
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002a67 	.word	0x08002a67
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0202 	orr.w	r2, r2, #2
 8002a3e:	60da      	str	r2, [r3, #12]
      break;
 8002a40:	e01b      	b.n	8002a7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0204 	orr.w	r2, r2, #4
 8002a50:	60da      	str	r2, [r3, #12]
      break;
 8002a52:	e012      	b.n	8002a7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0208 	orr.w	r2, r2, #8
 8002a62:	60da      	str	r2, [r3, #12]
      break;
 8002a64:	e009      	b.n	8002a7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0210 	orr.w	r2, r2, #16
 8002a74:	60da      	str	r2, [r3, #12]
      break;
 8002a76:	e000      	b.n	8002a7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002a78:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fbcd 	bl	8003222 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_TIM_IC_Start_IT+0x200>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00e      	beq.n	8002ab0 <HAL_TIM_IC_Start_IT+0x1c0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d009      	beq.n	8002ab0 <HAL_TIM_IC_Start_IT+0x1c0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_TIM_IC_Start_IT+0x204>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_TIM_IC_Start_IT+0x1c0>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_TIM_IC_Start_IT+0x208>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d010      	beq.n	8002ae4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	e007      	b.n	8002ae4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800

08002afc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e082      	b.n	8002c1c <HAL_TIM_IC_ConfigChannel+0x120>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f000 f9ec 	bl	8002f10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 020c 	bic.w	r2, r2, #12
 8002b46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6999      	ldr	r1, [r3, #24]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	619a      	str	r2, [r3, #24]
 8002b5a:	e05a      	b.n	8002c12 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d11c      	bne.n	8002b9c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f000 fa55 	bl	8003020 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6999      	ldr	r1, [r3, #24]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	619a      	str	r2, [r3, #24]
 8002b9a:	e03a      	b.n	8002c12 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d11b      	bne.n	8002bda <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f000 faa0 	bl	80030f6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 020c 	bic.w	r2, r2, #12
 8002bc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
 8002bd8:	e01b      	b.n	8002c12 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f000 fabf 	bl	800316c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bfc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	021a      	lsls	r2, r3, #8
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e031      	b.n	8002ca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8d0 	bl	8002df4 <TIM_SlaveTimer_SetConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e018      	b.n	8002ca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d831      	bhi.n	8002d20 <HAL_TIM_ReadCapturedValue+0x78>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cf9 	.word	0x08002cf9
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002d03 	.word	0x08002d03
 8002cd8:	08002d21 	.word	0x08002d21
 8002cdc:	08002d21 	.word	0x08002d21
 8002ce0:	08002d21 	.word	0x08002d21
 8002ce4:	08002d0d 	.word	0x08002d0d
 8002ce8:	08002d21 	.word	0x08002d21
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002d21 	.word	0x08002d21
 8002cf4:	08002d17 	.word	0x08002d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfe:	60fb      	str	r3, [r7, #12]

      break;
 8002d00:	e00f      	b.n	8002d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	60fb      	str	r3, [r7, #12]

      break;
 8002d0a:	e00a      	b.n	8002d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	60fb      	str	r3, [r7, #12]

      break;
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	60fb      	str	r3, [r7, #12]

      break;
 8002d1e:	e000      	b.n	8002d22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d20:	bf00      	nop
  }

  return tmpreg;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <TIM_Base_SetConfig+0xb8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0x30>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0x30>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a26      	ldr	r2, [pc, #152]	; (8002dec <TIM_Base_SetConfig+0xbc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x30>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <TIM_Base_SetConfig+0xb8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <TIM_Base_SetConfig+0xbc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <TIM_Base_SetConfig+0xb8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d103      	bne.n	8002dd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800

08002df4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0307 	bic.w	r3, r3, #7
 8002e1e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b70      	cmp	r3, #112	; 0x70
 8002e38:	d01a      	beq.n	8002e70 <TIM_SlaveTimer_SetConfig+0x7c>
 8002e3a:	2b70      	cmp	r3, #112	; 0x70
 8002e3c:	d860      	bhi.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e3e:	2b60      	cmp	r3, #96	; 0x60
 8002e40:	d054      	beq.n	8002eec <TIM_SlaveTimer_SetConfig+0xf8>
 8002e42:	2b60      	cmp	r3, #96	; 0x60
 8002e44:	d85c      	bhi.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e46:	2b50      	cmp	r3, #80	; 0x50
 8002e48:	d046      	beq.n	8002ed8 <TIM_SlaveTimer_SetConfig+0xe4>
 8002e4a:	2b50      	cmp	r3, #80	; 0x50
 8002e4c:	d858      	bhi.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d019      	beq.n	8002e86 <TIM_SlaveTimer_SetConfig+0x92>
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d854      	bhi.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e56:	2b30      	cmp	r3, #48	; 0x30
 8002e58:	d054      	beq.n	8002f04 <TIM_SlaveTimer_SetConfig+0x110>
 8002e5a:	2b30      	cmp	r3, #48	; 0x30
 8002e5c:	d850      	bhi.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d050      	beq.n	8002f04 <TIM_SlaveTimer_SetConfig+0x110>
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d84c      	bhi.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04c      	beq.n	8002f04 <TIM_SlaveTimer_SetConfig+0x110>
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d04a      	beq.n	8002f04 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002e6e:	e047      	b.n	8002f00 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68d9      	ldr	r1, [r3, #12]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f000 f9b0 	bl	80031e4 <TIM_ETR_SetConfig>
      break;
 8002e84:	e03f      	b.n	8002f06 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d101      	bne.n	8002e92 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03a      	b.n	8002f08 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	621a      	str	r2, [r3, #32]
      break;
 8002ed6:	e016      	b.n	8002f06 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f000 f86d 	bl	8002fc4 <TIM_TI1_ConfigInputStage>
      break;
 8002eea:	e00c      	b.n	8002f06 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f000 f8cd 	bl	8003098 <TIM_TI2_ConfigInputStage>
      break;
 8002efe:	e002      	b.n	8002f06 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002f00:	bf00      	nop
 8002f02:	e000      	b.n	8002f06 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002f04:	bf00      	nop
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <TIM_TI1_SetConfig+0xa8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_TI1_SetConfig+0x46>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d007      	beq.n	8002f56 <TIM_TI1_SetConfig+0x46>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <TIM_TI1_SetConfig+0xac>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_TI1_SetConfig+0x46>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <TIM_TI1_SetConfig+0xb0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <TIM_TI1_SetConfig+0x4a>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <TIM_TI1_SetConfig+0x4c>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e003      	b.n	8002f7a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f023 030a 	bic.w	r3, r3, #10
 8002f94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 030a 	and.w	r3, r3, #10
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	621a      	str	r2, [r3, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0201 	bic.w	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 030a 	bic.w	r3, r3, #10
 8003000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	621a      	str	r2, [r3, #32]
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0210 	bic.w	r2, r3, #16
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	031b      	lsls	r3, r3, #12
 8003064:	b29b      	uxth	r3, r3
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003072:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 0210 	bic.w	r2, r3, #16
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	031b      	lsls	r3, r3, #12
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	621a      	str	r2, [r3, #32]
}
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003132:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	b2db      	uxtb	r3, r3
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003146:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003198:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	031b      	lsls	r3, r3, #12
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	031b      	lsls	r3, r3, #12
 80031c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	431a      	orrs	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	2201      	movs	r2, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	43db      	mvns	r3, r3
 8003244:	401a      	ands	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	431a      	orrs	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
	...

0800326c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003280:	2302      	movs	r3, #2
 8003282:	e046      	b.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d009      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10c      	bne.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e03f      	b.n	80033ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe f9d4 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f905 	bl	800357c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b08a      	sub	sp, #40	; 0x28
 80033c6:	af02      	add	r7, sp, #8
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d17c      	bne.n	80034dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_Transmit+0x2c>
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e075      	b.n	80034de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Transmit+0x3e>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e06e      	b.n	80034de <HAL_UART_Transmit+0x11c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2221      	movs	r2, #33	; 0x21
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003416:	f7fe fa69 	bl	80018ec <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	88fa      	ldrh	r2, [r7, #6]
 8003426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003430:	d108      	bne.n	8003444 <HAL_UART_Transmit+0x82>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e003      	b.n	800344c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003454:	e02a      	b.n	80034ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f840 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e036      	b.n	80034de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	3302      	adds	r3, #2
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e007      	b.n	800349e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1cf      	bne.n	8003456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f810 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	e02c      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d028      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0x30>
 8003506:	f7fe f9f1 	bl	80018ec <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	d21d      	bcs.n	8003552 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003524:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d0c3      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035b6:	f023 030c 	bic.w	r3, r3, #12
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <UART_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7ff f842 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	e002      	b.n	80035f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f82a 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <UART_SetConfig+0x118>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	0119      	lsls	r1, r3, #4
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f2f3 	udiv	r2, r2, r3
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <UART_SetConfig+0x118>)
 800362a:	fba3 0302 	umull	r0, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2064      	movs	r0, #100	; 0x64
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	; 0x32
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <UART_SetConfig+0x118>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	4419      	add	r1, r3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <UART_SetConfig+0x118>)
 8003662:	fba3 0302 	umull	r0, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2064      	movs	r0, #100	; 0x64
 800366a:	fb00 f303 	mul.w	r3, r0, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	3332      	adds	r3, #50	; 0x32
 8003674:	4a07      	ldr	r2, [pc, #28]	; (8003694 <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	440a      	add	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40013800 	.word	0x40013800
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <hlw8012_getcurrent_multiplier>:
  float _power = 0;

// Check values every 2 seconds
#define UPDATE_TIME                     2000

  double hlw8012_getcurrent_multiplier() { return _current_multiplier; };
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <hlw8012_getcurrent_multiplier+0x14>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	20000190 	.word	0x20000190

080036b0 <hlw8012_getvoltage_multiplier>:
    double hlw8012_getvoltage_multiplier() { return _voltage_multiplier; };
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <hlw8012_getvoltage_multiplier+0x14>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	200001a0 	.word	0x200001a0

080036c8 <hlw8012_getpower_multiplier>:

double hlw8012_getpower_multiplier() { return _power_multiplier; };
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <hlw8012_getpower_multiplier+0x14>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000198 	.word	0x20000198

080036e0 <hlw8012_sel_high_current>:

void hlw8012_sel_high_current()
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, GPIO_Pin, PinState)
	GPIOB->ODR |= (GPIO_ODR_ODR7);
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <hlw8012_sel_high_current+0x18>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <hlw8012_sel_high_current+0x18>)
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR |= (GPIO_ODR_ODR13);
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40010c00 	.word	0x40010c00

080036fc <hlw8012_sel_low_volatge>:
void hlw8012_sel_low_volatge()
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_ODR7);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <hlw8012_sel_low_volatge+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a03      	ldr	r2, [pc, #12]	; (8003714 <hlw8012_sel_low_volatge+0x18>)
 8003706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370a:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR &= ~(GPIO_ODR_ODR13);
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40010c00 	.word	0x40010c00

08003718 <hlw8012_getcurrent>:
	unsigned long gb_timeIn = HAL_GetTick();	// Timestamp coming into function
	while (HAL_GetTick() - gb_timeIn < mseconds) HAL_Delay(1); // While we haven't timed out
}

float hlw8012_getcurrent()
{
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	af00      	add	r7, sp, #0
	//if(_power == 0){
	//     _current_pulse_width = 0;
	//}
	//else
	{
	hlw8012_sel_high_current();
 800371c:	f7ff ffe0 	bl	80036e0 <hlw8012_sel_high_current>
	_current_pulse_width = pulseIN_current();
 8003720:	f000 f838 	bl	8003794 <pulseIN_current>
 8003724:	4603      	mov	r3, r0
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fc8c 	bl	8001044 <__aeabi_f2uiz>
 800372c:	4603      	mov	r3, r0
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <hlw8012_getcurrent+0x70>)
 8003730:	6013      	str	r3, [r2, #0]
	_current = (_current_pulse_width > 0) ? (_current_multiplier / _current_pulse_width )*2: 0;
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <hlw8012_getcurrent+0x70>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01d      	beq.n	8003776 <hlw8012_getcurrent+0x5e>
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <hlw8012_getcurrent+0x74>)
 800373c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <hlw8012_getcurrent+0x70>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc fe45 	bl	80003d4 <__aeabi_ui2d>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4620      	mov	r0, r4
 8003750:	4629      	mov	r1, r5
 8003752:	f7fc ffe3 	bl	800071c <__aeabi_ddiv>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	f7fc fcfb 	bl	800015c <__adddf3>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f7fd f945 	bl	80009fc <__aeabi_d2f>
 8003772:	4603      	mov	r3, r0
 8003774:	e001      	b.n	800377a <hlw8012_getcurrent+0x62>
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <hlw8012_getcurrent+0x78>)
 800377c:	6013      	str	r3, [r2, #0]
	//return _current;
	}
	return _current;
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <hlw8012_getcurrent+0x78>)
 8003780:	681b      	ldr	r3, [r3, #0]
}
 8003782:	4618      	mov	r0, r3
 8003784:	bdb0      	pop	{r4, r5, r7, pc}
 8003786:	bf00      	nop
 8003788:	20000058 	.word	0x20000058
 800378c:	20000190 	.word	0x20000190
 8003790:	20000060 	.word	0x20000060

08003794 <pulseIN_current>:
/*
 * Period is taken from TIM4_IRQ
 *
 */
float pulseIN_current()
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
unsigned long gb_pulse_current = HAL_GetTick();	// Timestamp coming into function
 800379a:	f7fe f8a7 	bl	80018ec <HAL_GetTick>
 800379e:	6078      	str	r0, [r7, #4]
//tim4_ch1_capture_config();
	while (HAL_GetTick() - gb_pulse_current < 2000 )
 80037a0:	e008      	b.n	80037b4 <pulseIN_current+0x20>
	{
	tim3_ch2_capture_config();
 80037a2:	f000 faf3 	bl	8003d8c <tim3_ch2_capture_config>
		tim4_ch1_capture_config();
 80037a6:	f000 fab1 	bl	8003d0c <tim4_ch1_capture_config>
	//	 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	Current_Period = TIM3_getPeriod();
 80037aa:	f000 fba7 	bl	8003efc <TIM3_getPeriod>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <pulseIN_current+0x48>)
 80037b2:	6013      	str	r3, [r2, #0]
	while (HAL_GetTick() - gb_pulse_current < 2000 )
 80037b4:	f7fe f89a 	bl	80018ec <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037c2:	d3ee      	bcc.n	80037a2 <pulseIN_current+0xe>
	}
	//tim4_ch1_capture_unconfig();
	tim3_ch2_capture_unconfig();
 80037c4:	f000 fb02 	bl	8003dcc <tim3_ch2_capture_unconfig>

	//reinitialise Period to 0
	TIM4_setPeriod(0);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f000 fc33 	bl	8004034 <TIM4_setPeriod>
	//}
	return Current_Period;
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <pulseIN_current+0x48>)
 80037d0:	681b      	ldr	r3, [r3, #0]

}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000006c 	.word	0x2000006c

080037e0 <hlw8012_getvoltage>:
float hlw8012_getvoltage()
{
 80037e0:	b5b0      	push	{r4, r5, r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	hlw8012_sel_low_volatge();
 80037e4:	f7ff ff8a 	bl	80036fc <hlw8012_sel_low_volatge>
	_voltage_pulse_width = pulseIN_voltage();
 80037e8:	f000 f83a 	bl	8003860 <pulseIN_voltage>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fc28 	bl	8001044 <__aeabi_f2uiz>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <hlw8012_getvoltage+0x74>)
 80037f8:	6013      	str	r3, [r2, #0]
	_voltage = (_voltage_pulse_width > 0) ? _voltage_multiplier / _voltage_pulse_width/2: 0;
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <hlw8012_getvoltage+0x74>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01f      	beq.n	8003842 <hlw8012_getvoltage+0x62>
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <hlw8012_getvoltage+0x78>)
 8003804:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <hlw8012_getvoltage+0x74>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fde1 	bl	80003d4 <__aeabi_ui2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	f7fc ff7f 	bl	800071c <__aeabi_ddiv>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800382e:	f7fc ff75 	bl	800071c <__aeabi_ddiv>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f7fd f8df 	bl	80009fc <__aeabi_d2f>
 800383e:	4603      	mov	r3, r0
 8003840:	e001      	b.n	8003846 <hlw8012_getvoltage+0x66>
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <hlw8012_getvoltage+0x7c>)
 8003848:	6013      	str	r3, [r2, #0]
	return _voltage;
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <hlw8012_getvoltage+0x7c>)
 800384c:	681b      	ldr	r3, [r3, #0]
}
 800384e:	4618      	mov	r0, r3
 8003850:	bdb0      	pop	{r4, r5, r7, pc}
 8003852:	bf00      	nop
 8003854:	20000054 	.word	0x20000054
 8003858:	200001a0 	.word	0x200001a0
 800385c:	20000064 	.word	0x20000064

08003860 <pulseIN_voltage>:
float voltage_Period = 0;
float pulseIN_voltage()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = HAL_GetTick();	// Timestamp coming into function
 8003866:	f7fe f841 	bl	80018ec <HAL_GetTick>
 800386a:	6078      	str	r0, [r7, #4]
		while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 800386c:	e006      	b.n	800387c <pulseIN_voltage+0x1c>
		{
		//	tim4_ch1_capture_config();
	tim3_ch2_capture_config();
 800386e:	f000 fa8d 	bl	8003d8c <tim3_ch2_capture_config>
		// HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	voltage_Period = TIM3_getPeriod();
 8003872:	f000 fb43 	bl	8003efc <TIM3_getPeriod>
 8003876:	4603      	mov	r3, r0
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <pulseIN_voltage+0x44>)
 800387a:	6013      	str	r3, [r2, #0]
		while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 800387c:	f7fe f836 	bl	80018ec <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800388a:	d3f0      	bcc.n	800386e <pulseIN_voltage+0xe>
		}
	//	tim4_ch1_capture_unconfig();
	tim3_ch2_capture_unconfig();
 800388c:	f000 fa9e 	bl	8003dcc <tim3_ch2_capture_unconfig>

	//reinitilise Period to 0
	TIM4_setPeriod(0);
 8003890:	2000      	movs	r0, #0
 8003892:	f000 fbcf 	bl	8004034 <TIM4_setPeriod>
	return voltage_Period;
 8003896:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <pulseIN_voltage+0x44>)
 8003898:	681b      	ldr	r3, [r3, #0]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000070 	.word	0x20000070

080038a8 <hlw8012_getactivepower>:
float hlw8012_getactivepower()
{
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	_power_pulse_width = pulseIN_power();
 80038ac:	f000 f83a 	bl	8003924 <pulseIN_power>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fbc6 	bl	8001044 <__aeabi_f2uiz>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <hlw8012_getactivepower+0x70>)
 80038bc:	6013      	str	r3, [r2, #0]
	_power = (_power_pulse_width > 0) ? _power_multiplier / _power_pulse_width / 2 : 0;
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <hlw8012_getactivepower+0x70>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01f      	beq.n	8003906 <hlw8012_getactivepower+0x5e>
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <hlw8012_getactivepower+0x74>)
 80038c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <hlw8012_getactivepower+0x70>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fd7f 	bl	80003d4 <__aeabi_ui2d>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4620      	mov	r0, r4
 80038dc:	4629      	mov	r1, r5
 80038de:	f7fc ff1d 	bl	800071c <__aeabi_ddiv>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038f2:	f7fc ff13 	bl	800071c <__aeabi_ddiv>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7fd f87d 	bl	80009fc <__aeabi_d2f>
 8003902:	4603      	mov	r3, r0
 8003904:	e001      	b.n	800390a <hlw8012_getactivepower+0x62>
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	4a05      	ldr	r2, [pc, #20]	; (8003920 <hlw8012_getactivepower+0x78>)
 800390c:	6013      	str	r3, [r2, #0]
	return _power;
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <hlw8012_getactivepower+0x78>)
 8003910:	681b      	ldr	r3, [r3, #0]
}
 8003912:	4618      	mov	r0, r3
 8003914:	bdb0      	pop	{r4, r5, r7, pc}
 8003916:	bf00      	nop
 8003918:	2000005c 	.word	0x2000005c
 800391c:	20000198 	.word	0x20000198
 8003920:	20000068 	.word	0x20000068

08003924 <pulseIN_power>:

float Power_Period = 0;
float pulseIN_power()
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = HAL_GetTick();	// Timestamp coming into function
 800392a:	f7fd ffdf 	bl	80018ec <HAL_GetTick>
 800392e:	6078      	str	r0, [r7, #4]
			while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 8003930:	e008      	b.n	8003944 <pulseIN_power+0x20>
			{
	//tim4_ch1_capture_config();

				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 8003932:	2100      	movs	r1, #0
 8003934:	480d      	ldr	r0, [pc, #52]	; (800396c <pulseIN_power+0x48>)
 8003936:	f7fe ffdb 	bl	80028f0 <HAL_TIM_IC_Start_IT>
	Power_Period = TIM4_getPeriod();
 800393a:	f000 fb71 	bl	8004020 <TIM4_getPeriod>
 800393e:	4603      	mov	r3, r0
 8003940:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <pulseIN_power+0x4c>)
 8003942:	6013      	str	r3, [r2, #0]
			while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 8003944:	f7fd ffd2 	bl	80018ec <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003952:	d3ee      	bcc.n	8003932 <pulseIN_power+0xe>
			}
	tim4_ch1_capture_unconfig();
 8003954:	f000 f9fa 	bl	8003d4c <tim4_ch1_capture_unconfig>

	//reinitilise Period to 0
	TIM3_setPeriod(0);
 8003958:	2000      	movs	r0, #0
 800395a:	f000 fad9 	bl	8003f10 <TIM3_setPeriod>
	return Power_Period;
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <pulseIN_power+0x4c>)
 8003960:	681b      	ldr	r3, [r3, #0]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200000b4 	.word	0x200000b4
 8003970:	20000074 	.word	0x20000074

08003974 <hlw8012_expected_ActiveCurrent>:
void hlw8012_expected_ActiveCurrent( double value)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	e9c7 0100 	strd	r0, r1, [r7]
	if (_current == 0) _current = hlw8012_getcurrent();
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <hlw8012_expected_ActiveCurrent+0x78>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fb2a 	bl	8000fe0 <__aeabi_fcmpeq>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <hlw8012_expected_ActiveCurrent+0x28>
 8003992:	f7ff fec1 	bl	8003718 <hlw8012_getcurrent>
 8003996:	4603      	mov	r3, r0
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <hlw8012_expected_ActiveCurrent+0x78>)
 800399a:	6013      	str	r3, [r2, #0]
	if (_current > 0) _current_multiplier *= (value / _current);
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <hlw8012_expected_ActiveCurrent+0x78>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fb43 	bl	8001030 <__aeabi_fcmpgt>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d100      	bne.n	80039b2 <hlw8012_expected_ActiveCurrent+0x3e>
}
 80039b0:	e018      	b.n	80039e4 <hlw8012_expected_ActiveCurrent+0x70>
	if (_current > 0) _current_multiplier *= (value / _current);
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <hlw8012_expected_ActiveCurrent+0x78>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fd2e 	bl	8000418 <__aeabi_f2d>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039c4:	f7fc feaa 	bl	800071c <__aeabi_ddiv>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <hlw8012_expected_ActiveCurrent+0x7c>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fd77 	bl	80004c8 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4904      	ldr	r1, [pc, #16]	; (80039f0 <hlw8012_expected_ActiveCurrent+0x7c>)
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000060 	.word	0x20000060
 80039f0:	20000190 	.word	0x20000190

080039f4 <hlw8012_expected_Activevoltage>:
void hlw8012_expected_Activevoltage(double value)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	e9c7 0100 	strd	r0, r1, [r7]
	 if (_voltage == 0) hlw8012_getvoltage();
 80039fe:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <hlw8012_expected_Activevoltage+0x74>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd faea 	bl	8000fe0 <__aeabi_fcmpeq>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <hlw8012_expected_Activevoltage+0x22>
 8003a12:	f7ff fee5 	bl	80037e0 <hlw8012_getvoltage>
	 if (_voltage > 0) _voltage_multiplier *= (((double) value / _voltage));
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <hlw8012_expected_Activevoltage+0x74>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd fb06 	bl	8001030 <__aeabi_fcmpgt>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <hlw8012_expected_Activevoltage+0x38>
}
 8003a2a:	e018      	b.n	8003a5e <hlw8012_expected_Activevoltage+0x6a>
	 if (_voltage > 0) _voltage_multiplier *= (((double) value / _voltage));
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <hlw8012_expected_Activevoltage+0x74>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fc fcf1 	bl	8000418 <__aeabi_f2d>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a3e:	f7fc fe6d 	bl	800071c <__aeabi_ddiv>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <hlw8012_expected_Activevoltage+0x78>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fd3a 	bl	80004c8 <__aeabi_dmul>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <hlw8012_expected_Activevoltage+0x78>)
 8003a5a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000064 	.word	0x20000064
 8003a6c:	200001a0 	.word	0x200001a0

08003a70 <hlw8012_expected_Activepower>:
void hlw8012_expected_Activepower(unsigned int value)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	  if (_power == 0) hlw8012_getactivepower();
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <hlw8012_expected_Activepower+0x7c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd faad 	bl	8000fe0 <__aeabi_fcmpeq>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <hlw8012_expected_Activepower+0x20>
 8003a8c:	f7ff ff0c 	bl	80038a8 <hlw8012_getactivepower>
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
 8003a90:	4b16      	ldr	r3, [pc, #88]	; (8003aec <hlw8012_expected_Activepower+0x7c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fac9 	bl	8001030 <__aeabi_fcmpgt>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d100      	bne.n	8003aa6 <hlw8012_expected_Activepower+0x36>
}
 8003aa4:	e01d      	b.n	8003ae2 <hlw8012_expected_Activepower+0x72>
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fc fc94 	bl	80003d4 <__aeabi_ui2d>
 8003aac:	4604      	mov	r4, r0
 8003aae:	460d      	mov	r5, r1
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <hlw8012_expected_Activepower+0x7c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fcaf 	bl	8000418 <__aeabi_f2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fe2b 	bl	800071c <__aeabi_ddiv>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <hlw8012_expected_Activepower+0x80>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f7fc fcf8 	bl	80004c8 <__aeabi_dmul>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4904      	ldr	r1, [pc, #16]	; (8003af0 <hlw8012_expected_Activepower+0x80>)
 8003ade:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000068 	.word	0x20000068
 8003af0:	20000198 	.word	0x20000198
 8003af4:	00000000 	.word	0x00000000

08003af8 <hlw8012_calculate_default_multiplier>:
void hlw8012_calculate_default_multiplier()
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	 _current_multiplier = ( 1000000.0 * 512 * V_REF / _current_resistor / 24.0 / F_OSC );
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <hlw8012_calculate_default_multiplier+0xf0>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	a133      	add	r1, pc, #204	; (adr r1, 8003bd0 <hlw8012_calculate_default_multiplier+0xd8>)
 8003b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b08:	f7fc fe08 	bl	800071c <__aeabi_ddiv>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <hlw8012_calculate_default_multiplier+0xf4>)
 8003b1a:	f7fc fdff 	bl	800071c <__aeabi_ddiv>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	a32c      	add	r3, pc, #176	; (adr r3, 8003bd8 <hlw8012_calculate_default_multiplier+0xe0>)
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f7fc fdf6 	bl	800071c <__aeabi_ddiv>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	492e      	ldr	r1, [pc, #184]	; (8003bf0 <hlw8012_calculate_default_multiplier+0xf8>)
 8003b36:	e9c1 2300 	strd	r2, r3, [r1]
	 _voltage_multiplier = ( 1000000.0 * 512 * V_REF * _voltage_resistor / 2.0 / F_OSC );
 8003b3a:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <hlw8012_calculate_default_multiplier+0xfc>)
 8003b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b40:	a323      	add	r3, pc, #140	; (adr r3, 8003bd0 <hlw8012_calculate_default_multiplier+0xd8>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fcbf 	bl	80004c8 <__aeabi_dmul>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b5a:	f7fc fddf 	bl	800071c <__aeabi_ddiv>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	a31c      	add	r3, pc, #112	; (adr r3, 8003bd8 <hlw8012_calculate_default_multiplier+0xe0>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fdd6 	bl	800071c <__aeabi_ddiv>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4920      	ldr	r1, [pc, #128]	; (8003bf8 <hlw8012_calculate_default_multiplier+0x100>)
 8003b76:	e9c1 2300 	strd	r2, r3, [r1]
	 _power_multiplier = ( 1000000.0 * 128 * V_REF * V_REF * _voltage_resistor / _current_resistor / 48.0 / F_OSC );
 8003b7a:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <hlw8012_calculate_default_multiplier+0xfc>)
 8003b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b80:	a317      	add	r3, pc, #92	; (adr r3, 8003be0 <hlw8012_calculate_default_multiplier+0xe8>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f7fc fc9f 	bl	80004c8 <__aeabi_dmul>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <hlw8012_calculate_default_multiplier+0xf0>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f7fc fdc0 	bl	800071c <__aeabi_ddiv>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <hlw8012_calculate_default_multiplier+0x104>)
 8003baa:	f7fc fdb7 	bl	800071c <__aeabi_ddiv>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	a308      	add	r3, pc, #32	; (adr r3, 8003bd8 <hlw8012_calculate_default_multiplier+0xe0>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fdae 	bl	800071c <__aeabi_ddiv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <hlw8012_calculate_default_multiplier+0x108>)
 8003bc6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	00000000 	.word	0x00000000
 8003bd4:	41d28a18 	.word	0x41d28a18
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	414b4e3c 	.word	0x414b4e3c
 8003be0:	00000000 	.word	0x00000000
 8003be4:	41c68681 	.word	0x41c68681
 8003be8:	20000010 	.word	0x20000010
 8003bec:	40380000 	.word	0x40380000
 8003bf0:	20000190 	.word	0x20000190
 8003bf4:	20000018 	.word	0x20000018
 8003bf8:	200001a0 	.word	0x200001a0
 8003bfc:	40480000 	.word	0x40480000
 8003c00:	20000198 	.word	0x20000198

08003c04 <hlw8012_setResistors>:

void hlw8012_setResistors( double current, double voltage_upstream, double voltage_downstream)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003c0e:	e9c7 2300 	strd	r2, r3, [r7]
	if (voltage_downstream > 0) {
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c1e:	f7fc fee3 	bl	80009e8 <__aeabi_dcmpgt>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <hlw8012_setResistors+0x26>
	        _current_resistor = current;
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
	        hlw8012_calculate_default_multiplier();
	    }
}
 8003c28:	e019      	b.n	8003c5e <hlw8012_setResistors+0x5a>
	        _current_resistor = current;
 8003c2a:	490f      	ldr	r1, [pc, #60]	; (8003c68 <hlw8012_setResistors+0x64>)
 8003c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c30:	e9c1 2300 	strd	r2, r3, [r1]
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
 8003c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c3c:	f7fc fa8e 	bl	800015c <__adddf3>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4c:	f7fc fd66 	bl	800071c <__aeabi_ddiv>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4905      	ldr	r1, [pc, #20]	; (8003c6c <hlw8012_setResistors+0x68>)
 8003c56:	e9c1 2300 	strd	r2, r3, [r1]
	        hlw8012_calculate_default_multiplier();
 8003c5a:	f7ff ff4d 	bl	8003af8 <hlw8012_calculate_default_multiplier>
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000010 	.word	0x20000010
 8003c6c:	20000018 	.word	0x20000018

08003c70 <hlw8012_calibrate>:
float cur_voltage_multi = 0;
float cur_power_multi = 0;


void hlw8012_calibrate()
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0

//	hlw8012_sel_low_volatge();
//	gb_unblockingDelay(2000);
//	hlw8012_getvoltage();

	hlw8012_expected_Activepower(165.0);
 8003c74:	20a5      	movs	r0, #165	; 0xa5
 8003c76:	f7ff fefb 	bl	8003a70 <hlw8012_expected_Activepower>
 hlw8012_expected_Activevoltage(226.0);
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	491c      	ldr	r1, [pc, #112]	; (8003cf0 <hlw8012_calibrate+0x80>)
 8003c80:	f7ff feb8 	bl	80039f4 <hlw8012_expected_Activevoltage>
	hlw8012_expected_ActiveCurrent(0.730);
 8003c84:	a118      	add	r1, pc, #96	; (adr r1, 8003ce8 <hlw8012_calibrate+0x78>)
 8003c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c8a:	f7ff fe73 	bl	8003974 <hlw8012_expected_ActiveCurrent>

	GB_printString1(" New Current Multiplier");
 8003c8e:	4819      	ldr	r0, [pc, #100]	; (8003cf4 <hlw8012_calibrate+0x84>)
 8003c90:	f7fd fa10 	bl	80010b4 <GB_printString1>
	//GB_decimel1(hlw8012_getcurrent_multiplier());
	cur_current_multi = hlw8012_getcurrent_multiplier();
 8003c94:	f7ff fd00 	bl	8003698 <hlw8012_getcurrent_multiplier>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fc feac 	bl	80009fc <__aeabi_d2f>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <hlw8012_calibrate+0x88>)
 8003ca8:	6013      	str	r3, [r2, #0]

	GB_printString1(" New Voltage Multiplier");
 8003caa:	4814      	ldr	r0, [pc, #80]	; (8003cfc <hlw8012_calibrate+0x8c>)
 8003cac:	f7fd fa02 	bl	80010b4 <GB_printString1>
	//GB_decimel1(hlw8012_getvoltage_multiplier());
	cur_voltage_multi = hlw8012_getvoltage_multiplier();
 8003cb0:	f7ff fcfe 	bl	80036b0 <hlw8012_getvoltage_multiplier>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f7fc fe9e 	bl	80009fc <__aeabi_d2f>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4a0f      	ldr	r2, [pc, #60]	; (8003d00 <hlw8012_calibrate+0x90>)
 8003cc4:	6013      	str	r3, [r2, #0]

	GB_printString1(" New Power Multiplier");
 8003cc6:	480f      	ldr	r0, [pc, #60]	; (8003d04 <hlw8012_calibrate+0x94>)
 8003cc8:	f7fd f9f4 	bl	80010b4 <GB_printString1>
	//GB_decimel1(hlw8012_getpower_multiplier());
	cur_power_multi = hlw8012_getpower_multiplier();
 8003ccc:	f7ff fcfc 	bl	80036c8 <hlw8012_getpower_multiplier>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f7fc fe90 	bl	80009fc <__aeabi_d2f>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <hlw8012_calibrate+0x98>)
 8003ce0:	6013      	str	r3, [r2, #0]

}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	f5c28f5c 	.word	0xf5c28f5c
 8003cec:	3fe75c28 	.word	0x3fe75c28
 8003cf0:	406c4000 	.word	0x406c4000
 8003cf4:	08004128 	.word	0x08004128
 8003cf8:	20000078 	.word	0x20000078
 8003cfc:	08004140 	.word	0x08004140
 8003d00:	2000007c 	.word	0x2000007c
 8003d04:	08004158 	.word	0x08004158
 8003d08:	20000080 	.word	0x20000080

08003d0c <tim4_ch1_capture_config>:
float TIM4_Period = 0;
float TIM4_Width = 0;
float TIM4_Period_Current = 0;

void tim4_ch1_capture_config()
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
	   TIM4->DIER |= TIM_DIER_CC1IE; //capture interrupt enabled
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	60d3      	str	r3, [r2, #12]
	   TIM4->CCER |= TIM_CCER_CC1E; // timer 4 channel1 configured for capture enabled
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6213      	str	r3, [r2, #32]
	   TIM4->CCER |= TIM_CCER_CC2E; // timer 4 channel1 configured for capture enabled
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d2e:	f043 0310 	orr.w	r3, r3, #16
 8003d32:	6213      	str	r3, [r2, #32]
	   TIM4->CR1 |= TIM_CR1_CEN; //enable the time2
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a03      	ldr	r2, [pc, #12]	; (8003d48 <tim4_ch1_capture_config+0x3c>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	40000800 	.word	0x40000800

08003d4c <tim4_ch1_capture_unconfig>:

void tim4_ch1_capture_unconfig()
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
		   TIM4->DIER &= ~TIM_DIER_CC1IE; //capture interrupt disabled
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d56:	f023 0302 	bic.w	r3, r3, #2
 8003d5a:	60d3      	str	r3, [r2, #12]
		   TIM4->CCER &= ~TIM_CCER_CC1E; // timer 4 channel1 unconfigured for capture enabled
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6213      	str	r3, [r2, #32]
		   TIM4->CCER &= ~TIM_CCER_CC2E; //timer 4 channel2 unconfigured for capture enabled
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	6213      	str	r3, [r2, #32]
		   TIM4->CR1 &= ~TIM_CR1_CEN; //disabled the timer
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <tim4_ch1_capture_unconfig+0x3c>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	40000800 	.word	0x40000800

08003d8c <tim3_ch2_capture_config>:

void tim3_ch2_capture_config()
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
	   TIM3->DIER |= TIM_DIER_CC2IE; //capture interrupt enable
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	60d3      	str	r3, [r2, #12]
	   TIM3->CCER |= TIM_CCER_CC1E; // timer 3 channel1 configured for capture enabled
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6213      	str	r3, [r2, #32]
	   TIM3->CCER |= TIM_CCER_CC2E; //timer 3 channel2 configured for capture enabled
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003dae:	f043 0310 	orr.w	r3, r3, #16
 8003db2:	6213      	str	r3, [r2, #32]
	   TIM3->CR1 |= TIM_CR1_CEN; //enable the timer
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <tim3_ch2_capture_config+0x3c>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40000400 	.word	0x40000400

08003dcc <tim3_ch2_capture_unconfig>:

void tim3_ch2_capture_unconfig()
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
		   TIM3->DIER &= ~TIM_DIER_CC2IE; //capture interrupt enable
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	60d3      	str	r3, [r2, #12]
		   TIM3->CCER &= ~TIM_CCER_CC1E; // timer 3 channel1 unconfigured for capture enabled
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
		   TIM3->CCER &= ~TIM_CCER_CC2E; ////timer 3 channel2 unconfigured for capture enabled
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a06      	ldr	r2, [pc, #24]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	6213      	str	r3, [r2, #32]
		   TIM3->CR1 &= ~TIM_CR1_CEN; //disable the timer
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <tim3_ch2_capture_unconfig+0x3c>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	40000400 	.word	0x40000400

08003e0c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC2) != RESET)   // Capture Compare Event 1
 8003e10:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d15a      	bne.n	8003ed4 <TIM3_IRQHandler+0xc8>
	  {
	    if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC2) != RESET)   // Cross check that whether source of Interrupt is configured
 8003e1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d153      	bne.n	8003ed4 <TIM3_IRQHandler+0xc8>
		// if(TIM3->DIER & TIM_DIER_CC1IE)
	    {
	        __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC2);
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0204 	mvn.w	r2, #4
 8003e34:	611a      	str	r2, [r3, #16]
	        htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e36:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e38:	2202      	movs	r2, #2
 8003e3a:	771a      	strb	r2, [r3, #28]

	        /* Input capture event */
	        if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 8003e3c:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d044      	beq.n	8003ed4 <TIM3_IRQHandler+0xc8>
	        {
	        	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 2( for timer 3: pin PB5)
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e4c:	7f1b      	ldrb	r3, [r3, #28]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d140      	bne.n	8003ed4 <TIM3_IRQHandler+0xc8>
	        						{
	        							// Read the IC value
	        							TIM3_IC2Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8003e52:	2104      	movs	r1, #4
 8003e54:	4820      	ldr	r0, [pc, #128]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e56:	f7fe ff27 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <TIM3_IRQHandler+0xd0>)
 8003e5e:	6013      	str	r3, [r2, #0]

	        							if (TIM3_IC2Value != 0)
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <TIM3_IRQHandler+0xd0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d035      	beq.n	8003ed4 <TIM3_IRQHandler+0xc8>
	        							{
	        								TIM3_IC1Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	481b      	ldr	r0, [pc, #108]	; (8003ed8 <TIM3_IRQHandler+0xcc>)
 8003e6c:	f7fe ff1c 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <TIM3_IRQHandler+0xd4>)
 8003e74:	6013      	str	r3, [r2, #0]
	        								// calculate the Duty Cycle
	        								TIM3_Duty = (TIM3_IC1Value *100)/TIM3_IC2Value;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <TIM3_IRQHandler+0xd4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2264      	movs	r2, #100	; 0x64
 8003e7c:	fb02 f203 	mul.w	r2, r2, r3
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <TIM3_IRQHandler+0xd0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc febd 	bl	8000c08 <__aeabi_ui2f>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <TIM3_IRQHandler+0xd8>)
 8003e92:	6013      	str	r3, [r2, #0]
	        								TIM3_Frequency = 100000/TIM3_IC2Value;
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <TIM3_IRQHandler+0xd0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <TIM3_IRQHandler+0xdc>)
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc feb2 	bl	8000c08 <__aeabi_ui2f>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <TIM3_IRQHandler+0xe0>)
 8003ea8:	6013      	str	r3, [r2, #0]
	        								TIM3_Period = 1000000/TIM3_Frequency;//(Perid is in microseconds)
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <TIM3_IRQHandler+0xe0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	480f      	ldr	r0, [pc, #60]	; (8003ef0 <TIM3_IRQHandler+0xe4>)
 8003eb2:	f7fc ffb5 	bl	8000e20 <__aeabi_fdiv>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <TIM3_IRQHandler+0xe8>)
 8003ebc:	601a      	str	r2, [r3, #0]
	        								TIM3_Width = TIM3_Period/2;  //(in microseconds)
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <TIM3_IRQHandler+0xe8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc ffaa 	bl	8000e20 <__aeabi_fdiv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <TIM3_IRQHandler+0xec>)
 8003ed2:	601a      	str	r2, [r3, #0]
	        }
	    }
	  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200000fc 	.word	0x200000fc
 8003edc:	20000088 	.word	0x20000088
 8003ee0:	20000084 	.word	0x20000084
 8003ee4:	20000090 	.word	0x20000090
 8003ee8:	000186a0 	.word	0x000186a0
 8003eec:	2000008c 	.word	0x2000008c
 8003ef0:	49742400 	.word	0x49742400
 8003ef4:	20000094 	.word	0x20000094
 8003ef8:	20000098 	.word	0x20000098

08003efc <TIM3_getPeriod>:

float TIM3_getPeriod()
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	return TIM3_Period;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <TIM3_getPeriod+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000094 	.word	0x20000094

08003f10 <TIM3_setPeriod>:
	return TIM3_Frequency;

}

void TIM3_setPeriod(uint32_t value)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	TIM3_Period = value;
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc fe75 	bl	8000c08 <__aeabi_ui2f>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a02      	ldr	r2, [pc, #8]	; (8003f2c <TIM3_setPeriod+0x1c>)
 8003f22:	6013      	str	r3, [r2, #0]

}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000094 	.word	0x20000094

08003f30 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_CC1) != RESET)   // Capture Compare Event 1
 8003f34:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d15a      	bne.n	8003ff8 <TIM4_IRQHandler+0xc8>
			  {
			    if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_CC1) != RESET)   // Cross check that whether source of Interrupt is configured
 8003f42:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d153      	bne.n	8003ff8 <TIM4_IRQHandler+0xc8>
				// if(TIM3->DIER & TIM_DIER_CC1IE)
			    {
			        __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0202 	mvn.w	r2, #2
 8003f58:	611a      	str	r2, [r3, #16]
			        htim4.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5a:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	771a      	strb	r2, [r3, #28]

			        /* Input capture event */
			        if ((htim4.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d044      	beq.n	8003ff8 <TIM4_IRQHandler+0xc8>
			        {
			        	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1( for timer 4: pin PB6)
 8003f6e:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f70:	7f1b      	ldrb	r3, [r3, #28]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d140      	bne.n	8003ff8 <TIM4_IRQHandler+0xc8>
							{
								// Read the IC value
								TIM4_IC1Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f76:	2100      	movs	r1, #0
 8003f78:	4820      	ldr	r0, [pc, #128]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f7a:	f7fe fe95 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <TIM4_IRQHandler+0xd0>)
 8003f82:	6013      	str	r3, [r2, #0]

								if (TIM4_IC1Value != 0)
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <TIM4_IRQHandler+0xd0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d035      	beq.n	8003ff8 <TIM4_IRQHandler+0xc8>
								{
									TIM4_IC2Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	481b      	ldr	r0, [pc, #108]	; (8003ffc <TIM4_IRQHandler+0xcc>)
 8003f90:	f7fe fe8a 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <TIM4_IRQHandler+0xd4>)
 8003f98:	6013      	str	r3, [r2, #0]
									// calculate the Duty Cycle
									TIM4_Duty = (TIM4_IC2Value *100)/TIM4_IC1Value;
 8003f9a:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <TIM4_IRQHandler+0xd4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2264      	movs	r2, #100	; 0x64
 8003fa0:	fb02 f203 	mul.w	r2, r2, r3
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <TIM4_IRQHandler+0xd0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fe2b 	bl	8000c08 <__aeabi_ui2f>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <TIM4_IRQHandler+0xd8>)
 8003fb6:	6013      	str	r3, [r2, #0]
									TIM4_Frequency = 100000/TIM4_IC1Value;
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <TIM4_IRQHandler+0xd0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <TIM4_IRQHandler+0xdc>)
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fe20 	bl	8000c08 <__aeabi_ui2f>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4a11      	ldr	r2, [pc, #68]	; (8004010 <TIM4_IRQHandler+0xe0>)
 8003fcc:	6013      	str	r3, [r2, #0]
									TIM4_Period = 1000000/TIM4_Frequency;//(Perid is in microseconds)
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <TIM4_IRQHandler+0xe0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	480f      	ldr	r0, [pc, #60]	; (8004014 <TIM4_IRQHandler+0xe4>)
 8003fd6:	f7fc ff23 	bl	8000e20 <__aeabi_fdiv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <TIM4_IRQHandler+0xe8>)
 8003fe0:	601a      	str	r2, [r3, #0]
									TIM4_Width = TIM4_Period/2;  //(in microseconds)
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <TIM4_IRQHandler+0xe8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc ff18 	bl	8000e20 <__aeabi_fdiv>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <TIM4_IRQHandler+0xec>)
 8003ff6:	601a      	str	r2, [r3, #0]
							}
			        }
			    }
			  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200000b4 	.word	0x200000b4
 8004000:	2000009c 	.word	0x2000009c
 8004004:	200000a0 	.word	0x200000a0
 8004008:	200000a8 	.word	0x200000a8
 800400c:	000186a0 	.word	0x000186a0
 8004010:	200000a4 	.word	0x200000a4
 8004014:	49742400 	.word	0x49742400
 8004018:	200000ac 	.word	0x200000ac
 800401c:	200000b0 	.word	0x200000b0

08004020 <TIM4_getPeriod>:

float TIM4_getPeriod()
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
	return TIM4_Period;
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <TIM4_getPeriod+0x10>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	200000ac 	.word	0x200000ac

08004034 <TIM4_setPeriod>:
	return TIM4_Frequency;

}

void TIM4_setPeriod(uint32_t value)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	TIM4_Period = value;
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fc fde3 	bl	8000c08 <__aeabi_ui2f>
 8004042:	4603      	mov	r3, r0
 8004044:	4a02      	ldr	r2, [pc, #8]	; (8004050 <TIM4_setPeriod+0x1c>)
 8004046:	6013      	str	r3, [r2, #0]

}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200000ac 	.word	0x200000ac

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2600      	movs	r6, #0
 8004058:	4d0c      	ldr	r5, [pc, #48]	; (800408c <__libc_init_array+0x38>)
 800405a:	4c0d      	ldr	r4, [pc, #52]	; (8004090 <__libc_init_array+0x3c>)
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	f000 f822 	bl	80040ac <_init>
 8004068:	2600      	movs	r6, #0
 800406a:	4d0a      	ldr	r5, [pc, #40]	; (8004094 <__libc_init_array+0x40>)
 800406c:	4c0a      	ldr	r4, [pc, #40]	; (8004098 <__libc_init_array+0x44>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	08004188 	.word	0x08004188
 8004090:	08004188 	.word	0x08004188
 8004094:	08004188 	.word	0x08004188
 8004098:	0800418c 	.word	0x0800418c

0800409c <memset>:
 800409c:	4603      	mov	r3, r0
 800409e:	4402      	add	r2, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <_init>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr

080040b8 <_fini>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr
