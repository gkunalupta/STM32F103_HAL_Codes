
GB_STM32_HLW8012_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b00  08002b00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b00  08002b00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b00  08002b00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08002b14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002b14  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aacc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192d  00000000  00000000  0002ab01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177bf  00000000  00000000  0002dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b893  00000000  00000000  000452a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a403  00000000  00000000  00050b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000daf3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000daf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ac0 	.word	0x08002ac0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002ac0 	.word	0x08002ac0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb26 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f81e 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f98e 	bl	8000934 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f962 	bl	80008e0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800061c:	f000 f85c 	bl	80006d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000620:	f000 f8dc 	bl	80007dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);   // main channel
 8000624:	2104      	movs	r1, #4
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <main+0x40>)
 8000628:	f001 fb36 	bl	8001c98 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);   // indirect channel
 800062c:	2100      	movs	r1, #0
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x40>)
 8000630:	f001 fa72 	bl	8001b18 <HAL_TIM_IC_Start>

   HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <main+0x44>)
 8000638:	f001 fb2e 	bl	8001c98 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);   // indirect channel
 800063c:	2104      	movs	r1, #4
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <main+0x44>)
 8000640:	f001 fa6a 	bl	8001b18 <HAL_TIM_IC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x3c>
 8000646:	bf00      	nop
 8000648:	200000a0 	.word	0x200000a0
 800064c:	20000058 	.word	0x20000058

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b090      	sub	sp, #64	; 0x40
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fa26 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800068e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdd3 	bl	8001244 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006a4:	f000 f974 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f83f 	bl	8001744 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006cc:	f000 f960 	bl	8000990 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3740      	adds	r7, #64	; 0x40
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_TIM3_Init+0xfc>)
 8000706:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <MX_TIM3_Init+0x100>)
 8000708:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320;
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <MX_TIM3_Init+0xfc>)
 800070c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000710:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_TIM3_Init+0xfc>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MX_TIM3_Init+0xfc>)
 800071a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MX_TIM3_Init+0xfc>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_TIM3_Init+0xfc>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <MX_TIM3_Init+0xfc>)
 800072e:	f001 f9a3 	bl	8001a78 <HAL_TIM_IC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000738:	f000 f92a 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800073c:	2304      	movs	r3, #4
 800073e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000740:	2360      	movs	r3, #96	; 0x60
 8000742:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000744:	2302      	movs	r3, #2
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	481f      	ldr	r0, [pc, #124]	; (80007d4 <MX_TIM3_Init+0xfc>)
 8000758:	f001 fc38 	bl	8001fcc <HAL_TIM_SlaveConfigSynchro>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000762:	f000 f915 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800076a:	2302      	movs	r3, #2
 800076c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <MX_TIM3_Init+0xfc>)
 8000780:	f001 fb90 	bl	8001ea4 <HAL_TIM_IC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800078a:	f000 f901 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2204      	movs	r2, #4
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM3_Init+0xfc>)
 80007a0:	f001 fb80 	bl	8001ea4 <HAL_TIM_IC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007aa:	f000 f8f1 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM3_Init+0xfc>)
 80007bc:	f001 ff2a 	bl	8002614 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80007c6:	f000 f8e3 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000a0 	.word	0x200000a0
 80007d8:	40000400 	.word	0x40000400

080007dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	; 0x30
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000808:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MX_TIM4_Init+0xfc>)
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_TIM4_Init+0x100>)
 800080c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <MX_TIM4_Init+0xfc>)
 8000810:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000814:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_TIM4_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800081c:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_TIM4_Init+0xfc>)
 800081e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000822:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_TIM4_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_TIM4_Init+0xfc>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000830:	4829      	ldr	r0, [pc, #164]	; (80008d8 <MX_TIM4_Init+0xfc>)
 8000832:	f001 f921 	bl	8001a78 <HAL_TIM_IC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800083c:	f000 f8a8 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000840:	2304      	movs	r3, #4
 8000842:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000844:	2350      	movs	r3, #80	; 0x50
 8000846:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	481f      	ldr	r0, [pc, #124]	; (80008d8 <MX_TIM4_Init+0xfc>)
 800085c:	f001 fbb6 	bl	8001fcc <HAL_TIM_SlaveConfigSynchro>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000866:	f000 f893 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4815      	ldr	r0, [pc, #84]	; (80008d8 <MX_TIM4_Init+0xfc>)
 8000884:	f001 fb0e 	bl	8001ea4 <HAL_TIM_IC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800088e:	f000 f87f 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000892:	2302      	movs	r3, #2
 8000894:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2204      	movs	r2, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_TIM4_Init+0xfc>)
 80008a4:	f001 fafe 	bl	8001ea4 <HAL_TIM_IC_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80008ae:	f000 f86f 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_TIM4_Init+0xfc>)
 80008c0:	f001 fea8 	bl	8002614 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80008ca:	f000 f861 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000058 	.word	0x20000058
 80008dc:	40000800 	.word	0x40000800

080008e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_USART1_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000918:	f001 feda 	bl	80026d0 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 f835 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000e8 	.word	0x200000e8
 8000930:	40013800 	.word	0x40013800

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_GPIO_Init+0x58>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a13      	ldr	r2, [pc, #76]	; (800098c <MX_GPIO_Init+0x58>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_GPIO_Init+0x58>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0320 	and.w	r3, r3, #32
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_GPIO_Init+0x58>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <MX_GPIO_Init+0x58>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_GPIO_Init+0x58>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_GPIO_Init+0x58>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <MX_GPIO_Init+0x58>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_GPIO_Init+0x58>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_MspInit+0x5c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <HAL_MspInit+0x5c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x5c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x5c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_MspInit+0x60>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_MspInit+0x60>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010000 	.word	0x40010000

08000a00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a3b      	ldr	r2, [pc, #236]	; (8000b08 <HAL_TIM_IC_MspInit+0x108>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d13e      	bne.n	8000a9e <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a50:	2320      	movs	r3, #32
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <HAL_TIM_IC_MspInit+0x110>)
 8000a64:	f000 fa6a 	bl	8000f3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_TIM_IC_MspInit+0x114>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_TIM_IC_MspInit+0x114>)
 8000a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8a:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	201d      	movs	r0, #29
 8000a92:	f000 fa1c 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a96:	201d      	movs	r0, #29
 8000a98:	f000 fa35 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a9c:	e030      	b.n	8000b00 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_TIM_IC_MspInit+0x118>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d12b      	bne.n	8000b00 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_TIM_IC_MspInit+0x10c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_TIM_IC_MspInit+0x110>)
 8000aec:	f000 fa26 	bl	8000f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	201e      	movs	r0, #30
 8000af6:	f000 f9ea 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000afa:	201e      	movs	r0, #30
 8000afc:	f000 fa03 	bl	8000f06 <HAL_NVIC_EnableIRQ>
}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	; 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40000800 	.word	0x40000800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d131      	bne.n	8000ba0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b82:	f000 f9db 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b9c:	f000 f9ce 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f875 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
	...

08000c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff ffe4 	bl	8000c02 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f001 ff15 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fce3 	bl	8000608 <main>
  bx lr
 8000c42:	4770      	bx	lr
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c4c:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 8000c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c54:	20000130 	.word	0x20000130

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x28>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x28>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f923 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe90 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f93b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f903 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000008 	.word	0x20000008
 8000d08:	2000012c 	.word	0x2000012c

08000d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	2000012c 	.word	0x2000012c

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4906      	ldr	r1, [pc, #24]	; (8000db8 <__NVIC_EnableIRQ+0x34>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff90 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff2d 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff42 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff90 	bl	8000e10 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5f 	bl	8000dbc <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff35 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b08b      	sub	sp, #44	; 0x2c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e169      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f50:	2201      	movs	r2, #1
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8158 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a9a      	ldr	r2, [pc, #616]	; (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d05e      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f78:	4a98      	ldr	r2, [pc, #608]	; (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d875      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f7e:	4a98      	ldr	r2, [pc, #608]	; (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d058      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f84:	4a96      	ldr	r2, [pc, #600]	; (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d86f      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f8a:	4a96      	ldr	r2, [pc, #600]	; (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d052      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f90:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d869      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f96:	4a94      	ldr	r2, [pc, #592]	; (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d04c      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a92      	ldr	r2, [pc, #584]	; (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d863      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fa2:	4a92      	ldr	r2, [pc, #584]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d046      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a90      	ldr	r2, [pc, #576]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d85d      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d82a      	bhi.n	8001008 <HAL_GPIO_Init+0xcc>
 8000fb2:	2b12      	cmp	r3, #18
 8000fb4:	d859      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fb6:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <HAL_GPIO_Init+0x80>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08001037 	.word	0x08001037
 8000fc0:	08001011 	.word	0x08001011
 8000fc4:	08001023 	.word	0x08001023
 8000fc8:	08001065 	.word	0x08001065
 8000fcc:	0800106b 	.word	0x0800106b
 8000fd0:	0800106b 	.word	0x0800106b
 8000fd4:	0800106b 	.word	0x0800106b
 8000fd8:	0800106b 	.word	0x0800106b
 8000fdc:	0800106b 	.word	0x0800106b
 8000fe0:	0800106b 	.word	0x0800106b
 8000fe4:	0800106b 	.word	0x0800106b
 8000fe8:	0800106b 	.word	0x0800106b
 8000fec:	0800106b 	.word	0x0800106b
 8000ff0:	0800106b 	.word	0x0800106b
 8000ff4:	0800106b 	.word	0x0800106b
 8000ff8:	0800106b 	.word	0x0800106b
 8000ffc:	0800106b 	.word	0x0800106b
 8001000:	08001019 	.word	0x08001019
 8001004:	0800102d 	.word	0x0800102d
 8001008:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <HAL_GPIO_Init+0x2b4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100e:	e02c      	b.n	800106a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e029      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e024      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e01f      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	330c      	adds	r3, #12
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e01a      	b.n	800106c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103e:	2304      	movs	r3, #4
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e013      	b.n	800106c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	611a      	str	r2, [r3, #16]
          break;
 8001056:	e009      	b.n	800106c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	615a      	str	r2, [r3, #20]
          break;
 8001062:	e003      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x130>
          break;
 800106a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2bff      	cmp	r3, #255	; 0xff
 8001070:	d801      	bhi.n	8001076 <HAL_GPIO_Init+0x13a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	e001      	b.n	800107a <HAL_GPIO_Init+0x13e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d802      	bhi.n	8001088 <HAL_GPIO_Init+0x14c>
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x152>
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	3b08      	subs	r3, #8
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	210f      	movs	r1, #15
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	6a39      	ldr	r1, [r7, #32]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80b1 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a40      	ldr	r2, [pc, #256]	; (80011fc <HAL_GPIO_Init+0x2c0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1ec>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3f      	ldr	r2, [pc, #252]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1e8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <HAL_GPIO_Init+0x2c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1e4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_GPIO_Init+0x2cc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1e0>
 8001118:	2303      	movs	r3, #3
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 800111c:	2304      	movs	r3, #4
 800111e:	e004      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001120:	2302      	movs	r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001128:	2300      	movs	r3, #0
 800112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800113a:	492f      	ldr	r1, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	492c      	ldr	r1, [pc, #176]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4928      	ldr	r1, [pc, #160]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4922      	ldr	r1, [pc, #136]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	491e      	ldr	r1, [pc, #120]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	4918      	ldr	r1, [pc, #96]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4914      	ldr	r1, [pc, #80]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d021      	beq.n	8001210 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e021      	b.n	800121e <HAL_GPIO_Init+0x2e2>
 80011da:	bf00      	nop
 80011dc:	10320000 	.word	0x10320000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10220000 	.word	0x10220000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	10120000 	.word	0x10120000
 80011f0:	10110000 	.word	0x10110000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000
 8001208:	40011400 	.word	0x40011400
 800120c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	43db      	mvns	r3, r3
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <HAL_GPIO_Init+0x304>)
 800121a:	4013      	ands	r3, r2
 800121c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f47f ae8e 	bne.w	8000f50 <HAL_GPIO_Init+0x14>
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	372c      	adds	r7, #44	; 0x2c
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e26c      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8087 	beq.w	8001372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001264:	4b92      	ldr	r3, [pc, #584]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b04      	cmp	r3, #4
 800126e:	d00c      	beq.n	800128a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001270:	4b8f      	ldr	r3, [pc, #572]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d112      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5e>
 800127c:	4b8c      	ldr	r3, [pc, #560]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d10b      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b89      	ldr	r3, [pc, #548]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d06c      	beq.n	8001370 <HAL_RCC_OscConfig+0x12c>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d168      	bne.n	8001370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e246      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x76>
 80012ac:	4b80      	ldr	r3, [pc, #512]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a7f      	ldr	r2, [pc, #508]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e02e      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b7b      	ldr	r3, [pc, #492]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7a      	ldr	r2, [pc, #488]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b78      	ldr	r3, [pc, #480]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a77      	ldr	r2, [pc, #476]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0xbc>
 80012e6:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a71      	ldr	r2, [pc, #452]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6e      	ldr	r2, [pc, #440]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 8001300:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a67      	ldr	r2, [pc, #412]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fcf4 	bl	8000d0c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fcf0 	bl	8000d0c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1fa      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xe4>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fce0 	bl	8000d0c <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fcdc 	bl	8000d0c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1e6      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x10c>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d063      	beq.n	8001446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800138a:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d11c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x18c>
 8001396:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1ba      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4939      	ldr	r1, [pc, #228]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	e03a      	b.n	8001446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fc95 	bl	8000d0c <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fc91 	bl	8000d0c <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e19b      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4927      	ldr	r1, [pc, #156]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
 8001418:	e015      	b.n	8001446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fc74 	bl	8000d0c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff fc70 	bl	8000d0c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e17a      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d03a      	beq.n	80014c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d019      	beq.n	800148e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_RCC_OscConfig+0x274>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fc54 	bl	8000d0c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fc50 	bl	8000d0c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e15a      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f000 fad8 	bl	8001a3c <RCC_Delay>
 800148c:	e01c      	b.n	80014c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001494:	f7ff fc3a 	bl	8000d0c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149a:	e00f      	b.n	80014bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fc36 	bl	8000d0c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d908      	bls.n	80014bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e140      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	42420000 	.word	0x42420000
 80014b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b9e      	ldr	r3, [pc, #632]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e9      	bne.n	800149c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a6 	beq.w	8001622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b97      	ldr	r3, [pc, #604]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b94      	ldr	r3, [pc, #592]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a93      	ldr	r2, [pc, #588]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b91      	ldr	r3, [pc, #580]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fe:	2301      	movs	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b8e      	ldr	r3, [pc, #568]	; (800173c <HAL_RCC_OscConfig+0x4f8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150e:	4b8b      	ldr	r3, [pc, #556]	; (800173c <HAL_RCC_OscConfig+0x4f8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a8a      	ldr	r2, [pc, #552]	; (800173c <HAL_RCC_OscConfig+0x4f8>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151a:	f7ff fbf7 	bl	8000d0c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001522:	f7ff fbf3 	bl	8000d0c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0fd      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	4b81      	ldr	r3, [pc, #516]	; (800173c <HAL_RCC_OscConfig+0x4f8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a7a      	ldr	r2, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	e02d      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x334>
 800155e:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a75      	ldr	r2, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	4b73      	ldr	r3, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a72      	ldr	r2, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	e01c      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d10c      	bne.n	800159a <HAL_RCC_OscConfig+0x356>
 8001580:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a6c      	ldr	r2, [pc, #432]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6213      	str	r3, [r2, #32]
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fba7 	bl	8000d0c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fba3 	bl	8000d0c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0ab      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ee      	beq.n	80015c2 <HAL_RCC_OscConfig+0x37e>
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fb91 	bl	8000d0c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fb8d 	bl	8000d0c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e095      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ee      	bne.n	80015ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a47      	ldr	r2, [pc, #284]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8081 	beq.w	800172e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800162c:	4b42      	ldr	r3, [pc, #264]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d061      	beq.n	80016fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d146      	bne.n	80016ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_OscConfig+0x4fc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb61 	bl	8000d0c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb5d 	bl	8000d0c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e067      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d108      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	492d      	ldr	r1, [pc, #180]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a19      	ldr	r1, [r3, #32]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	430b      	orrs	r3, r1
 800169a:	4927      	ldr	r1, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x4fc>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fb31 	bl	8000d0c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fb2d 	bl	8000d0c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e037      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x46a>
 80016cc:	e02f      	b.n	800172e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_RCC_OscConfig+0x4fc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb1a 	bl	8000d0c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb16 	bl	8000d0c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e020      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x498>
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e013      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	429a      	cmp	r2, r3
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	42420060 	.word	0x42420060

08001744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d0      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d910      	bls.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4965      	ldr	r1, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d040      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d115      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e073      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06b      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa6a 	bl	8000d0c <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa66 	bl	8000d0c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e053      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d210      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	4922      	ldr	r1, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1cc>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f9c8 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	08002ae8 	.word	0x08002ae8
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b490      	push	{r4, r7}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001920:	1d3c      	adds	r4, r7, #4
 8001922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001928:	f240 2301 	movw	r3, #513	; 0x201
 800192c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 8001952:	2b08      	cmp	r3, #8
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x46>
 8001956:	e02d      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800195a:	623b      	str	r3, [r7, #32]
      break;
 800195c:	e02d      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800196a:	4413      	add	r3, r2
 800196c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001970:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c5b      	lsrs	r3, r3, #17
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800198a:	4413      	add	r3, r2
 800198c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001990:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001996:	fb02 f203 	mul.w	r2, r2, r3
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
 80019a2:	e004      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	623b      	str	r3, [r7, #32]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b6:	623b      	str	r3, [r7, #32]
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc90      	pop	{r4, r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	08002ad8 	.word	0x08002ad8
 80019cc:	40021000 	.word	0x40021000
 80019d0:	007a1200 	.word	0x007a1200
 80019d4:	003d0900 	.word	0x003d0900

080019d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff2 	bl	80019d8 <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08002af8 	.word	0x08002af8

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffde 	bl	80019d8 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0adb      	lsrs	r3, r3, #11
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08002af8 	.word	0x08002af8

08001a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <RCC_Delay+0x34>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <RCC_Delay+0x38>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0a5b      	lsrs	r3, r3, #9
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a58:	bf00      	nop
  }
  while (Delay --);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	60fa      	str	r2, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f9      	bne.n	8001a58 <RCC_Delay+0x1c>
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000000 	.word	0x20000000
 8001a74:	10624dd3 	.word	0x10624dd3

08001a78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e041      	b.n	8001b0e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe ffae 	bl	8000a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f000 fb0e 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_IC_Start+0x1a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	e013      	b.n	8001b5a <HAL_TIM_IC_Start+0x42>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d104      	bne.n	8001b42 <HAL_TIM_IC_Start+0x2a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e00b      	b.n	8001b5a <HAL_TIM_IC_Start+0x42>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d104      	bne.n	8001b52 <HAL_TIM_IC_Start+0x3a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	e003      	b.n	8001b5a <HAL_TIM_IC_Start+0x42>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <HAL_TIM_IC_Start+0x54>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e013      	b.n	8001b94 <HAL_TIM_IC_Start+0x7c>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d104      	bne.n	8001b7c <HAL_TIM_IC_Start+0x64>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e00b      	b.n	8001b94 <HAL_TIM_IC_Start+0x7c>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d104      	bne.n	8001b8c <HAL_TIM_IC_Start+0x74>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	e003      	b.n	8001b94 <HAL_TIM_IC_Start+0x7c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b9c:	7bbb      	ldrb	r3, [r7, #14]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06d      	b.n	8001c82 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d104      	bne.n	8001bb6 <HAL_TIM_IC_Start+0x9e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb4:	e013      	b.n	8001bde <HAL_TIM_IC_Start+0xc6>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d104      	bne.n	8001bc6 <HAL_TIM_IC_Start+0xae>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc4:	e00b      	b.n	8001bde <HAL_TIM_IC_Start+0xc6>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d104      	bne.n	8001bd6 <HAL_TIM_IC_Start+0xbe>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd4:	e003      	b.n	8001bde <HAL_TIM_IC_Start+0xc6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <HAL_TIM_IC_Start+0xd6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	e013      	b.n	8001c16 <HAL_TIM_IC_Start+0xfe>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_IC_Start+0xe6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfc:	e00b      	b.n	8001c16 <HAL_TIM_IC_Start+0xfe>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d104      	bne.n	8001c0e <HAL_TIM_IC_Start+0xf6>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0c:	e003      	b.n	8001c16 <HAL_TIM_IC_Start+0xfe>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fcd3 	bl	80025ca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_TIM_IC_Start+0x174>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00e      	beq.n	8001c4c <HAL_TIM_IC_Start+0x134>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c36:	d009      	beq.n	8001c4c <HAL_TIM_IC_Start+0x134>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_TIM_IC_Start+0x178>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_TIM_IC_Start+0x134>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_TIM_IC_Start+0x17c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d010      	beq.n	8001c80 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6e:	e007      	b.n	8001c80 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40000800 	.word	0x40000800

08001c98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <HAL_TIM_IC_Start_IT+0x1a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	e013      	b.n	8001cda <HAL_TIM_IC_Start_IT+0x42>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d104      	bne.n	8001cc2 <HAL_TIM_IC_Start_IT+0x2a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	e00b      	b.n	8001cda <HAL_TIM_IC_Start_IT+0x42>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d104      	bne.n	8001cd2 <HAL_TIM_IC_Start_IT+0x3a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	e003      	b.n	8001cda <HAL_TIM_IC_Start_IT+0x42>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <HAL_TIM_IC_Start_IT+0x54>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e013      	b.n	8001d14 <HAL_TIM_IC_Start_IT+0x7c>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d104      	bne.n	8001cfc <HAL_TIM_IC_Start_IT+0x64>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	e00b      	b.n	8001d14 <HAL_TIM_IC_Start_IT+0x7c>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d104      	bne.n	8001d0c <HAL_TIM_IC_Start_IT+0x74>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e003      	b.n	8001d14 <HAL_TIM_IC_Start_IT+0x7c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d102      	bne.n	8001d22 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d1c:	7bbb      	ldrb	r3, [r7, #14]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0b3      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <HAL_TIM_IC_Start_IT+0x9e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d34:	e013      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0xc6>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d104      	bne.n	8001d46 <HAL_TIM_IC_Start_IT+0xae>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d44:	e00b      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0xc6>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_IC_Start_IT+0xbe>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	e003      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0xc6>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <HAL_TIM_IC_Start_IT+0xd6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6c:	e013      	b.n	8001d96 <HAL_TIM_IC_Start_IT+0xfe>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d104      	bne.n	8001d7e <HAL_TIM_IC_Start_IT+0xe6>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d7c:	e00b      	b.n	8001d96 <HAL_TIM_IC_Start_IT+0xfe>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d104      	bne.n	8001d8e <HAL_TIM_IC_Start_IT+0xf6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d8c:	e003      	b.n	8001d96 <HAL_TIM_IC_Start_IT+0xfe>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d841      	bhi.n	8001e20 <HAL_TIM_IC_Start_IT+0x188>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_TIM_IC_Start_IT+0x10c>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	08001e21 	.word	0x08001e21
 8001dac:	08001e21 	.word	0x08001e21
 8001db0:	08001e21 	.word	0x08001e21
 8001db4:	08001deb 	.word	0x08001deb
 8001db8:	08001e21 	.word	0x08001e21
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001e21 	.word	0x08001e21
 8001dc4:	08001dfd 	.word	0x08001dfd
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e0f 	.word	0x08001e0f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0202 	orr.w	r2, r2, #2
 8001de6:	60da      	str	r2, [r3, #12]
      break;
 8001de8:	e01b      	b.n	8001e22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0204 	orr.w	r2, r2, #4
 8001df8:	60da      	str	r2, [r3, #12]
      break;
 8001dfa:	e012      	b.n	8001e22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	60da      	str	r2, [r3, #12]
      break;
 8001e0c:	e009      	b.n	8001e22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0210 	orr.w	r2, r2, #16
 8001e1c:	60da      	str	r2, [r3, #12]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001e20:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fbcd 	bl	80025ca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_TIM_IC_Start_IT+0x200>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_TIM_IC_Start_IT+0x1c0>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e42:	d009      	beq.n	8001e58 <HAL_TIM_IC_Start_IT+0x1c0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_TIM_IC_Start_IT+0x204>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_TIM_IC_Start_IT+0x1c0>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_TIM_IC_Start_IT+0x208>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d010      	beq.n	8001e8c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e007      	b.n	8001e8c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800

08001ea4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_TIM_IC_ConfigChannel+0x1a>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e082      	b.n	8001fc4 <HAL_TIM_IC_ConfigChannel+0x120>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f000 f9ec 	bl	80022b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020c 	bic.w	r2, r2, #12
 8001eee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6999      	ldr	r1, [r3, #24]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	e05a      	b.n	8001fba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d11c      	bne.n	8001f44 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f000 fa55 	bl	80023c8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6999      	ldr	r1, [r3, #24]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	021a      	lsls	r2, r3, #8
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	e03a      	b.n	8001fba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11b      	bne.n	8001f82 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f000 faa0 	bl	800249e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020c 	bic.w	r2, r2, #12
 8001f6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69d9      	ldr	r1, [r3, #28]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	61da      	str	r2, [r3, #28]
 8001f80:	e01b      	b.n	8001fba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f000 fabf 	bl	8002514 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69d9      	ldr	r1, [r3, #28]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e031      	b.n	8002048 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8d0 	bl	800219c <TIM_SlaveTimer_SetConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e018      	b.n	8002048 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002024:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002034:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d831      	bhi.n	80020c8 <HAL_TIM_ReadCapturedValue+0x78>
 8002064:	a201      	add	r2, pc, #4	; (adr r2, 800206c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	080020a1 	.word	0x080020a1
 8002070:	080020c9 	.word	0x080020c9
 8002074:	080020c9 	.word	0x080020c9
 8002078:	080020c9 	.word	0x080020c9
 800207c:	080020ab 	.word	0x080020ab
 8002080:	080020c9 	.word	0x080020c9
 8002084:	080020c9 	.word	0x080020c9
 8002088:	080020c9 	.word	0x080020c9
 800208c:	080020b5 	.word	0x080020b5
 8002090:	080020c9 	.word	0x080020c9
 8002094:	080020c9 	.word	0x080020c9
 8002098:	080020c9 	.word	0x080020c9
 800209c:	080020bf 	.word	0x080020bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	60fb      	str	r3, [r7, #12]

      break;
 80020a8:	e00f      	b.n	80020ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	60fb      	str	r3, [r7, #12]

      break;
 80020b2:	e00a      	b.n	80020ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	60fb      	str	r3, [r7, #12]

      break;
 80020bc:	e005      	b.n	80020ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	60fb      	str	r3, [r7, #12]

      break;
 80020c6:	e000      	b.n	80020ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80020c8:	bf00      	nop
  }

  return tmpreg;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a29      	ldr	r2, [pc, #164]	; (8002190 <TIM_Base_SetConfig+0xb8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00b      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d007      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a26      	ldr	r2, [pc, #152]	; (8002194 <TIM_Base_SetConfig+0xbc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a25      	ldr	r2, [pc, #148]	; (8002198 <TIM_Base_SetConfig+0xc0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <TIM_Base_SetConfig+0xb8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <TIM_Base_SetConfig+0xbc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <TIM_Base_SetConfig+0xc0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <TIM_Base_SetConfig+0xb8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800

0800219c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f023 0307 	bic.w	r3, r3, #7
 80021c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b70      	cmp	r3, #112	; 0x70
 80021e0:	d01a      	beq.n	8002218 <TIM_SlaveTimer_SetConfig+0x7c>
 80021e2:	2b70      	cmp	r3, #112	; 0x70
 80021e4:	d860      	bhi.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80021e6:	2b60      	cmp	r3, #96	; 0x60
 80021e8:	d054      	beq.n	8002294 <TIM_SlaveTimer_SetConfig+0xf8>
 80021ea:	2b60      	cmp	r3, #96	; 0x60
 80021ec:	d85c      	bhi.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80021ee:	2b50      	cmp	r3, #80	; 0x50
 80021f0:	d046      	beq.n	8002280 <TIM_SlaveTimer_SetConfig+0xe4>
 80021f2:	2b50      	cmp	r3, #80	; 0x50
 80021f4:	d858      	bhi.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d019      	beq.n	800222e <TIM_SlaveTimer_SetConfig+0x92>
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d854      	bhi.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80021fe:	2b30      	cmp	r3, #48	; 0x30
 8002200:	d054      	beq.n	80022ac <TIM_SlaveTimer_SetConfig+0x110>
 8002202:	2b30      	cmp	r3, #48	; 0x30
 8002204:	d850      	bhi.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002206:	2b20      	cmp	r3, #32
 8002208:	d050      	beq.n	80022ac <TIM_SlaveTimer_SetConfig+0x110>
 800220a:	2b20      	cmp	r3, #32
 800220c:	d84c      	bhi.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04c      	beq.n	80022ac <TIM_SlaveTimer_SetConfig+0x110>
 8002212:	2b10      	cmp	r3, #16
 8002214:	d04a      	beq.n	80022ac <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002216:	e047      	b.n	80022a8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68d9      	ldr	r1, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f000 f9b0 	bl	800258c <TIM_ETR_SetConfig>
      break;
 800222c:	e03f      	b.n	80022ae <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d101      	bne.n	800223a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e03a      	b.n	80022b0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002260:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	621a      	str	r2, [r3, #32]
      break;
 800227e:	e016      	b.n	80022ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	461a      	mov	r2, r3
 800228e:	f000 f86d 	bl	800236c <TIM_TI1_ConfigInputStage>
      break;
 8002292:	e00c      	b.n	80022ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f000 f8cd 	bl	8002440 <TIM_TI2_ConfigInputStage>
      break;
 80022a6:	e002      	b.n	80022ae <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80022a8:	bf00      	nop
 80022aa:	e000      	b.n	80022ae <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80022ac:	bf00      	nop
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f023 0201 	bic.w	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <TIM_TI1_SetConfig+0xa8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00b      	beq.n	80022fe <TIM_TI1_SetConfig+0x46>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d007      	beq.n	80022fe <TIM_TI1_SetConfig+0x46>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <TIM_TI1_SetConfig+0xac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d003      	beq.n	80022fe <TIM_TI1_SetConfig+0x46>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <TIM_TI1_SetConfig+0xb0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <TIM_TI1_SetConfig+0x4a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <TIM_TI1_SetConfig+0x4c>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e003      	b.n	8002322 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	b2db      	uxtb	r3, r3
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f023 030a 	bic.w	r3, r3, #10
 800233c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 030a 	and.w	r3, r3, #10
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	621a      	str	r2, [r3, #32]
}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800

0800236c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f023 0201 	bic.w	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f023 030a 	bic.w	r3, r3, #10
 80023a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	621a      	str	r2, [r3, #32]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f023 0210 	bic.w	r2, r3, #16
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002406:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	031b      	lsls	r3, r3, #12
 800240c:	b29b      	uxth	r3, r3
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800241a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	621a      	str	r2, [r3, #32]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f023 0210 	bic.w	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	031b      	lsls	r3, r3, #12
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800247c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	621a      	str	r2, [r3, #32]
}
 8002494:	bf00      	nop
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800249e:	b480      	push	{r7}
 80024a0:	b087      	sub	sp, #28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002552:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	031b      	lsls	r3, r3, #12
 8002558:	b29b      	uxth	r3, r3
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002566:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	031b      	lsls	r3, r3, #12
 800256c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	021a      	lsls	r2, r3, #8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2201      	movs	r2, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	431a      	orrs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
	...

08002614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002628:	2302      	movs	r3, #2
 800262a:	e046      	b.n	80026ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00e      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d009      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10c      	bne.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800

080026d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e03f      	b.n	8002762 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fa10 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f829 	bl	800276c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027a6:	f023 030c 	bic.w	r3, r3, #12
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <UART_SetConfig+0x114>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027d4:	f7ff f91e 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	e002      	b.n	80027e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027dc:	f7ff f906 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 80027e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009a      	lsls	r2, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <UART_SetConfig+0x118>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	0119      	lsls	r1, r3, #4
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fbb2 f2f3 	udiv	r2, r2, r3
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <UART_SetConfig+0x118>)
 800281a:	fba3 0302 	umull	r0, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	fb00 f303 	mul.w	r3, r0, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	3332      	adds	r3, #50	; 0x32
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <UART_SetConfig+0x118>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002838:	4419      	add	r1, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <UART_SetConfig+0x118>)
 8002852:	fba3 0302 	umull	r0, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2064      	movs	r0, #100	; 0x64
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	3332      	adds	r3, #50	; 0x32
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <UART_SetConfig+0x118>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	440a      	add	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40013800 	.word	0x40013800
 8002884:	51eb851f 	.word	0x51eb851f

08002888 <TIM3_IRQHandler>:
float TIM4_Width = 0;
float TIM4_Period_Current = 0;


void TIM3_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC2) != RESET)   // Capture Compare Event 1
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <TIM3_IRQHandler+0xcc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d15a      	bne.n	8002950 <TIM3_IRQHandler+0xc8>
	  {
	    if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC2) != RESET)   // Cross check that whether source of Interrupt is configured
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <TIM3_IRQHandler+0xcc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d153      	bne.n	8002950 <TIM3_IRQHandler+0xc8>
		// if(TIM3->DIER & TIM_DIER_CC1IE)
	    {
	        __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC2);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <TIM3_IRQHandler+0xcc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
	        htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <TIM3_IRQHandler+0xcc>)
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]

	        /* Input capture event */
	        if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <TIM3_IRQHandler+0xcc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d044      	beq.n	8002950 <TIM3_IRQHandler+0xc8>
	        {
	        	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 2( for timer 3: pin PB5)
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <TIM3_IRQHandler+0xcc>)
 80028c8:	7f1b      	ldrb	r3, [r3, #28]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d140      	bne.n	8002950 <TIM3_IRQHandler+0xc8>
	        						{
	        							// Read the IC value
	        							TIM3_IC2Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80028ce:	2104      	movs	r1, #4
 80028d0:	4820      	ldr	r0, [pc, #128]	; (8002954 <TIM3_IRQHandler+0xcc>)
 80028d2:	f7ff fbbd 	bl	8002050 <HAL_TIM_ReadCapturedValue>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <TIM3_IRQHandler+0xd0>)
 80028da:	6013      	str	r3, [r2, #0]

	        							if (TIM3_IC2Value != 0)
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <TIM3_IRQHandler+0xd0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d035      	beq.n	8002950 <TIM3_IRQHandler+0xc8>
	        							{
	        								TIM3_IC1Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80028e4:	2100      	movs	r1, #0
 80028e6:	481b      	ldr	r0, [pc, #108]	; (8002954 <TIM3_IRQHandler+0xcc>)
 80028e8:	f7ff fbb2 	bl	8002050 <HAL_TIM_ReadCapturedValue>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <TIM3_IRQHandler+0xd4>)
 80028f0:	6013      	str	r3, [r2, #0]
	        								// calculate the Duty Cycle
	        								TIM3_Duty = (TIM3_IC1Value *100)/TIM3_IC2Value;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <TIM3_IRQHandler+0xd4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2264      	movs	r2, #100	; 0x64
 80028f8:	fb02 f203 	mul.w	r2, r2, r3
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <TIM3_IRQHandler+0xd0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fcd7 	bl	80002b8 <__aeabi_ui2f>
 800290a:	4603      	mov	r3, r0
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <TIM3_IRQHandler+0xd8>)
 800290e:	6013      	str	r3, [r2, #0]
	        								TIM3_Frequency = 100000/TIM3_IC2Value;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <TIM3_IRQHandler+0xd0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <TIM3_IRQHandler+0xdc>)
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fccc 	bl	80002b8 <__aeabi_ui2f>
 8002920:	4603      	mov	r3, r0
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <TIM3_IRQHandler+0xe0>)
 8002924:	6013      	str	r3, [r2, #0]
	        								TIM3_Period = 1000000/TIM3_Frequency;//(Perid is in microseconds)
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <TIM3_IRQHandler+0xe0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	480f      	ldr	r0, [pc, #60]	; (800296c <TIM3_IRQHandler+0xe4>)
 800292e:	f7fd fdcf 	bl	80004d0 <__aeabi_fdiv>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <TIM3_IRQHandler+0xe8>)
 8002938:	601a      	str	r2, [r3, #0]
	        								TIM3_Width = TIM3_Period/2;  //(in microseconds)
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <TIM3_IRQHandler+0xe8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fdc4 	bl	80004d0 <__aeabi_fdiv>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <TIM3_IRQHandler+0xec>)
 800294e:	601a      	str	r2, [r3, #0]
	        }
	    }
	  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200000a0 	.word	0x200000a0
 8002958:	2000002c 	.word	0x2000002c
 800295c:	20000028 	.word	0x20000028
 8002960:	20000034 	.word	0x20000034
 8002964:	000186a0 	.word	0x000186a0
 8002968:	20000030 	.word	0x20000030
 800296c:	49742400 	.word	0x49742400
 8002970:	20000038 	.word	0x20000038
 8002974:	2000003c 	.word	0x2000003c

08002978 <TIM4_IRQHandler>:
}
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_CC1) != RESET)   // Capture Compare Event 1
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d15a      	bne.n	8002a40 <TIM4_IRQHandler+0xc8>
			  {
			    if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_CC1) != RESET)   // Cross check that whether source of Interrupt is configured
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d153      	bne.n	8002a40 <TIM4_IRQHandler+0xc8>
				// if(TIM3->DIER & TIM_DIER_CC1IE)
			    {
			        __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0202 	mvn.w	r2, #2
 80029a0:	611a      	str	r2, [r3, #16]
			        htim4.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	771a      	strb	r2, [r3, #28]

			        /* Input capture event */
			        if ((htim4.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <TIM4_IRQHandler+0xc8>
			        {
			        	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1( for timer 4: pin PB6)
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 80029b8:	7f1b      	ldrb	r3, [r3, #28]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d140      	bne.n	8002a40 <TIM4_IRQHandler+0xc8>
							{
								// Read the IC value
								TIM4_IC1Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80029be:	2100      	movs	r1, #0
 80029c0:	4820      	ldr	r0, [pc, #128]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 80029c2:	f7ff fb45 	bl	8002050 <HAL_TIM_ReadCapturedValue>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <TIM4_IRQHandler+0xd0>)
 80029ca:	6013      	str	r3, [r2, #0]

								if (TIM4_IC1Value != 0)
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <TIM4_IRQHandler+0xd0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <TIM4_IRQHandler+0xc8>
								{
									TIM4_IC2Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80029d4:	2104      	movs	r1, #4
 80029d6:	481b      	ldr	r0, [pc, #108]	; (8002a44 <TIM4_IRQHandler+0xcc>)
 80029d8:	f7ff fb3a 	bl	8002050 <HAL_TIM_ReadCapturedValue>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <TIM4_IRQHandler+0xd4>)
 80029e0:	6013      	str	r3, [r2, #0]
									// calculate the Duty Cycle
									TIM4_Duty = (TIM4_IC2Value *100)/TIM4_IC1Value;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <TIM4_IRQHandler+0xd4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2264      	movs	r2, #100	; 0x64
 80029e8:	fb02 f203 	mul.w	r2, r2, r3
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <TIM4_IRQHandler+0xd0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fc5f 	bl	80002b8 <__aeabi_ui2f>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <TIM4_IRQHandler+0xd8>)
 80029fe:	6013      	str	r3, [r2, #0]
									TIM4_Frequency = 100000/TIM4_IC1Value;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <TIM4_IRQHandler+0xd0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <TIM4_IRQHandler+0xdc>)
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fc54 	bl	80002b8 <__aeabi_ui2f>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <TIM4_IRQHandler+0xe0>)
 8002a14:	6013      	str	r3, [r2, #0]
									TIM4_Period = 1000000/TIM4_Frequency;//(Perid is in microseconds)
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <TIM4_IRQHandler+0xe0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480f      	ldr	r0, [pc, #60]	; (8002a5c <TIM4_IRQHandler+0xe4>)
 8002a1e:	f7fd fd57 	bl	80004d0 <__aeabi_fdiv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <TIM4_IRQHandler+0xe8>)
 8002a28:	601a      	str	r2, [r3, #0]
									TIM4_Width = TIM4_Period/2;  //(in microseconds)
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <TIM4_IRQHandler+0xe8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd4c 	bl	80004d0 <__aeabi_fdiv>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <TIM4_IRQHandler+0xec>)
 8002a3e:	601a      	str	r2, [r3, #0]
							}
			        }
			    }
			  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000058 	.word	0x20000058
 8002a48:	20000040 	.word	0x20000040
 8002a4c:	20000044 	.word	0x20000044
 8002a50:	2000004c 	.word	0x2000004c
 8002a54:	000186a0 	.word	0x000186a0
 8002a58:	20000048 	.word	0x20000048
 8002a5c:	49742400 	.word	0x49742400
 8002a60:	20000050 	.word	0x20000050
 8002a64:	20000054 	.word	0x20000054

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	4d0c      	ldr	r5, [pc, #48]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6e:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	42a6      	cmp	r6, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	f000 f822 	bl	8002ac0 <_init>
 8002a7c:	2600      	movs	r6, #0
 8002a7e:	4d0a      	ldr	r5, [pc, #40]	; (8002aa8 <__libc_init_array+0x40>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <__libc_init_array+0x44>)
 8002a82:	1b64      	subs	r4, r4, r5
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	42a6      	cmp	r6, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a90:	4798      	blx	r3
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9a:	4798      	blx	r3
 8002a9c:	3601      	adds	r6, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002b00 	.word	0x08002b00
 8002aa4:	08002b00 	.word	0x08002b00
 8002aa8:	08002b00 	.word	0x08002b00
 8002aac:	08002b04 	.word	0x08002b04

08002ab0 <memset>:
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
