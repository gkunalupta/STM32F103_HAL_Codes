
GB_STM32_HLW8012_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08009838  08009838  00019838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc4  08009fc4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009fc4  08009fc4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fc4  08009fc4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009fcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  200001f8  0800a1c0  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800a1c0  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d24  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c2  00000000  00000000  00031f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00034608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001987c  00000000  00000000  000366e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b2e  00000000  00000000  0004ff64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f49b  00000000  00000000  00061a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d78  00000000  00000000  000f0f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009820 	.word	0x08009820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08009820 	.word	0x08009820

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	460c      	mov	r4, r1
 8001154:	4605      	mov	r5, r0
 8001156:	4621      	mov	r1, r4
 8001158:	4628      	mov	r0, r5
 800115a:	2200      	movs	r2, #0
 800115c:	2300      	movs	r3, #0
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <size_of_command>:


/* USER CODE BEGIN PV */

uint16_t size_of_command( const char* gb_string)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	uint16_t counter=0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	81fb      	strh	r3, [r7, #14]
	while(*gb_string)
 80011cc:	e005      	b.n	80011da <size_of_command+0x1a>
	{
		counter = counter+1;
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	3301      	adds	r3, #1
 80011d2:	81fb      	strh	r3, [r7, #14]
		*gb_string++;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
	while(*gb_string)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f5      	bne.n	80011ce <size_of_command+0xe>
	}
	return counter;
 80011e2:	89fb      	ldrh	r3, [r7, #14]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <GB_printString1>:
void GB_printString1(const char *gb_myString)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)gb_myString,size_of_command(gb_myString), 100);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ffe1 	bl	80011c0 <size_of_command>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <GB_printString1+0x24>)
 8001208:	f002 ff09 	bl	800401e <HAL_UART_Transmit>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000778 	.word	0x20000778

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 fd15 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f8c3 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 fa61 	bl	80016ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800122a:	f000 fa35 	bl	8001698 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800122e:	f000 f92f 	bl	8001490 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001232:	f000 f9af 	bl	8001594 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001236:	f000 f8fd 	bl	8001434 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_init();
 800123a:	f003 fbab 	bl	8004994 <ssd1306_init>
  		ssd1306_clear(GB_SSD1306_COLOR_BLACK);
 800123e:	2000      	movs	r0, #0
 8001240:	f003 fc70 	bl	8004b24 <ssd1306_clear>
  		ssd1306_update_data();
 8001244:	f003 fc1a 	bl	8004a7c <ssd1306_update_data>


 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);   // main channel
 8001248:	2104      	movs	r1, #4
 800124a:	4849      	ldr	r0, [pc, #292]	; (8001370 <main+0x158>)
 800124c:	f002 f97e 	bl	800354c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);   // indirect channel
 8001250:	2100      	movs	r1, #0
 8001252:	4847      	ldr	r0, [pc, #284]	; (8001370 <main+0x158>)
 8001254:	f002 f8ba 	bl	80033cc <HAL_TIM_IC_Start>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 8001258:	2100      	movs	r1, #0
 800125a:	4846      	ldr	r0, [pc, #280]	; (8001374 <main+0x15c>)
 800125c:	f002 f976 	bl	800354c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);   // indirect channel
 8001260:	2104      	movs	r1, #4
 8001262:	4844      	ldr	r0, [pc, #272]	; (8001374 <main+0x15c>)
 8001264:	f002 f8b2 	bl	80033cc <HAL_TIM_IC_Start>

 hlw8012_setResistors(CURRENT_RESISTOR, VOLTAGE_RESISTOR_UPSTREAM, VOLTAGE_RESISTOR_DOWNSTREAM);
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b42      	ldr	r3, [pc, #264]	; (8001378 <main+0x160>)
 800126e:	e9cd 2300 	strd	r2, r3, [sp]
 8001272:	a33b      	add	r3, pc, #236	; (adr r3, 8001360 <main+0x148>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	a13b      	add	r1, pc, #236	; (adr r1, 8001368 <main+0x150>)
 800127a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800127e:	f003 faed 	bl	800485c <hlw8012_setResistors>

  		GB_printString1(" Default Current Multiplier");
 8001282:	483e      	ldr	r0, [pc, #248]	; (800137c <main+0x164>)
 8001284:	f7ff ffb4 	bl	80011f0 <GB_printString1>
  		//GB_decimel1(hlw8012_getcurrent_multiplier());
	def_current_multi =hlw8012_getcurrent_multiplier();
 8001288:	f003 f834 	bl	80042f4 <hlw8012_getcurrent_multiplier>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc18 	bl	8000ac8 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a39      	ldr	r2, [pc, #228]	; (8001380 <main+0x168>)
 800129c:	6013      	str	r3, [r2, #0]

  		GB_printString1(" Default Voltage Multiplier");
 800129e:	4839      	ldr	r0, [pc, #228]	; (8001384 <main+0x16c>)
 80012a0:	f7ff ffa6 	bl	80011f0 <GB_printString1>
  		//GB_decimel1(hlw8012_getvoltage_multiplier());
	def_voltage_multi =hlw8012_getvoltage_multiplier();
 80012a4:	f003 f832 	bl	800430c <hlw8012_getvoltage_multiplier>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc0a 	bl	8000ac8 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <main+0x170>)
 80012b8:	6013      	str	r3, [r2, #0]

  		GB_printString1(" Default Power Multiplier");
 80012ba:	4834      	ldr	r0, [pc, #208]	; (800138c <main+0x174>)
 80012bc:	f7ff ff98 	bl	80011f0 <GB_printString1>
  		//GB_decimel1(hlw8012_getpower_multiplier());
	def_power_multi = hlw8012_getpower_multiplier();
 80012c0:	f003 f830 	bl	8004324 <hlw8012_getpower_multiplier>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fbfc 	bl	8000ac8 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <main+0x178>)
 80012d4:	6013      	str	r3, [r2, #0]



   hlw8012_calibrate();
 80012d6:	f003 faf7 	bl	80048c8 <hlw8012_calibrate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ssd1306_GotoXY(0, 0);
 80012da:	2100      	movs	r1, #0
 80012dc:	2000      	movs	r0, #0
 80012de:	f003 fc0b 	bl	8004af8 <ssd1306_GotoXY>
	  		    ssd1306_print_string("Current:", GB_SSD1306_COLOR_WHITE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	482b      	ldr	r0, [pc, #172]	; (8001394 <main+0x17c>)
 80012e6:	f003 fc85 	bl	8004bf4 <ssd1306_print_string>
	  		    ssd1306_float(hlw8012_getcurrent(),GB_SSD1306_COLOR_WHITE);
 80012ea:	f003 f843 	bl	8004374 <hlw8012_getcurrent>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fc98 	bl	8004c28 <ssd1306_float>
	  		    ssd1306_print_string(" A", GB_SSD1306_COLOR_WHITE);
 80012f8:	2101      	movs	r1, #1
 80012fa:	4827      	ldr	r0, [pc, #156]	; (8001398 <main+0x180>)
 80012fc:	f003 fc7a 	bl	8004bf4 <ssd1306_print_string>
	  		    ssd1306_update_data();
 8001300:	f003 fbbc 	bl	8004a7c <ssd1306_update_data>

	  			ssd1306_GotoXY(0, 15);
 8001304:	210f      	movs	r1, #15
 8001306:	2000      	movs	r0, #0
 8001308:	f003 fbf6 	bl	8004af8 <ssd1306_GotoXY>
	  		    ssd1306_print_string("Voltage:", GB_SSD1306_COLOR_WHITE);
 800130c:	2101      	movs	r1, #1
 800130e:	4823      	ldr	r0, [pc, #140]	; (800139c <main+0x184>)
 8001310:	f003 fc70 	bl	8004bf4 <ssd1306_print_string>
	  		    ssd1306_float(hlw8012_getvoltage(),GB_SSD1306_COLOR_WHITE);
 8001314:	f003 f892 	bl	800443c <hlw8012_getvoltage>
 8001318:	4603      	mov	r3, r0
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fc83 	bl	8004c28 <ssd1306_float>
	  		    ssd1306_print_string(" V", GB_SSD1306_COLOR_WHITE);
 8001322:	2101      	movs	r1, #1
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <main+0x188>)
 8001326:	f003 fc65 	bl	8004bf4 <ssd1306_print_string>
	  			ssd1306_update_data();
 800132a:	f003 fba7 	bl	8004a7c <ssd1306_update_data>

	  			ssd1306_GotoXY(0, 24);
 800132e:	2118      	movs	r1, #24
 8001330:	2000      	movs	r0, #0
 8001332:	f003 fbe1 	bl	8004af8 <ssd1306_GotoXY>
	  			ssd1306_print_string("Power:", GB_SSD1306_COLOR_WHITE);
 8001336:	2101      	movs	r1, #1
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <main+0x18c>)
 800133a:	f003 fc5b 	bl	8004bf4 <ssd1306_print_string>
	  			ssd1306_float(hlw8012_getactivepower(),GB_SSD1306_COLOR_WHITE);
 800133e:	f003 f8e1 	bl	8004504 <hlw8012_getactivepower>
 8001342:	4603      	mov	r3, r0
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fc6e 	bl	8004c28 <ssd1306_float>
	  			ssd1306_print_string(" W", GB_SSD1306_COLOR_WHITE);
 800134c:	2101      	movs	r1, #1
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <main+0x190>)
 8001350:	f003 fc50 	bl	8004bf4 <ssd1306_print_string>
	  			ssd1306_update_data();
 8001354:	f003 fb92 	bl	8004a7c <ssd1306_update_data>
	  ssd1306_GotoXY(0, 0);
 8001358:	e7bf      	b.n	80012da <main+0xc2>
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	00000000 	.word	0x00000000
 8001364:	4141edd8 	.word	0x4141edd8
 8001368:	d2f1a9fc 	.word	0xd2f1a9fc
 800136c:	3f50624d 	.word	0x3f50624d
 8001370:	20000730 	.word	0x20000730
 8001374:	20000694 	.word	0x20000694
 8001378:	408f4000 	.word	0x408f4000
 800137c:	08009838 	.word	0x08009838
 8001380:	20000214 	.word	0x20000214
 8001384:	08009854 	.word	0x08009854
 8001388:	20000218 	.word	0x20000218
 800138c:	08009870 	.word	0x08009870
 8001390:	2000021c 	.word	0x2000021c
 8001394:	0800988c 	.word	0x0800988c
 8001398:	08009898 	.word	0x08009898
 800139c:	0800989c 	.word	0x0800989c
 80013a0:	080098a8 	.word	0x080098a8
 80013a4:	080098ac 	.word	0x080098ac
 80013a8:	080098b4 	.word	0x080098b4

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	; 0x40
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	2228      	movs	r2, #40	; 0x28
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fe2e 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80013ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fb7f 	bl	8002af8 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001400:	f000 f9be 	bl	8001780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2101      	movs	r1, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fdeb 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001428:	f000 f9aa 	bl	8001780 <Error_Handler>
  }
}
 800142c:	bf00      	nop
 800142e:	3740      	adds	r7, #64	; 0x40
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C2_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_I2C2_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C2_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_I2C2_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C2_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_I2C2_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_I2C2_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_I2C2_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_I2C2_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_I2C2_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_I2C2_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C2_Init+0x50>)
 8001472:	f000 fef7 	bl	8002264 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 f980 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200006dc 	.word	0x200006dc
 8001488:	40005800 	.word	0x40005800
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <MX_TIM3_Init+0xfc>)
 80014be:	4a34      	ldr	r2, [pc, #208]	; (8001590 <MX_TIM3_Init+0x100>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320;
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <MX_TIM3_Init+0xfc>)
 80014c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <MX_TIM3_Init+0xfc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <MX_TIM3_Init+0xfc>)
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_TIM3_Init+0xfc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_TIM3_Init+0xfc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014e4:	4829      	ldr	r0, [pc, #164]	; (800158c <MX_TIM3_Init+0xfc>)
 80014e6:	f001 ff21 	bl	800332c <HAL_TIM_IC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80014f0:	f000 f946 	bl	8001780 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80014f4:	2304      	movs	r3, #4
 80014f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80014f8:	2360      	movs	r3, #96	; 0x60
 80014fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014fc:	2302      	movs	r3, #2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <MX_TIM3_Init+0xfc>)
 8001510:	f002 f9b6 	bl	8003880 <HAL_TIM_SlaveConfigSynchro>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800151a:	f000 f931 	bl	8001780 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001522:	2302      	movs	r3, #2
 8001524:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_TIM3_Init+0xfc>)
 8001538:	f002 f90e 	bl	8003758 <HAL_TIM_IC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001542:	f000 f91d 	bl	8001780 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001546:	2302      	movs	r3, #2
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800154a:	2301      	movs	r3, #1
 800154c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2204      	movs	r2, #4
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_TIM3_Init+0xfc>)
 8001558:	f002 f8fe 	bl	8003758 <HAL_TIM_IC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001562:	f000 f90d 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_TIM3_Init+0xfc>)
 8001574:	f002 fca8 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800157e:	f000 f8ff 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3730      	adds	r7, #48	; 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000730 	.word	0x20000730
 8001590:	40000400 	.word	0x40000400

08001594 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015c2:	4a34      	ldr	r2, [pc, #208]	; (8001694 <MX_TIM4_Init+0x100>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015e8:	4829      	ldr	r0, [pc, #164]	; (8001690 <MX_TIM4_Init+0xfc>)
 80015ea:	f001 fe9f 	bl	800332c <HAL_TIM_IC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80015f4:	f000 f8c4 	bl	8001780 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80015f8:	2304      	movs	r3, #4
 80015fa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80015fc:	2350      	movs	r3, #80	; 0x50
 80015fe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <MX_TIM4_Init+0xfc>)
 8001614:	f002 f934 	bl	8003880 <HAL_TIM_SlaveConfigSynchro>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800161e:	f000 f8af 	bl	8001780 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	4815      	ldr	r0, [pc, #84]	; (8001690 <MX_TIM4_Init+0xfc>)
 800163c:	f002 f88c 	bl	8003758 <HAL_TIM_IC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001646:	f000 f89b 	bl	8001780 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800164a:	2302      	movs	r3, #2
 800164c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800164e:	2302      	movs	r3, #2
 8001650:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2204      	movs	r2, #4
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM4_Init+0xfc>)
 800165c:	f002 f87c 	bl	8003758 <HAL_TIM_IC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001666:	f000 f88b 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM4_Init+0xfc>)
 8001678:	f002 fc26 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001682:	f000 f87d 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000694 	.word	0x20000694
 8001694:	40000800 	.word	0x40000800

08001698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_USART1_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART1_UART_Init+0x4c>)
 80016d0:	f002 fc58 	bl	8003f84 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016da:	f000 f851 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000778 	.word	0x20000778
 80016e8:	40013800 	.word	0x40013800

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_GPIO_Init+0x8c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <MX_GPIO_Init+0x8c>)
 8001706:	f043 0320 	orr.w	r3, r3, #32
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_GPIO_Init+0x8c>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_GPIO_Init+0x8c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <MX_GPIO_Init+0x8c>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_GPIO_Init+0x8c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_GPIO_Init+0x8c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a10      	ldr	r2, [pc, #64]	; (8001778 <MX_GPIO_Init+0x8c>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_GPIO_Init+0x8c>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <MX_GPIO_Init+0x90>)
 800174e:	f000 fd71 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_GPIO_Init+0x90>)
 800176a:	f000 fbdf 	bl	8001f2c <HAL_GPIO_Init>

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40010c00 	.word	0x40010c00

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_MspInit+0x5c>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_MspInit+0x5c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_MspInit+0x5c>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_MspInit+0x5c>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_MspInit+0x5c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_MspInit+0x5c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_MspInit+0x60>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_MspInit+0x60>)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000

080017f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_I2C_MspInit+0x74>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d124      	bne.n	800185a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_I2C_MspInit+0x78>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_I2C_MspInit+0x78>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_I2C_MspInit+0x78>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001828:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800182c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182e:	2312      	movs	r3, #18
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <HAL_I2C_MspInit+0x7c>)
 800183e:	f000 fb75 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_I2C_MspInit+0x78>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_I2C_MspInit+0x78>)
 8001848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_I2C_MspInit+0x78>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40005800 	.word	0x40005800
 8001868:	40021000 	.word	0x40021000
 800186c:	40010c00 	.word	0x40010c00

08001870 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <HAL_TIM_IC_MspInit+0x108>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d13e      	bne.n	800190e <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	4a39      	ldr	r2, [pc, #228]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	61d3      	str	r3, [r2, #28]
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018c0:	2320      	movs	r3, #32
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	482b      	ldr	r0, [pc, #172]	; (8001980 <HAL_TIM_IC_MspInit+0x110>)
 80018d4:	f000 fb2a 	bl	8001f2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_TIM_IC_MspInit+0x114>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f6:	4a23      	ldr	r2, [pc, #140]	; (8001984 <HAL_TIM_IC_MspInit+0x114>)
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	201d      	movs	r0, #29
 8001902:	f000 fadc 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001906:	201d      	movs	r0, #29
 8001908:	f000 faf5 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800190c:	e030      	b.n	8001970 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_TIM_IC_MspInit+0x118>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d12b      	bne.n	8001970 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	61d3      	str	r3, [r2, #28]
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_TIM_IC_MspInit+0x10c>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_TIM_IC_MspInit+0x110>)
 800195c:	f000 fae6 	bl	8001f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	201e      	movs	r0, #30
 8001966:	f000 faaa 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800196a:	201e      	movs	r0, #30
 800196c:	f000 fac3 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 8001970:	bf00      	nop
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40000400 	.word	0x40000400
 800197c:	40021000 	.word	0x40021000
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40010000 	.word	0x40010000
 8001988:	40000800 	.word	0x40000800

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d131      	bne.n	8001a10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <HAL_UART_MspInit+0x94>)
 80019f2:	f000 fa9b 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_UART_MspInit+0x94>)
 8001a0c:	f000 fa8e 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010800 	.word	0x40010800

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f935 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
	return 1;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <_kill>:

int _kill(int pid, int sig)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a8a:	f003 fa8f 	bl	8004fac <__errno>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2216      	movs	r2, #22
 8001a92:	601a      	str	r2, [r3, #0]
	return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_exit>:

void _exit (int status)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ffe7 	bl	8001a80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ab2:	e7fe      	b.n	8001ab2 <_exit+0x12>

08001ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00a      	b.n	8001adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ac6:	f3af 8000 	nop.w
 8001aca:	4601      	mov	r1, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf0      	blt.n	8001ac6 <_read+0x12>
	}

return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e009      	b.n	8001b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf1      	blt.n	8001b00 <_write+0x12>
	}
	return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_close>:

int _close(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4c:	605a      	str	r2, [r3, #4]
	return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <_isatty>:

int _isatty(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
	return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
	...

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f003 f9f8 	bl	8004fac <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20005000 	.word	0x20005000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20000220 	.word	0x20000220
 8001bf0:	200007e8 	.word	0x200007e8

08001bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c02:	490d      	ldr	r1, [pc, #52]	; (8001c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c18:	4c0a      	ldr	r4, [pc, #40]	; (8001c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c26:	f7ff ffe5 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f003 f9c5 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2e:	f7ff faf3 	bl	8001218 <main>
  bx lr
 8001c32:	4770      	bx	lr
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001c3c:	08009fcc 	.word	0x08009fcc
  ldr r2, =_sbss
 8001c40:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c44:	200007e8 	.word	0x200007e8

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x28>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x28>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f923 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fd90 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f93b 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f903 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_IncTick+0x1c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_IncTick+0x20>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	200007bc 	.word	0x200007bc

08001cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <HAL_GetTick+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	200007bc 	.word	0x200007bc

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4906      	ldr	r1, [pc, #24]	; (8001da8 <__NVIC_EnableIRQ+0x34>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff90 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff2d 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff42 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff90 	bl	8001e00 <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5f 	bl	8001dac <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff35 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b08b      	sub	sp, #44	; 0x2c
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3e:	e169      	b.n	8002214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f40:	2201      	movs	r2, #1
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 8158 	bne.w	800220e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a9a      	ldr	r2, [pc, #616]	; (80021cc <HAL_GPIO_Init+0x2a0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f68:	4a98      	ldr	r2, [pc, #608]	; (80021cc <HAL_GPIO_Init+0x2a0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d875      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f6e:	4a98      	ldr	r2, [pc, #608]	; (80021d0 <HAL_GPIO_Init+0x2a4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d058      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f74:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <HAL_GPIO_Init+0x2a4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d86f      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f7a:	4a96      	ldr	r2, [pc, #600]	; (80021d4 <HAL_GPIO_Init+0x2a8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d052      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f80:	4a94      	ldr	r2, [pc, #592]	; (80021d4 <HAL_GPIO_Init+0x2a8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d869      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f86:	4a94      	ldr	r2, [pc, #592]	; (80021d8 <HAL_GPIO_Init+0x2ac>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04c      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f8c:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_GPIO_Init+0x2ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d863      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f92:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d046      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f98:	4a90      	ldr	r2, [pc, #576]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d85d      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d82a      	bhi.n	8001ff8 <HAL_GPIO_Init+0xcc>
 8001fa2:	2b12      	cmp	r3, #18
 8001fa4:	d859      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_GPIO_Init+0x80>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08002027 	.word	0x08002027
 8001fb0:	08002001 	.word	0x08002001
 8001fb4:	08002013 	.word	0x08002013
 8001fb8:	08002055 	.word	0x08002055
 8001fbc:	0800205b 	.word	0x0800205b
 8001fc0:	0800205b 	.word	0x0800205b
 8001fc4:	0800205b 	.word	0x0800205b
 8001fc8:	0800205b 	.word	0x0800205b
 8001fcc:	0800205b 	.word	0x0800205b
 8001fd0:	0800205b 	.word	0x0800205b
 8001fd4:	0800205b 	.word	0x0800205b
 8001fd8:	0800205b 	.word	0x0800205b
 8001fdc:	0800205b 	.word	0x0800205b
 8001fe0:	0800205b 	.word	0x0800205b
 8001fe4:	0800205b 	.word	0x0800205b
 8001fe8:	0800205b 	.word	0x0800205b
 8001fec:	0800205b 	.word	0x0800205b
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	0800201d 	.word	0x0800201d
 8001ff8:	4a79      	ldr	r2, [pc, #484]	; (80021e0 <HAL_GPIO_Init+0x2b4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ffe:	e02c      	b.n	800205a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	623b      	str	r3, [r7, #32]
          break;
 8002006:	e029      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	3304      	adds	r3, #4
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e024      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	3308      	adds	r3, #8
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e01f      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	330c      	adds	r3, #12
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e01a      	b.n	800205c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800202e:	2304      	movs	r3, #4
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e013      	b.n	800205c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203c:	2308      	movs	r3, #8
 800203e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	611a      	str	r2, [r3, #16]
          break;
 8002046:	e009      	b.n	800205c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002048:	2308      	movs	r3, #8
 800204a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	615a      	str	r2, [r3, #20]
          break;
 8002052:	e003      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x130>
          break;
 800205a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	; 0xff
 8002060:	d801      	bhi.n	8002066 <HAL_GPIO_Init+0x13a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e001      	b.n	800206a <HAL_GPIO_Init+0x13e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2bff      	cmp	r3, #255	; 0xff
 8002070:	d802      	bhi.n	8002078 <HAL_GPIO_Init+0x14c>
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x152>
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	3b08      	subs	r3, #8
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	210f      	movs	r1, #15
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	431a      	orrs	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80b1 	beq.w	800220e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020ac:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_GPIO_Init+0x2bc>)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a40      	ldr	r2, [pc, #256]	; (80021ec <HAL_GPIO_Init+0x2c0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_GPIO_Init+0x1ec>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3f      	ldr	r2, [pc, #252]	; (80021f0 <HAL_GPIO_Init+0x2c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00d      	beq.n	8002114 <HAL_GPIO_Init+0x1e8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3e      	ldr	r2, [pc, #248]	; (80021f4 <HAL_GPIO_Init+0x2c8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1e4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <HAL_GPIO_Init+0x2cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_GPIO_Init+0x1e0>
 8002108:	2303      	movs	r3, #3
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 800210c:	2304      	movs	r3, #4
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002118:	2300      	movs	r3, #0
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800212a:	492f      	ldr	r1, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x2bc>)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	492c      	ldr	r1, [pc, #176]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4928      	ldr	r1, [pc, #160]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	491e      	ldr	r1, [pc, #120]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4918      	ldr	r1, [pc, #96]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4914      	ldr	r1, [pc, #80]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d021      	beq.n	8002200 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
 80021c8:	e021      	b.n	800220e <HAL_GPIO_Init+0x2e2>
 80021ca:	bf00      	nop
 80021cc:	10320000 	.word	0x10320000
 80021d0:	10310000 	.word	0x10310000
 80021d4:	10220000 	.word	0x10220000
 80021d8:	10210000 	.word	0x10210000
 80021dc:	10120000 	.word	0x10120000
 80021e0:	10110000 	.word	0x10110000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40010800 	.word	0x40010800
 80021f0:	40010c00 	.word	0x40010c00
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40011400 	.word	0x40011400
 80021fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_GPIO_Init+0x304>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	4909      	ldr	r1, [pc, #36]	; (8002230 <HAL_GPIO_Init+0x304>)
 800220a:	4013      	ands	r3, r2
 800220c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	3301      	adds	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f ae8e 	bne.w	8001f40 <HAL_GPIO_Init+0x14>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	372c      	adds	r7, #44	; 0x2c
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e12b      	b.n	80024ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fab0 	bl	80017f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c8:	f000 ffea 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a81      	ldr	r2, [pc, #516]	; (80024d8 <HAL_I2C_Init+0x274>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d807      	bhi.n	80022e8 <HAL_I2C_Init+0x84>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a80      	ldr	r2, [pc, #512]	; (80024dc <HAL_I2C_Init+0x278>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	bf94      	ite	ls
 80022e0:	2301      	movls	r3, #1
 80022e2:	2300      	movhi	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e006      	b.n	80022f6 <HAL_I2C_Init+0x92>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a7d      	ldr	r2, [pc, #500]	; (80024e0 <HAL_I2C_Init+0x27c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0e7      	b.n	80024ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a78      	ldr	r2, [pc, #480]	; (80024e4 <HAL_I2C_Init+0x280>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9b      	lsrs	r3, r3, #18
 8002308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_I2C_Init+0x274>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d802      	bhi.n	8002338 <HAL_I2C_Init+0xd4>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3301      	adds	r3, #1
 8002336:	e009      	b.n	800234c <HAL_I2C_Init+0xe8>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	4a69      	ldr	r2, [pc, #420]	; (80024e8 <HAL_I2C_Init+0x284>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	3301      	adds	r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800235e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	495c      	ldr	r1, [pc, #368]	; (80024d8 <HAL_I2C_Init+0x274>)
 8002368:	428b      	cmp	r3, r1
 800236a:	d819      	bhi.n	80023a0 <HAL_I2C_Init+0x13c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e59      	subs	r1, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fbb1 f3f3 	udiv	r3, r1, r3
 800237a:	1c59      	adds	r1, r3, #1
 800237c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002380:	400b      	ands	r3, r1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_I2C_Init+0x138>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e59      	subs	r1, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fbb1 f3f3 	udiv	r3, r1, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	e051      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 800239c:	2304      	movs	r3, #4
 800239e:	e04f      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d111      	bne.n	80023cc <HAL_I2C_Init+0x168>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	440b      	add	r3, r1
 80023b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e012      	b.n	80023f2 <HAL_I2C_Init+0x18e>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	0099      	lsls	r1, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Init+0x196>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e022      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10e      	bne.n	8002420 <HAL_I2C_Init+0x1bc>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e58      	subs	r0, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	440b      	add	r3, r1
 8002410:	fbb0 f3f3 	udiv	r3, r0, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241e:	e00f      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	0099      	lsls	r1, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	fbb0 f3f3 	udiv	r3, r0, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	6809      	ldr	r1, [r1, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69da      	ldr	r2, [r3, #28]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800246e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6911      	ldr	r1, [r2, #16]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	000186a0 	.word	0x000186a0
 80024dc:	001e847f 	.word	0x001e847f
 80024e0:	003d08ff 	.word	0x003d08ff
 80024e4:	431bde83 	.word	0x431bde83
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fbfc 	bl	8001cfc <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	f040 80e0 	bne.w	80026d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2319      	movs	r3, #25
 800251a:	2201      	movs	r2, #1
 800251c:	4970      	ldr	r1, [pc, #448]	; (80026e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f964 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	e0d3      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_I2C_Master_Transmit+0x50>
 8002538:	2302      	movs	r3, #2
 800253a:	e0cc      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d007      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2221      	movs	r2, #33	; 0x21
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2210      	movs	r2, #16
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	893a      	ldrh	r2, [r7, #8]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f89c 	bl	80026e8 <I2C_MasterRequestWrite>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e08d      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d0:	e066      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f9de 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06b      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d11b      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x188>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f9ce 	bl	8002a1a <I2C_WaitOnBTFFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b04      	cmp	r3, #4
 800268a:	d107      	bne.n	800269c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01a      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d194      	bne.n	80025d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d006      	beq.n	8002712 <I2C_MasterRequestWrite+0x2a>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d003      	beq.n	8002712 <I2C_MasterRequestWrite+0x2a>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002710:	d108      	bne.n	8002724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	2b12      	cmp	r3, #18
 800272a:	d107      	bne.n	800273c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f84f 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d103      	bne.n	800276c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e035      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002778:	d108      	bne.n	800278c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	e01b      	b.n	80027c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800278c:	897b      	ldrh	r3, [r7, #10]
 800278e:	11db      	asrs	r3, r3, #7
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 0306 	and.w	r3, r3, #6
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f063 030f 	orn	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <I2C_MasterRequestWrite+0xfc>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f875 	bl	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e010      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <I2C_MasterRequestWrite+0x100>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f865 	bl	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	00010008 	.word	0x00010008
 80027e8:	00010002 	.word	0x00010002

080027ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	e025      	b.n	800284a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d021      	beq.n	800284a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7ff fa79 	bl	8001cfc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e023      	b.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10d      	bne.n	8002870 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf0c      	ite	eq
 8002866:	2301      	moveq	r3, #1
 8002868:	2300      	movne	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	e00c      	b.n	800288a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	429a      	cmp	r2, r3
 800288e:	d0b6      	beq.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a8:	e051      	b.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	d123      	bne.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e046      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d021      	beq.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7ff f9f7 	bl	8001cfc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e020      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e00b      	b.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	43da      	mvns	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d18d      	bne.n	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	e02d      	b.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f878 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e02d      	b.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d021      	beq.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff f99d 	bl	8001cfc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d1ca      	bne.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a26:	e02d      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f837 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e02d      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d021      	beq.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7ff f95c 	bl	8001cfc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e007      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d1ca      	bne.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d11b      	bne.n	8002aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e26c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8087 	beq.w	8002c26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b18:	4b92      	ldr	r3, [pc, #584]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d00c      	beq.n	8002b3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b24:	4b8f      	ldr	r3, [pc, #572]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d112      	bne.n	8002b56 <HAL_RCC_OscConfig+0x5e>
 8002b30:	4b8c      	ldr	r3, [pc, #560]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d10b      	bne.n	8002b56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3e:	4b89      	ldr	r3, [pc, #548]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x12c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d168      	bne.n	8002c24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e246      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x76>
 8002b60:	4b80      	ldr	r3, [pc, #512]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7f      	ldr	r2, [pc, #508]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e02e      	b.n	8002bcc <HAL_RCC_OscConfig+0xd4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b7b      	ldr	r3, [pc, #492]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7a      	ldr	r2, [pc, #488]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b78      	ldr	r3, [pc, #480]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a77      	ldr	r2, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e01d      	b.n	8002bcc <HAL_RCC_OscConfig+0xd4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xbc>
 8002b9a:	4b72      	ldr	r3, [pc, #456]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a71      	ldr	r2, [pc, #452]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0xd4>
 8002bb4:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6a      	ldr	r2, [pc, #424]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b68      	ldr	r3, [pc, #416]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a67      	ldr	r2, [pc, #412]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f892 	bl	8001cfc <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff f88e 	bl	8001cfc <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1fa      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0xe4>
 8002bfa:	e014      	b.n	8002c26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff f87e 	bl	8001cfc <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7ff f87a 	bl	8001cfc <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e1e6      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x10c>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d063      	beq.n	8002cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c32:	4b4c      	ldr	r3, [pc, #304]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c3e:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d11c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x18c>
 8002c4a:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d116      	bne.n	8002c84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x176>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1ba      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4939      	ldr	r1, [pc, #228]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	e03a      	b.n	8002cfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8c:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7ff f833 	bl	8001cfc <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7ff f82f 	bl	8001cfc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e19b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4927      	ldr	r1, [pc, #156]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f812 	bl	8001cfc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7ff f80e 	bl	8001cfc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e17a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03a      	beq.n	8002d7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7fe fff2 	bl	8001cfc <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe ffee 	bl	8001cfc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e15a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f000 fad8 	bl	80032f0 <RCC_Delay>
 8002d40:	e01c      	b.n	8002d7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7fe ffd8 	bl	8001cfc <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4e:	e00f      	b.n	8002d70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d50:	f7fe ffd4 	bl	8001cfc <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d908      	bls.n	8002d70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e140      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	42420000 	.word	0x42420000
 8002d6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	4b9e      	ldr	r3, [pc, #632]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e9      	bne.n	8002d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a6 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8e:	4b97      	ldr	r3, [pc, #604]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10d      	bne.n	8002db6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b94      	ldr	r3, [pc, #592]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a93      	ldr	r2, [pc, #588]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	61d3      	str	r3, [r2, #28]
 8002da6:	4b91      	ldr	r3, [pc, #580]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	4b8e      	ldr	r3, [pc, #568]	; (8002ff0 <HAL_RCC_OscConfig+0x4f8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ff0 <HAL_RCC_OscConfig+0x4f8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ff0 <HAL_RCC_OscConfig+0x4f8>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dce:	f7fe ff95 	bl	8001cfc <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe ff91 	bl	8001cfc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	; 0x64
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0fd      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_OscConfig+0x4f8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x312>
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a7a      	ldr	r2, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6213      	str	r3, [r2, #32]
 8002e08:	e02d      	b.n	8002e66 <HAL_RCC_OscConfig+0x36e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x334>
 8002e12:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a75      	ldr	r2, [pc, #468]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6213      	str	r3, [r2, #32]
 8002e1e:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a72      	ldr	r2, [pc, #456]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	e01c      	b.n	8002e66 <HAL_RCC_OscConfig+0x36e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x356>
 8002e34:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a6c      	ldr	r2, [pc, #432]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a69      	ldr	r2, [pc, #420]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x36e>
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a66      	ldr	r2, [pc, #408]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a63      	ldr	r2, [pc, #396]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe ff45 	bl	8001cfc <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe ff41 	bl	8001cfc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0ab      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b57      	ldr	r3, [pc, #348]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x37e>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe ff2f 	bl	8001cfc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe ff2b 	bl	8001cfc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e095      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b48      	ldr	r3, [pc, #288]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8081 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee0:	4b42      	ldr	r3, [pc, #264]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d061      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d146      	bne.n	8002f82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_OscConfig+0x4fc>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe feff 	bl	8001cfc <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe fefb 	bl	8001cfc <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e067      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d108      	bne.n	8002f3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	492d      	ldr	r1, [pc, #180]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a19      	ldr	r1, [r3, #32]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	4927      	ldr	r1, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x4fc>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fecf 	bl	8001cfc <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe fecb 	bl	8001cfc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e037      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x46a>
 8002f80:	e02f      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_RCC_OscConfig+0x4fc>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe feb8 	bl	8001cfc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe feb4 	bl	8001cfc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e020      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x498>
 8002fae:	e018      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e013      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	42420060 	.word	0x42420060

08002ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d0      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	4965      	ldr	r1, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800305e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d040      	beq.n	8003118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e073      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e8:	f7fe fe08 	bl	8001cfc <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe fe04 	bl	8001cfc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e053      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d210      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4922      	ldr	r1, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1cc>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1d0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fd66 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08009918 	.word	0x08009918
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b490      	push	{r4, r7}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_RCC_GetSysClockFreq+0xb0>)
 80031d4:	1d3c      	adds	r4, r7, #4
 80031d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031dc:	f240 2301 	movw	r3, #513	; 0x201
 80031e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b04      	cmp	r3, #4
 8003204:	d002      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 8003206:	2b08      	cmp	r3, #8
 8003208:	d003      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x46>
 800320a:	e02d      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800320e:	623b      	str	r3, [r7, #32]
      break;
 8003210:	e02d      	b.n	800326e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	0c9b      	lsrs	r3, r3, #18
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800321e:	4413      	add	r3, r2
 8003220:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003224:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0c5b      	lsrs	r3, r3, #17
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800323e:	4413      	add	r3, r2
 8003240:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003244:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324a:	fb02 f203 	mul.w	r2, r2, r3
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	e004      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	623b      	str	r3, [r7, #32]
      break;
 8003266:	e002      	b.n	800326e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326a:	623b      	str	r3, [r7, #32]
      break;
 800326c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326e:	6a3b      	ldr	r3, [r7, #32]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc90      	pop	{r4, r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	080098b8 	.word	0x080098b8
 8003280:	40021000 	.word	0x40021000
 8003284:	007a1200 	.word	0x007a1200
 8003288:	003d0900 	.word	0x003d0900

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <HAL_RCC_GetHCLKFreq+0x10>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a4:	f7ff fff2 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08009928 	.word	0x08009928

080032c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032cc:	f7ff ffde 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0adb      	lsrs	r3, r3, #11
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08009928 	.word	0x08009928

080032f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <RCC_Delay+0x34>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <RCC_Delay+0x38>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800330c:	bf00      	nop
  }
  while (Delay --);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	60fa      	str	r2, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f9      	bne.n	800330c <RCC_Delay+0x1c>
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	20000000 	.word	0x20000000
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fa8c 	bl	8001870 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 fb0e 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start+0x1a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e013      	b.n	800340e <HAL_TIM_IC_Start+0x42>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start+0x2a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	e00b      	b.n	800340e <HAL_TIM_IC_Start+0x42>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_IC_Start+0x3a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e003      	b.n	800340e <HAL_TIM_IC_Start+0x42>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_TIM_IC_Start+0x54>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e013      	b.n	8003448 <HAL_TIM_IC_Start+0x7c>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d104      	bne.n	8003430 <HAL_TIM_IC_Start+0x64>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e00b      	b.n	8003448 <HAL_TIM_IC_Start+0x7c>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b08      	cmp	r3, #8
 8003434:	d104      	bne.n	8003440 <HAL_TIM_IC_Start+0x74>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e003      	b.n	8003448 <HAL_TIM_IC_Start+0x7c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003446:	b2db      	uxtb	r3, r3
 8003448:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06d      	b.n	8003536 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_TIM_IC_Start+0x9e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	e013      	b.n	8003492 <HAL_TIM_IC_Start+0xc6>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d104      	bne.n	800347a <HAL_TIM_IC_Start+0xae>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003478:	e00b      	b.n	8003492 <HAL_TIM_IC_Start+0xc6>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d104      	bne.n	800348a <HAL_TIM_IC_Start+0xbe>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003488:	e003      	b.n	8003492 <HAL_TIM_IC_Start+0xc6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_IC_Start+0xd6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a0:	e013      	b.n	80034ca <HAL_TIM_IC_Start+0xfe>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_IC_Start+0xe6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b0:	e00b      	b.n	80034ca <HAL_TIM_IC_Start+0xfe>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_IC_Start+0xf6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	e003      	b.n	80034ca <HAL_TIM_IC_Start+0xfe>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fcd3 	bl	8003e7e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIM_IC_Start+0x174>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_IC_Start+0x134>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_IC_Start+0x134>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_TIM_IC_Start+0x178>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_IC_Start+0x134>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_TIM_IC_Start+0x17c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_TIM_IC_Start_IT+0x1a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e013      	b.n	800358e <HAL_TIM_IC_Start_IT+0x42>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d104      	bne.n	8003576 <HAL_TIM_IC_Start_IT+0x2a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e00b      	b.n	800358e <HAL_TIM_IC_Start_IT+0x42>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d104      	bne.n	8003586 <HAL_TIM_IC_Start_IT+0x3a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e003      	b.n	800358e <HAL_TIM_IC_Start_IT+0x42>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_TIM_IC_Start_IT+0x54>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e013      	b.n	80035c8 <HAL_TIM_IC_Start_IT+0x7c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d104      	bne.n	80035b0 <HAL_TIM_IC_Start_IT+0x64>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e00b      	b.n	80035c8 <HAL_TIM_IC_Start_IT+0x7c>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d104      	bne.n	80035c0 <HAL_TIM_IC_Start_IT+0x74>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e003      	b.n	80035c8 <HAL_TIM_IC_Start_IT+0x7c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d102      	bne.n	80035d6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035d0:	7bbb      	ldrb	r3, [r7, #14]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0b3      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0x9e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e8:	e013      	b.n	8003612 <HAL_TIM_IC_Start_IT+0xc6>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0xae>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_IC_Start_IT+0xc6>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Start_IT+0xbe>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003608:	e003      	b.n	8003612 <HAL_TIM_IC_Start_IT+0xc6>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <HAL_TIM_IC_Start_IT+0xd6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	e013      	b.n	800364a <HAL_TIM_IC_Start_IT+0xfe>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d104      	bne.n	8003632 <HAL_TIM_IC_Start_IT+0xe6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003630:	e00b      	b.n	800364a <HAL_TIM_IC_Start_IT+0xfe>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d104      	bne.n	8003642 <HAL_TIM_IC_Start_IT+0xf6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003640:	e003      	b.n	800364a <HAL_TIM_IC_Start_IT+0xfe>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d841      	bhi.n	80036d4 <HAL_TIM_IC_Start_IT+0x188>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_TIM_IC_Start_IT+0x10c>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036d5 	.word	0x080036d5
 8003660:	080036d5 	.word	0x080036d5
 8003664:	080036d5 	.word	0x080036d5
 8003668:	0800369f 	.word	0x0800369f
 800366c:	080036d5 	.word	0x080036d5
 8003670:	080036d5 	.word	0x080036d5
 8003674:	080036d5 	.word	0x080036d5
 8003678:	080036b1 	.word	0x080036b1
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036d5 	.word	0x080036d5
 8003684:	080036d5 	.word	0x080036d5
 8003688:	080036c3 	.word	0x080036c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0202 	orr.w	r2, r2, #2
 800369a:	60da      	str	r2, [r3, #12]
      break;
 800369c:	e01b      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0204 	orr.w	r2, r2, #4
 80036ac:	60da      	str	r2, [r3, #12]
      break;
 80036ae:	e012      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	60da      	str	r2, [r3, #12]
      break;
 80036c0:	e009      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0210 	orr.w	r2, r2, #16
 80036d0:	60da      	str	r2, [r3, #12]
      break;
 80036d2:	e000      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80036d4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fbcd 	bl	8003e7e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_TIM_IC_Start_IT+0x200>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIM_IC_Start_IT+0x1c0>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d009      	beq.n	800370c <HAL_TIM_IC_Start_IT+0x1c0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_TIM_IC_Start_IT+0x204>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_IC_Start_IT+0x1c0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_TIM_IC_Start_IT+0x208>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d010      	beq.n	8003740 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e007      	b.n	8003740 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800

08003758 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_TIM_IC_ConfigChannel+0x1a>
 800376e:	2302      	movs	r3, #2
 8003770:	e082      	b.n	8003878 <HAL_TIM_IC_ConfigChannel+0x120>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f000 f9ec 	bl	8003b6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 020c 	bic.w	r2, r2, #12
 80037a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
 80037b6:	e05a      	b.n	800386e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d11c      	bne.n	80037f8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f000 fa55 	bl	8003c7c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6999      	ldr	r1, [r3, #24]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	619a      	str	r2, [r3, #24]
 80037f6:	e03a      	b.n	800386e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11b      	bne.n	8003836 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 faa0 	bl	8003d52 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 020c 	bic.w	r2, r2, #12
 8003820:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
 8003834:	e01b      	b.n	800386e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f000 fabf 	bl	8003dc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003858:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	021a      	lsls	r2, r3, #8
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e031      	b.n	80038fc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80038a8:	6839      	ldr	r1, [r7, #0]
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8d0 	bl	8003a50 <TIM_SlaveTimer_SetConfig>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e018      	b.n	80038fc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d831      	bhi.n	800397c <HAL_TIM_ReadCapturedValue+0x78>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <HAL_TIM_ReadCapturedValue+0x1c>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003955 	.word	0x08003955
 8003924:	0800397d 	.word	0x0800397d
 8003928:	0800397d 	.word	0x0800397d
 800392c:	0800397d 	.word	0x0800397d
 8003930:	0800395f 	.word	0x0800395f
 8003934:	0800397d 	.word	0x0800397d
 8003938:	0800397d 	.word	0x0800397d
 800393c:	0800397d 	.word	0x0800397d
 8003940:	08003969 	.word	0x08003969
 8003944:	0800397d 	.word	0x0800397d
 8003948:	0800397d 	.word	0x0800397d
 800394c:	0800397d 	.word	0x0800397d
 8003950:	08003973 	.word	0x08003973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	60fb      	str	r3, [r7, #12]

      break;
 800395c:	e00f      	b.n	800397e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	60fb      	str	r3, [r7, #12]

      break;
 8003966:	e00a      	b.n	800397e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	60fb      	str	r3, [r7, #12]

      break;
 8003970:	e005      	b.n	800397e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	60fb      	str	r3, [r7, #12]

      break;
 800397a:	e000      	b.n	800397e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800397c:	bf00      	nop
  }

  return tmpreg;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <TIM_Base_SetConfig+0xb8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0x30>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0x30>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <TIM_Base_SetConfig+0xbc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x30>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <TIM_Base_SetConfig+0xc0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <TIM_Base_SetConfig+0xb8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x62>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <TIM_Base_SetConfig+0xbc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <TIM_Base_SetConfig+0xc0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <TIM_Base_SetConfig+0xb8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800

08003a50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b70      	cmp	r3, #112	; 0x70
 8003a94:	d01a      	beq.n	8003acc <TIM_SlaveTimer_SetConfig+0x7c>
 8003a96:	2b70      	cmp	r3, #112	; 0x70
 8003a98:	d860      	bhi.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
 8003a9a:	2b60      	cmp	r3, #96	; 0x60
 8003a9c:	d054      	beq.n	8003b48 <TIM_SlaveTimer_SetConfig+0xf8>
 8003a9e:	2b60      	cmp	r3, #96	; 0x60
 8003aa0:	d85c      	bhi.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
 8003aa2:	2b50      	cmp	r3, #80	; 0x50
 8003aa4:	d046      	beq.n	8003b34 <TIM_SlaveTimer_SetConfig+0xe4>
 8003aa6:	2b50      	cmp	r3, #80	; 0x50
 8003aa8:	d858      	bhi.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d019      	beq.n	8003ae2 <TIM_SlaveTimer_SetConfig+0x92>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d854      	bhi.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
 8003ab2:	2b30      	cmp	r3, #48	; 0x30
 8003ab4:	d054      	beq.n	8003b60 <TIM_SlaveTimer_SetConfig+0x110>
 8003ab6:	2b30      	cmp	r3, #48	; 0x30
 8003ab8:	d850      	bhi.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d050      	beq.n	8003b60 <TIM_SlaveTimer_SetConfig+0x110>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d84c      	bhi.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04c      	beq.n	8003b60 <TIM_SlaveTimer_SetConfig+0x110>
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d04a      	beq.n	8003b60 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003aca:	e047      	b.n	8003b5c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68d9      	ldr	r1, [r3, #12]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f000 f9b0 	bl	8003e40 <TIM_ETR_SetConfig>
      break;
 8003ae0:	e03f      	b.n	8003b62 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d101      	bne.n	8003aee <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e03a      	b.n	8003b64 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b14:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	621a      	str	r2, [r3, #32]
      break;
 8003b32:	e016      	b.n	8003b62 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6899      	ldr	r1, [r3, #8]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f000 f86d 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      break;
 8003b46:	e00c      	b.n	8003b62 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	461a      	mov	r2, r3
 8003b56:	f000 f8cd 	bl	8003cf4 <TIM_TI2_ConfigInputStage>
      break;
 8003b5a:	e002      	b.n	8003b62 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003b60:	bf00      	nop
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <TIM_TI1_SetConfig+0xa8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <TIM_TI1_SetConfig+0x46>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d007      	beq.n	8003bb2 <TIM_TI1_SetConfig+0x46>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <TIM_TI1_SetConfig+0xac>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_TI1_SetConfig+0x46>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <TIM_TI1_SetConfig+0xb0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <TIM_TI1_SetConfig+0x4a>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <TIM_TI1_SetConfig+0x4c>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e003      	b.n	8003bd6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f023 030a 	bic.w	r3, r3, #10
 8003bf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 030a 	and.w	r3, r3, #10
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 030a 	bic.w	r3, r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f023 0210 	bic.w	r2, r3, #16
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	031b      	lsls	r3, r3, #12
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	031b      	lsls	r3, r3, #12
 8003e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	609a      	str	r2, [r3, #8]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1a      	ldr	r2, [r3, #32]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e046      	b.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10c      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800

08003f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03f      	b.n	8004016 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fcee 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f905 	bl	80041d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b08a      	sub	sp, #40	; 0x28
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	d17c      	bne.n	8004138 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_UART_Transmit+0x2c>
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e075      	b.n	800413a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_UART_Transmit+0x3e>
 8004058:	2302      	movs	r3, #2
 800405a:	e06e      	b.n	800413a <HAL_UART_Transmit+0x11c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004072:	f7fd fe43 	bl	8001cfc <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d108      	bne.n	80040a0 <HAL_UART_Transmit+0x82>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e003      	b.n	80040a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040b0:	e02a      	b.n	8004108 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f840 	bl	8004142 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e036      	b.n	800413a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3302      	adds	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e007      	b.n	80040fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1cf      	bne.n	80040b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f810 	bl	8004142 <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e006      	b.n	800413a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004152:	e02c      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d028      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x30>
 8004162:	f7fd fdcb 	bl	8001cfc <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	429a      	cmp	r2, r3
 8004170:	d21d      	bcs.n	80041ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004180:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e00f      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4013      	ands	r3, r2
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d0c3      	beq.n	8004154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004212:	f023 030c 	bic.w	r3, r3, #12
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	430b      	orrs	r3, r1
 800421e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2c      	ldr	r2, [pc, #176]	; (80042ec <UART_SetConfig+0x114>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d103      	bne.n	8004248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7ff f842 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	e002      	b.n	800424e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004248:	f7ff f82a 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 800424c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009a      	lsls	r2, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <UART_SetConfig+0x118>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	0119      	lsls	r1, r3, #4
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009a      	lsls	r2, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fbb2 f2f3 	udiv	r2, r2, r3
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <UART_SetConfig+0x118>)
 8004286:	fba3 0302 	umull	r0, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2064      	movs	r0, #100	; 0x64
 800428e:	fb00 f303 	mul.w	r3, r0, r3
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	3332      	adds	r3, #50	; 0x32
 8004298:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <UART_SetConfig+0x118>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a4:	4419      	add	r1, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <UART_SetConfig+0x118>)
 80042be:	fba3 0302 	umull	r0, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2064      	movs	r0, #100	; 0x64
 80042c6:	fb00 f303 	mul.w	r3, r0, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	; 0x32
 80042d0:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <UART_SetConfig+0x118>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f003 020f 	and.w	r2, r3, #15
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	440a      	add	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40013800 	.word	0x40013800
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <hlw8012_getcurrent_multiplier>:
  float _power = 0;

// Check values every 2 seconds
#define UPDATE_TIME                     2000

  double hlw8012_getcurrent_multiplier() { return _current_multiplier; };
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <hlw8012_getcurrent_multiplier+0x14>)
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	200007c0 	.word	0x200007c0

0800430c <hlw8012_getvoltage_multiplier>:
    double hlw8012_getvoltage_multiplier() { return _voltage_multiplier; };
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <hlw8012_getvoltage_multiplier+0x14>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	200007d0 	.word	0x200007d0

08004324 <hlw8012_getpower_multiplier>:

double hlw8012_getpower_multiplier() { return _power_multiplier; };
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <hlw8012_getpower_multiplier+0x14>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	200007c8 	.word	0x200007c8

0800433c <hlw8012_sel_high_current>:

void hlw8012_sel_high_current()
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, GPIO_Pin, PinState)
	GPIOB->ODR |= (GPIO_ODR_ODR7);
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <hlw8012_sel_high_current+0x18>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a03      	ldr	r2, [pc, #12]	; (8004354 <hlw8012_sel_high_current+0x18>)
 8004346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434a:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR |= (GPIO_ODR_ODR13);
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	40010c00 	.word	0x40010c00

08004358 <hlw8012_sel_low_volatge>:
void hlw8012_sel_low_volatge()
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_ODR7);
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <hlw8012_sel_low_volatge+0x18>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <hlw8012_sel_low_volatge+0x18>)
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004366:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR &= ~(GPIO_ODR_ODR13);
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40010c00 	.word	0x40010c00

08004374 <hlw8012_getcurrent>:
	unsigned long gb_timeIn = HAL_GetTick();	// Timestamp coming into function
	while (HAL_GetTick() - gb_timeIn < mseconds) HAL_Delay(1); // While we haven't timed out
}

float hlw8012_getcurrent()
{
 8004374:	b5b0      	push	{r4, r5, r7, lr}
 8004376:	af00      	add	r7, sp, #0
	//if(_power == 0){
	//     _current_pulse_width = 0;
	//}
	//else
	{
	hlw8012_sel_high_current();
 8004378:	f7ff ffe0 	bl	800433c <hlw8012_sel_high_current>
	_current_pulse_width = pulseIN_current();
 800437c:	f000 f838 	bl	80043f0 <pulseIN_current>
 8004380:	4603      	mov	r3, r0
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc fec4 	bl	8001110 <__aeabi_f2uiz>
 8004388:	4603      	mov	r3, r0
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <hlw8012_getcurrent+0x70>)
 800438c:	6013      	str	r3, [r2, #0]
	_current = (_current_pulse_width > 0) ? (_current_multiplier / _current_pulse_width )*2: 0;
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <hlw8012_getcurrent+0x70>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01d      	beq.n	80043d2 <hlw8012_getcurrent+0x5e>
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <hlw8012_getcurrent+0x74>)
 8004398:	e9d3 4500 	ldrd	r4, r5, [r3]
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <hlw8012_getcurrent+0x70>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f81f 	bl	80003e4 <__aeabi_ui2d>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fc f9bd 	bl	800072c <__aeabi_ddiv>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	f7fb fed5 	bl	800016c <__adddf3>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fc fb7d 	bl	8000ac8 <__aeabi_d2f>
 80043ce:	4603      	mov	r3, r0
 80043d0:	e001      	b.n	80043d6 <hlw8012_getcurrent+0x62>
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	4a05      	ldr	r2, [pc, #20]	; (80043ec <hlw8012_getcurrent+0x78>)
 80043d8:	6013      	str	r3, [r2, #0]
	//return _current;
	}
	return _current;
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <hlw8012_getcurrent+0x78>)
 80043dc:	681b      	ldr	r3, [r3, #0]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	bdb0      	pop	{r4, r5, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000228 	.word	0x20000228
 80043e8:	200007c0 	.word	0x200007c0
 80043ec:	20000230 	.word	0x20000230

080043f0 <pulseIN_current>:
/*
 * Period is taken from TIM4_IRQ
 *
 */
float pulseIN_current()
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
unsigned long gb_pulse_current = HAL_GetTick();	// Timestamp coming into function
 80043f6:	f7fd fc81 	bl	8001cfc <HAL_GetTick>
 80043fa:	6078      	str	r0, [r7, #4]
//tim4_ch1_capture_config();
	while (HAL_GetTick() - gb_pulse_current < 2000 )
 80043fc:	e008      	b.n	8004410 <pulseIN_current+0x20>
	{
	tim3_ch2_capture_config();
 80043fe:	f000 fc71 	bl	8004ce4 <tim3_ch2_capture_config>
		tim4_ch1_capture_config();
 8004402:	f000 fc2f 	bl	8004c64 <tim4_ch1_capture_config>
	//	 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	Current_Period = TIM3_getPeriod();
 8004406:	f000 fd25 	bl	8004e54 <TIM3_getPeriod>
 800440a:	4603      	mov	r3, r0
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <pulseIN_current+0x48>)
 800440e:	6013      	str	r3, [r2, #0]
	while (HAL_GetTick() - gb_pulse_current < 2000 )
 8004410:	f7fd fc74 	bl	8001cfc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800441e:	d3ee      	bcc.n	80043fe <pulseIN_current+0xe>
	}
	//tim4_ch1_capture_unconfig();
	tim3_ch2_capture_unconfig();
 8004420:	f000 fc80 	bl	8004d24 <tim3_ch2_capture_unconfig>

	//reinitialise Period to 0
	TIM4_setPeriod(0);
 8004424:	2000      	movs	r0, #0
 8004426:	f000 fdb1 	bl	8004f8c <TIM4_setPeriod>
	//}
	return Current_Period;
 800442a:	4b03      	ldr	r3, [pc, #12]	; (8004438 <pulseIN_current+0x48>)
 800442c:	681b      	ldr	r3, [r3, #0]

}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000023c 	.word	0x2000023c

0800443c <hlw8012_getvoltage>:
float hlw8012_getvoltage()
{
 800443c:	b5b0      	push	{r4, r5, r7, lr}
 800443e:	af00      	add	r7, sp, #0
	hlw8012_sel_low_volatge();
 8004440:	f7ff ff8a 	bl	8004358 <hlw8012_sel_low_volatge>
	_voltage_pulse_width = pulseIN_voltage();
 8004444:	f000 f83a 	bl	80044bc <pulseIN_voltage>
 8004448:	4603      	mov	r3, r0
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc fe60 	bl	8001110 <__aeabi_f2uiz>
 8004450:	4603      	mov	r3, r0
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <hlw8012_getvoltage+0x74>)
 8004454:	6013      	str	r3, [r2, #0]
	_voltage = (_voltage_pulse_width > 0) ? _voltage_multiplier / _voltage_pulse_width/2: 0;
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <hlw8012_getvoltage+0x74>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01f      	beq.n	800449e <hlw8012_getvoltage+0x62>
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <hlw8012_getvoltage+0x78>)
 8004460:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <hlw8012_getvoltage+0x74>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fb ffbb 	bl	80003e4 <__aeabi_ui2d>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fc f959 	bl	800072c <__aeabi_ddiv>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800448a:	f7fc f94f 	bl	800072c <__aeabi_ddiv>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f7fc fb17 	bl	8000ac8 <__aeabi_d2f>
 800449a:	4603      	mov	r3, r0
 800449c:	e001      	b.n	80044a2 <hlw8012_getvoltage+0x66>
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <hlw8012_getvoltage+0x7c>)
 80044a4:	6013      	str	r3, [r2, #0]
	return _voltage;
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <hlw8012_getvoltage+0x7c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	bdb0      	pop	{r4, r5, r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000224 	.word	0x20000224
 80044b4:	200007d0 	.word	0x200007d0
 80044b8:	20000234 	.word	0x20000234

080044bc <pulseIN_voltage>:
float voltage_Period = 0;
float pulseIN_voltage()
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = HAL_GetTick();	// Timestamp coming into function
 80044c2:	f7fd fc1b 	bl	8001cfc <HAL_GetTick>
 80044c6:	6078      	str	r0, [r7, #4]
		while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 80044c8:	e006      	b.n	80044d8 <pulseIN_voltage+0x1c>
		{
		//	tim4_ch1_capture_config();
	tim3_ch2_capture_config();
 80044ca:	f000 fc0b 	bl	8004ce4 <tim3_ch2_capture_config>
		// HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	voltage_Period = TIM3_getPeriod();
 80044ce:	f000 fcc1 	bl	8004e54 <TIM3_getPeriod>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <pulseIN_voltage+0x44>)
 80044d6:	6013      	str	r3, [r2, #0]
		while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 80044d8:	f7fd fc10 	bl	8001cfc <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80044e6:	d3f0      	bcc.n	80044ca <pulseIN_voltage+0xe>
		}
	//	tim4_ch1_capture_unconfig();
	tim3_ch2_capture_unconfig();
 80044e8:	f000 fc1c 	bl	8004d24 <tim3_ch2_capture_unconfig>

	//reinitilise Period to 0
	TIM4_setPeriod(0);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f000 fd4d 	bl	8004f8c <TIM4_setPeriod>
	return voltage_Period;
 80044f2:	4b03      	ldr	r3, [pc, #12]	; (8004500 <pulseIN_voltage+0x44>)
 80044f4:	681b      	ldr	r3, [r3, #0]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000240 	.word	0x20000240

08004504 <hlw8012_getactivepower>:
float hlw8012_getactivepower()
{
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	af00      	add	r7, sp, #0
	_power_pulse_width = pulseIN_power();
 8004508:	f000 f83a 	bl	8004580 <pulseIN_power>
 800450c:	4603      	mov	r3, r0
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc fdfe 	bl	8001110 <__aeabi_f2uiz>
 8004514:	4603      	mov	r3, r0
 8004516:	4a17      	ldr	r2, [pc, #92]	; (8004574 <hlw8012_getactivepower+0x70>)
 8004518:	6013      	str	r3, [r2, #0]
	_power = (_power_pulse_width > 0) ? _power_multiplier / _power_pulse_width / 2 : 0;
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <hlw8012_getactivepower+0x70>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01f      	beq.n	8004562 <hlw8012_getactivepower+0x5e>
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <hlw8012_getactivepower+0x74>)
 8004524:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <hlw8012_getactivepower+0x70>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fb ff59 	bl	80003e4 <__aeabi_ui2d>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4620      	mov	r0, r4
 8004538:	4629      	mov	r1, r5
 800453a:	f7fc f8f7 	bl	800072c <__aeabi_ddiv>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800454e:	f7fc f8ed 	bl	800072c <__aeabi_ddiv>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	f7fc fab5 	bl	8000ac8 <__aeabi_d2f>
 800455e:	4603      	mov	r3, r0
 8004560:	e001      	b.n	8004566 <hlw8012_getactivepower+0x62>
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <hlw8012_getactivepower+0x78>)
 8004568:	6013      	str	r3, [r2, #0]
	return _power;
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <hlw8012_getactivepower+0x78>)
 800456c:	681b      	ldr	r3, [r3, #0]
}
 800456e:	4618      	mov	r0, r3
 8004570:	bdb0      	pop	{r4, r5, r7, pc}
 8004572:	bf00      	nop
 8004574:	2000022c 	.word	0x2000022c
 8004578:	200007c8 	.word	0x200007c8
 800457c:	20000238 	.word	0x20000238

08004580 <pulseIN_power>:

float Power_Period = 0;
float pulseIN_power()
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = HAL_GetTick();	// Timestamp coming into function
 8004586:	f7fd fbb9 	bl	8001cfc <HAL_GetTick>
 800458a:	6078      	str	r0, [r7, #4]
			while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 800458c:	e008      	b.n	80045a0 <pulseIN_power+0x20>
			{
	//tim4_ch1_capture_config();

				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 800458e:	2100      	movs	r1, #0
 8004590:	480d      	ldr	r0, [pc, #52]	; (80045c8 <pulseIN_power+0x48>)
 8004592:	f7fe ffdb 	bl	800354c <HAL_TIM_IC_Start_IT>
	Power_Period = TIM4_getPeriod();
 8004596:	f000 fcef 	bl	8004f78 <TIM4_getPeriod>
 800459a:	4603      	mov	r3, r0
 800459c:	4a0b      	ldr	r2, [pc, #44]	; (80045cc <pulseIN_power+0x4c>)
 800459e:	6013      	str	r3, [r2, #0]
			while (HAL_GetTick() - gb_pulse_voltage < 2000 )
 80045a0:	f7fd fbac 	bl	8001cfc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045ae:	d3ee      	bcc.n	800458e <pulseIN_power+0xe>
			}
	tim4_ch1_capture_unconfig();
 80045b0:	f000 fb78 	bl	8004ca4 <tim4_ch1_capture_unconfig>

	//reinitilise Period to 0
	TIM3_setPeriod(0);
 80045b4:	2000      	movs	r0, #0
 80045b6:	f000 fc57 	bl	8004e68 <TIM3_setPeriod>
	return Power_Period;
 80045ba:	4b04      	ldr	r3, [pc, #16]	; (80045cc <pulseIN_power+0x4c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000694 	.word	0x20000694
 80045cc:	20000244 	.word	0x20000244

080045d0 <hlw8012_expected_ActiveCurrent>:
void hlw8012_expected_ActiveCurrent( double value)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	e9c7 0100 	strd	r0, r1, [r7]
	if (_current == 0) _current = hlw8012_getcurrent();
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <hlw8012_expected_ActiveCurrent+0x78>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fd62 	bl	80010ac <__aeabi_fcmpeq>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <hlw8012_expected_ActiveCurrent+0x28>
 80045ee:	f7ff fec1 	bl	8004374 <hlw8012_getcurrent>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <hlw8012_expected_ActiveCurrent+0x78>)
 80045f6:	6013      	str	r3, [r2, #0]
	if (_current > 0) _current_multiplier *= (value / _current);
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <hlw8012_expected_ActiveCurrent+0x78>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fd7b 	bl	80010fc <__aeabi_fcmpgt>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d100      	bne.n	800460e <hlw8012_expected_ActiveCurrent+0x3e>
}
 800460c:	e018      	b.n	8004640 <hlw8012_expected_ActiveCurrent+0x70>
	if (_current > 0) _current_multiplier *= (value / _current);
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <hlw8012_expected_ActiveCurrent+0x78>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fb ff08 	bl	8000428 <__aeabi_f2d>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004620:	f7fc f884 	bl	800072c <__aeabi_ddiv>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	4b07      	ldr	r3, [pc, #28]	; (800464c <hlw8012_expected_ActiveCurrent+0x7c>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fb ff51 	bl	80004d8 <__aeabi_dmul>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4904      	ldr	r1, [pc, #16]	; (800464c <hlw8012_expected_ActiveCurrent+0x7c>)
 800463c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000230 	.word	0x20000230
 800464c:	200007c0 	.word	0x200007c0

08004650 <hlw8012_expected_Activevoltage>:
void hlw8012_expected_Activevoltage(double value)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	e9c7 0100 	strd	r0, r1, [r7]
	 if (_voltage == 0) hlw8012_getvoltage();
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <hlw8012_expected_Activevoltage+0x74>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc fd22 	bl	80010ac <__aeabi_fcmpeq>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <hlw8012_expected_Activevoltage+0x22>
 800466e:	f7ff fee5 	bl	800443c <hlw8012_getvoltage>
	 if (_voltage > 0) _voltage_multiplier *= (((double) value / _voltage));
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <hlw8012_expected_Activevoltage+0x74>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fd3e 	bl	80010fc <__aeabi_fcmpgt>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d100      	bne.n	8004688 <hlw8012_expected_Activevoltage+0x38>
}
 8004686:	e018      	b.n	80046ba <hlw8012_expected_Activevoltage+0x6a>
	 if (_voltage > 0) _voltage_multiplier *= (((double) value / _voltage));
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <hlw8012_expected_Activevoltage+0x74>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb fecb 	bl	8000428 <__aeabi_f2d>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800469a:	f7fc f847 	bl	800072c <__aeabi_ddiv>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <hlw8012_expected_Activevoltage+0x78>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb ff14 	bl	80004d8 <__aeabi_dmul>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4904      	ldr	r1, [pc, #16]	; (80046c8 <hlw8012_expected_Activevoltage+0x78>)
 80046b6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000234 	.word	0x20000234
 80046c8:	200007d0 	.word	0x200007d0

080046cc <hlw8012_expected_Activepower>:
void hlw8012_expected_Activepower(unsigned int value)
{
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	  if (_power == 0) hlw8012_getactivepower();
 80046d4:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <hlw8012_expected_Activepower+0x7c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fc fce5 	bl	80010ac <__aeabi_fcmpeq>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <hlw8012_expected_Activepower+0x20>
 80046e8:	f7ff ff0c 	bl	8004504 <hlw8012_getactivepower>
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <hlw8012_expected_Activepower+0x7c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fc fd01 	bl	80010fc <__aeabi_fcmpgt>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d100      	bne.n	8004702 <hlw8012_expected_Activepower+0x36>
}
 8004700:	e01d      	b.n	800473e <hlw8012_expected_Activepower+0x72>
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fb fe6e 	bl	80003e4 <__aeabi_ui2d>
 8004708:	4604      	mov	r4, r0
 800470a:	460d      	mov	r5, r1
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <hlw8012_expected_Activepower+0x7c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb fe89 	bl	8000428 <__aeabi_f2d>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fc f805 	bl	800072c <__aeabi_ddiv>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <hlw8012_expected_Activepower+0x80>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb fed2 	bl	80004d8 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4904      	ldr	r1, [pc, #16]	; (800474c <hlw8012_expected_Activepower+0x80>)
 800473a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bdb0      	pop	{r4, r5, r7, pc}
 8004746:	bf00      	nop
 8004748:	20000238 	.word	0x20000238
 800474c:	200007c8 	.word	0x200007c8

08004750 <hlw8012_calculate_default_multiplier>:
void hlw8012_calculate_default_multiplier()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	 _current_multiplier = ( 1000000.0 * 512 * V_REF / _current_resistor / 24.0 / F_OSC );
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <hlw8012_calculate_default_multiplier+0xf0>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	a133      	add	r1, pc, #204	; (adr r1, 8004828 <hlw8012_calculate_default_multiplier+0xd8>)
 800475c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004760:	f7fb ffe4 	bl	800072c <__aeabi_ddiv>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	4b34      	ldr	r3, [pc, #208]	; (8004844 <hlw8012_calculate_default_multiplier+0xf4>)
 8004772:	f7fb ffdb 	bl	800072c <__aeabi_ddiv>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	a32c      	add	r3, pc, #176	; (adr r3, 8004830 <hlw8012_calculate_default_multiplier+0xe0>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fb ffd2 	bl	800072c <__aeabi_ddiv>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	492e      	ldr	r1, [pc, #184]	; (8004848 <hlw8012_calculate_default_multiplier+0xf8>)
 800478e:	e9c1 2300 	strd	r2, r3, [r1]
	 _voltage_multiplier = ( 1000000.0 * 512 * V_REF * _voltage_resistor / 2.0 / F_OSC );
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <hlw8012_calculate_default_multiplier+0xfc>)
 8004794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004798:	a323      	add	r3, pc, #140	; (adr r3, 8004828 <hlw8012_calculate_default_multiplier+0xd8>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb fe9b 	bl	80004d8 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047b2:	f7fb ffbb 	bl	800072c <__aeabi_ddiv>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	a31c      	add	r3, pc, #112	; (adr r3, 8004830 <hlw8012_calculate_default_multiplier+0xe0>)
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	f7fb ffb2 	bl	800072c <__aeabi_ddiv>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4920      	ldr	r1, [pc, #128]	; (8004850 <hlw8012_calculate_default_multiplier+0x100>)
 80047ce:	e9c1 2300 	strd	r2, r3, [r1]
	 _power_multiplier = ( 1000000.0 * 128 * V_REF * V_REF * _voltage_resistor / _current_resistor / 48.0 / F_OSC );
 80047d2:	4b1e      	ldr	r3, [pc, #120]	; (800484c <hlw8012_calculate_default_multiplier+0xfc>)
 80047d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047d8:	a317      	add	r3, pc, #92	; (adr r3, 8004838 <hlw8012_calculate_default_multiplier+0xe8>)
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f7fb fe7b 	bl	80004d8 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <hlw8012_calculate_default_multiplier+0xf0>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f7fb ff9c 	bl	800072c <__aeabi_ddiv>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <hlw8012_calculate_default_multiplier+0x104>)
 8004802:	f7fb ff93 	bl	800072c <__aeabi_ddiv>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	a308      	add	r3, pc, #32	; (adr r3, 8004830 <hlw8012_calculate_default_multiplier+0xe0>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb ff8a 	bl	800072c <__aeabi_ddiv>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <hlw8012_calculate_default_multiplier+0x108>)
 800481e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	00000000 	.word	0x00000000
 800482c:	41d28a18 	.word	0x41d28a18
 8004830:	00000000 	.word	0x00000000
 8004834:	414b4e3c 	.word	0x414b4e3c
 8004838:	00000000 	.word	0x00000000
 800483c:	41c68681 	.word	0x41c68681
 8004840:	20000010 	.word	0x20000010
 8004844:	40380000 	.word	0x40380000
 8004848:	200007c0 	.word	0x200007c0
 800484c:	20000018 	.word	0x20000018
 8004850:	200007d0 	.word	0x200007d0
 8004854:	40480000 	.word	0x40480000
 8004858:	200007c8 	.word	0x200007c8

0800485c <hlw8012_setResistors>:

void hlw8012_setResistors( double current, double voltage_upstream, double voltage_downstream)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004866:	e9c7 2300 	strd	r2, r3, [r7]
	if (voltage_downstream > 0) {
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004876:	f7fc f8bf 	bl	80009f8 <__aeabi_dcmpgt>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d100      	bne.n	8004882 <hlw8012_setResistors+0x26>
	        _current_resistor = current;
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
	        hlw8012_calculate_default_multiplier();
	    }
}
 8004880:	e019      	b.n	80048b6 <hlw8012_setResistors+0x5a>
	        _current_resistor = current;
 8004882:	490f      	ldr	r1, [pc, #60]	; (80048c0 <hlw8012_setResistors+0x64>)
 8004884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004888:	e9c1 2300 	strd	r2, r3, [r1]
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
 800488c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004894:	f7fb fc6a 	bl	800016c <__adddf3>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a4:	f7fb ff42 	bl	800072c <__aeabi_ddiv>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4905      	ldr	r1, [pc, #20]	; (80048c4 <hlw8012_setResistors+0x68>)
 80048ae:	e9c1 2300 	strd	r2, r3, [r1]
	        hlw8012_calculate_default_multiplier();
 80048b2:	f7ff ff4d 	bl	8004750 <hlw8012_calculate_default_multiplier>
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000010 	.word	0x20000010
 80048c4:	20000018 	.word	0x20000018

080048c8 <hlw8012_calibrate>:
float cur_voltage_multi = 0;
float cur_power_multi = 0;


void hlw8012_calibrate()
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0

//	hlw8012_sel_low_volatge();
//	gb_unblockingDelay(2000);
//	hlw8012_getvoltage();

	hlw8012_expected_Activepower(165.0);
 80048cc:	20a5      	movs	r0, #165	; 0xa5
 80048ce:	f7ff fefd 	bl	80046cc <hlw8012_expected_Activepower>
 hlw8012_expected_Activevoltage(226.0);
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	491c      	ldr	r1, [pc, #112]	; (8004948 <hlw8012_calibrate+0x80>)
 80048d8:	f7ff feba 	bl	8004650 <hlw8012_expected_Activevoltage>
	hlw8012_expected_ActiveCurrent(0.730);
 80048dc:	a118      	add	r1, pc, #96	; (adr r1, 8004940 <hlw8012_calibrate+0x78>)
 80048de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e2:	f7ff fe75 	bl	80045d0 <hlw8012_expected_ActiveCurrent>

	GB_printString1(" New Current Multiplier");
 80048e6:	4819      	ldr	r0, [pc, #100]	; (800494c <hlw8012_calibrate+0x84>)
 80048e8:	f7fc fc82 	bl	80011f0 <GB_printString1>
	//GB_decimel1(hlw8012_getcurrent_multiplier());
	cur_current_multi = hlw8012_getcurrent_multiplier();
 80048ec:	f7ff fd02 	bl	80042f4 <hlw8012_getcurrent_multiplier>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	f7fc f8e6 	bl	8000ac8 <__aeabi_d2f>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <hlw8012_calibrate+0x88>)
 8004900:	6013      	str	r3, [r2, #0]

	GB_printString1(" New Voltage Multiplier");
 8004902:	4814      	ldr	r0, [pc, #80]	; (8004954 <hlw8012_calibrate+0x8c>)
 8004904:	f7fc fc74 	bl	80011f0 <GB_printString1>
	//GB_decimel1(hlw8012_getvoltage_multiplier());
	cur_voltage_multi = hlw8012_getvoltage_multiplier();
 8004908:	f7ff fd00 	bl	800430c <hlw8012_getvoltage_multiplier>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	f7fc f8d8 	bl	8000ac8 <__aeabi_d2f>
 8004918:	4603      	mov	r3, r0
 800491a:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <hlw8012_calibrate+0x90>)
 800491c:	6013      	str	r3, [r2, #0]

	GB_printString1(" New Power Multiplier");
 800491e:	480f      	ldr	r0, [pc, #60]	; (800495c <hlw8012_calibrate+0x94>)
 8004920:	f7fc fc66 	bl	80011f0 <GB_printString1>
	//GB_decimel1(hlw8012_getpower_multiplier());
	cur_power_multi = hlw8012_getpower_multiplier();
 8004924:	f7ff fcfe 	bl	8004324 <hlw8012_getpower_multiplier>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	f7fc f8ca 	bl	8000ac8 <__aeabi_d2f>
 8004934:	4603      	mov	r3, r0
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <hlw8012_calibrate+0x98>)
 8004938:	6013      	str	r3, [r2, #0]

}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	f5c28f5c 	.word	0xf5c28f5c
 8004944:	3fe75c28 	.word	0x3fe75c28
 8004948:	406c4000 	.word	0x406c4000
 800494c:	080098c8 	.word	0x080098c8
 8004950:	20000248 	.word	0x20000248
 8004954:	080098e0 	.word	0x080098e0
 8004958:	2000024c 	.word	0x2000024c
 800495c:	080098f8 	.word	0x080098f8
 8004960:	20000250 	.word	0x20000250

08004964 <I2C_Master_Send>:
static uint8_t GB_SSD1306_Buffer[GB_SSD1306_WIDTH * GB_SSD1306_HEIGHT / 8]; // buffer of 1024 bytes

I2C_HandleTypeDef hi2c2;

void I2C_Master_Send (uint8_t address, uint8_t *dt, uint16_t cnt)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af02      	add	r7, sp, #8
 800496a:	4603      	mov	r3, r0
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
 8004970:	4613      	mov	r3, r2
 8004972:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, cnt, 1000);
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	b299      	uxth	r1, r3
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800497e:	9200      	str	r2, [sp, #0]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	4803      	ldr	r0, [pc, #12]	; (8004990 <I2C_Master_Send+0x2c>)
 8004984:	f7fd fdb2 	bl	80024ec <HAL_I2C_Master_Transmit>

}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	200006dc 	.word	0x200006dc

08004994 <ssd1306_init>:

/* Private variable */
static GB_SSD1306_t GB_SSD1306;

void ssd1306_init()
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFF); //0xAE
 8004998:	20ae      	movs	r0, #174	; 0xae
 800499a:	f000 f855 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_CLOCK_DIV); //0xD5
 800499e:	20d5      	movs	r0, #213	; 0xd5
 80049a0:	f000 f852 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x80);// A[7:4] = 1000, A[3:0] = 0000(clock divide ratio = 1)
 80049a4:	2080      	movs	r0, #128	; 0x80
 80049a6:	f000 f84f 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_MULTIPLEX_RATIO); //0xA8
 80049aa:	20a8      	movs	r0, #168	; 0xa8
 80049ac:	f000 f84c 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x3F);
 80049b0:	203f      	movs	r0, #63	; 0x3f
 80049b2:	f000 f849 	bl	8004a48 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFFSET); //0xD3
 80049b6:	20d3      	movs	r0, #211	; 0xd3
 80049b8:	f000 f846 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x00); //Display start line starts from COM0 only, that is from ROW0
 80049bc:	2000      	movs	r0, #0
 80049be:	f000 f843 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40 | 0x00); //Display Start line: starting address of display RAM, by selecting a value from 0 to 63.
 80049c2:	2040      	movs	r0, #64	; 0x40
 80049c4:	f000 f840 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CHARGEUP);//0x8D We use internal charge pump
 80049c8:	208d      	movs	r0, #141	; 0x8d
 80049ca:	f000 f83d 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x14);
 80049ce:	2014      	movs	r0, #20
 80049d0:	f000 f83a 	bl	8004a48 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_SET_MEMORY_ADDRESSING_COMMAND); //0x20
 80049d4:	2020      	movs	r0, #32
 80049d6:	f000 f837 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_HORIZONTAL_ADDRESSING); //0x00
 80049da:	2000      	movs	r0, #0
 80049dc:	f000 f834 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_SEGMENT_REMAPPING_COM127_SEG0); //0xA0
 80049e0:	20a1      	movs	r0, #161	; 0xa1
 80049e2:	f000 f831 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_SCAN_DIRECTION_REMAPPED_MODE); //0xC8
 80049e6:	20c8      	movs	r0, #200	; 0xc8
 80049e8:	f000 f82e 	bl	8004a48 <ssd1306_sendcommand>


	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_COMMAND); //0xDA
 80049ec:	20da      	movs	r0, #218	; 0xda
 80049ee:	f000 f82b 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_ALTERNATE_DISABLE_REMAP);//0x02
 80049f2:	2012      	movs	r0, #18
 80049f4:	f000 f828 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CONTRAST); //0x81
 80049f8:	2081      	movs	r0, #129	; 0x81
 80049fa:	f000 f825 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xCF);
 80049fe:	20cf      	movs	r0, #207	; 0xcf
 8004a00:	f000 f822 	bl	8004a48 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PRECHARGE);//0xD9
 8004a04:	20d9      	movs	r0, #217	; 0xd9
 8004a06:	f000 f81f 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xF1);
 8004a0a:	20f1      	movs	r0, #241	; 0xf1
 8004a0c:	f000 f81c 	bl	8004a48 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_VCOMH_SELECT_COMMAND);
 8004a10:	20db      	movs	r0, #219	; 0xdb
 8004a12:	f000 f819 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40); // to be checked
 8004a16:	2040      	movs	r0, #64	; 0x40
 8004a18:	f000 f816 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_RESUME);//0xA4
 8004a1c:	20a4      	movs	r0, #164	; 0xa4
 8004a1e:	f000 f813 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_NORMAL_DISPLAY); //0xA6
 8004a22:	20a6      	movs	r0, #166	; 0xa6
 8004a24:	f000 f810 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_ON);
 8004a28:	20af      	movs	r0, #175	; 0xaf
 8004a2a:	f000 f80d 	bl	8004a48 <ssd1306_sendcommand>
//	gb_i2c_master_stop_generation(); // STOP Condition is generated
//	delay_ms(100);


	///Set default values /
		GB_SSD1306.CurrentX = 0;
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <ssd1306_init+0xb0>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	801a      	strh	r2, [r3, #0]
		GB_SSD1306.CurrentY = 0;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <ssd1306_init+0xb0>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	805a      	strh	r2, [r3, #2]

	// Initialized OK
	GB_SSD1306.Initialized = 1;
 8004a3a:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <ssd1306_init+0xb0>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	715a      	strb	r2, [r3, #5]

}
 8004a40:	bf00      	nop
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000654 	.word	0x20000654

08004a48 <ssd1306_sendcommand>:

void ssd1306_sendcommand(uint8_t command)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
	  uint8_t tx[2];
	  tx[0] = GB_SSD1306_CONTROL_BYTE_FOR_COMMAND;
 8004a52:	2300      	movs	r3, #0
 8004a54:	733b      	strb	r3, [r7, #12]
	  tx[1] = command;
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_WA , tx, 2, HAL_MAX_DELAY);
 8004a5a:	f107 020c 	add.w	r2, r7, #12
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2302      	movs	r3, #2
 8004a66:	2178      	movs	r1, #120	; 0x78
 8004a68:	4803      	ldr	r0, [pc, #12]	; (8004a78 <ssd1306_sendcommand+0x30>)
 8004a6a:	f7fd fd3f 	bl	80024ec <HAL_I2C_Master_Transmit>
//	gb_i2c_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
//	gb_i2c_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_COMMAND); //0x00
//	gb_i2c_master_send_byte(command);
//	gb_i2c_master_stop_generation(); // STOP Condition is generated

}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200006dc 	.word	0x200006dc

08004a7c <ssd1306_update_data>:
//	gb_i2c_master_send_byte(data);
//	gb_i2c_master_stop_generation(); // STOP Condition is generated
//
}
void ssd1306_update_data()
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
	ssd1306_sendcommand(GB_SSD1306_SET_COLUMN_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8004a82:	2021      	movs	r0, #33	; 0x21
 8004a84:	f7ff ffe0 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_START_ADDRESS_HV_ADDRESSING_MODE);
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f7ff ffdd 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_END_ADDRESS_HV_ADDRESSING_MODE);
 8004a8e:	207f      	movs	r0, #127	; 0x7f
 8004a90:	f7ff ffda 	bl	8004a48 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PAGE_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8004a94:	2022      	movs	r0, #34	; 0x22
 8004a96:	f7ff ffd7 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_START_ADDRESS_HV_ADDRESSING_MODE);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f7ff ffd4 	bl	8004a48 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_END_ADDRESS_HV_ADDRESSING_MODE);
 8004aa0:	207d      	movs	r0, #125	; 0x7d
 8004aa2:	f7ff ffd1 	bl	8004a48 <ssd1306_sendcommand>

	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	71fb      	strb	r3, [r7, #7]
 8004aaa:	e01a      	b.n	8004ae2 <ssd1306_update_data+0x66>

		  uint8_t tx[2];
		  	tx[0] = GB_SSD1306_CONTROL_BYTE_FOR_DATA;
 8004aac:	2340      	movs	r3, #64	; 0x40
 8004aae:	713b      	strb	r3, [r7, #4]
		  	//tx[2] = data;

		 // gb_i2c_start_condition_w(); // Start Condition For Writing
		  //gb_i2c_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
		  //gb_i2c_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_DATA);
      for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	71bb      	strb	r3, [r7, #6]
 8004ab4:	e00f      	b.n	8004ad6 <ssd1306_update_data+0x5a>
    	  tx[1] = GB_SSD1306_Buffer[packet*16+packet_byte];
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	011a      	lsls	r2, r3, #4
 8004aba:	79bb      	ldrb	r3, [r7, #6]
 8004abc:	4413      	add	r3, r2
 8004abe:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <ssd1306_update_data+0x78>)
 8004ac0:	5cd3      	ldrb	r3, [r2, r3]
 8004ac2:	717b      	strb	r3, [r7, #5]
		//	I2C_Master_Send(SSD1306_WA , &GB_SSD1306_Buffer[packet*16+packet_byte], 1);
   	  I2C_Master_Send(SSD1306_WA , tx, 2);
 8004ac4:	1d3b      	adds	r3, r7, #4
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	2078      	movs	r0, #120	; 0x78
 8004acc:	f7ff ff4a 	bl	8004964 <I2C_Master_Send>
      for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8004ad0:	79bb      	ldrb	r3, [r7, #6]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	71bb      	strb	r3, [r7, #6]
 8004ad6:	79bb      	ldrb	r3, [r7, #6]
 8004ad8:	2b0f      	cmp	r3, #15
 8004ada:	d9ec      	bls.n	8004ab6 <ssd1306_update_data+0x3a>
	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	71fb      	strb	r3, [r7, #7]
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	2b3f      	cmp	r3, #63	; 0x3f
 8004ae6:	d9e1      	bls.n	8004aac <ssd1306_update_data+0x30>
	        //	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_WA , GB_SSD1306_Buffer, sizeof(GB_SSD1306_Buffer), HAL_MAX_DELAY);
	        	//gb_i2c_master_send_byte(GB_SSD1306_Buffer[packet*16+packet_byte]);
	       }
	  }
	     //   gb_i2c_master_stop_generation(); // STOP Condition is generated
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000254 	.word	0x20000254

08004af8 <ssd1306_GotoXY>:
/*
 * x is column[0-127]
 * y is row[0-63]
 */
void ssd1306_GotoXY( uint16_t x,uint16_t y)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	460a      	mov	r2, r1
 8004b02:	80fb      	strh	r3, [r7, #6]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
		GB_SSD1306.CurrentX = x;
 8004b08:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <ssd1306_GotoXY+0x28>)
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	8013      	strh	r3, [r2, #0]
		GB_SSD1306.CurrentY = y;
 8004b0e:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <ssd1306_GotoXY+0x28>)
 8004b10:	88bb      	ldrh	r3, [r7, #4]
 8004b12:	8053      	strh	r3, [r2, #2]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000654 	.word	0x20000654

08004b24 <ssd1306_clear>:
}
/*
 *  Fills entire LCD with desired color
 */
void ssd1306_clear(GB_SSD1306_COLOR_t color)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
	memset(GB_SSD1306_Buffer, (color == GB_SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(GB_SSD1306_Buffer));
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <ssd1306_clear+0x14>
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <ssd1306_clear+0x16>
 8004b38:	23ff      	movs	r3, #255	; 0xff
 8004b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4803      	ldr	r0, [pc, #12]	; (8004b50 <ssd1306_clear+0x2c>)
 8004b42:	f000 fa6b 	bl	800501c <memset>
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000254 	.word	0x20000254

08004b54 <ssd1306_print_char>:
 * 5 is no of columns: font width // x is width : CurrentX :0-127
 * 8 is no of rows: font height   //y is height : CurrentY : 0-63
 *
 */
char ssd1306_print_char(char ch, GB_SSD1306_COLOR_t color)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	460a      	mov	r2, r1
 8004b5e:	71fb      	strb	r3, [r7, #7]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71bb      	strb	r3, [r7, #6]

	uint32_t Font_byte_value;

	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	e034      	b.n	8004bd4 <ssd1306_print_char+0x80>
	{
			Font_byte_value = SSD1306_font5x8[(ch - 32)][i]; //mapping the vales of bits for rinting the character ch
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	f1a3 0220 	sub.w	r2, r3, #32
 8004b70:	491d      	ldr	r1, [pc, #116]	; (8004be8 <ssd1306_print_char+0x94>)
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	18ca      	adds	r2, r1, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	60bb      	str	r3, [r7, #8]

			if (color == GB_SSD1306_COLOR_WHITE)
 8004b82:	79bb      	ldrb	r3, [r7, #6]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10d      	bne.n	8004ba4 <ssd1306_print_char+0x50>
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = Font_byte_value;
 8004b88:	4b18      	ldr	r3, [pc, #96]	; (8004bec <ssd1306_print_char+0x98>)
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <ssd1306_print_char+0x98>)
 8004b90:	885b      	ldrh	r3, [r3, #2]
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	01db      	lsls	r3, r3, #7
 8004b98:	4413      	add	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	b2d1      	uxtb	r1, r2
 8004b9e:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <ssd1306_print_char+0x9c>)
 8004ba0:	54d1      	strb	r1, [r2, r3]
 8004ba2:	e00e      	b.n	8004bc2 <ssd1306_print_char+0x6e>
			}else
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = ~Font_byte_value;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	4b10      	ldr	r3, [pc, #64]	; (8004bec <ssd1306_print_char+0x98>)
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <ssd1306_print_char+0x98>)
 8004bb0:	885b      	ldrh	r3, [r3, #2]
 8004bb2:	08db      	lsrs	r3, r3, #3
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	440b      	add	r3, r1
 8004bba:	43d2      	mvns	r2, r2
 8004bbc:	b2d1      	uxtb	r1, r2
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <ssd1306_print_char+0x9c>)
 8004bc0:	54d1      	strb	r1, [r2, r3]
			}

		  GB_SSD1306.CurrentX ++;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <ssd1306_print_char+0x98>)
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <ssd1306_print_char+0x98>)
 8004bcc:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d9c7      	bls.n	8004b6a <ssd1306_print_char+0x16>
		}

	/* Return character written */
		return ch;
 8004bda:	79fb      	ldrb	r3, [r7, #7]

}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	08009930 	.word	0x08009930
 8004bec:	20000654 	.word	0x20000654
 8004bf0:	20000254 	.word	0x20000254

08004bf4 <ssd1306_print_string>:

char ssd1306_print_string(char* str, GB_SSD1306_COLOR_t color)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
	while (*str)
 8004c00:	e008      	b.n	8004c14 <ssd1306_print_string+0x20>
	{
		ssd1306_print_char(*str++, (GB_SSD1306_COLOR_t) color);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff ffa0 	bl	8004b54 <ssd1306_print_char>
	while (*str)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f2      	bne.n	8004c02 <ssd1306_print_string+0xe>
	}
	/* Everything OK, zero should be returned */
		return *str;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <ssd1306_float>:
		ssd1306_print_char(gb_buf[gb_ptr], (GB_SSD1306_COLOR_t) color);
	}
}

void ssd1306_float(float gb_value, GB_SSD1306_COLOR_t color)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
	char gb_float_buff[10];
	sprintf(gb_float_buff,"%.2f",gb_value);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fb fbf7 	bl	8000428 <__aeabi_f2d>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	f107 000c 	add.w	r0, r7, #12
 8004c42:	4907      	ldr	r1, [pc, #28]	; (8004c60 <ssd1306_float+0x38>)
 8004c44:	f001 f868 	bl	8005d18 <siprintf>
	ssd1306_print_string(gb_float_buff,(GB_SSD1306_COLOR_t) color );
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	f107 030c 	add.w	r3, r7, #12
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ffcf 	bl	8004bf4 <ssd1306_print_string>

}
 8004c56:	bf00      	nop
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	08009910 	.word	0x08009910

08004c64 <tim4_ch1_capture_config>:
float TIM4_Period = 0;
float TIM4_Width = 0;
float TIM4_Period_Current = 0;

void tim4_ch1_capture_config()
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	   TIM4->DIER |= TIM_DIER_CC1IE; //capture interrupt enabled
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c6e:	f043 0302 	orr.w	r3, r3, #2
 8004c72:	60d3      	str	r3, [r2, #12]
	   TIM4->CCER |= TIM_CCER_CC1E; // timer 4 channel1 configured for capture enabled
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6213      	str	r3, [r2, #32]
	   TIM4->CCER |= TIM_CCER_CC2E; // timer 4 channel1 configured for capture enabled
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c86:	f043 0310 	orr.w	r3, r3, #16
 8004c8a:	6213      	str	r3, [r2, #32]
	   TIM4->CR1 |= TIM_CR1_CEN; //enable the time2
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <tim4_ch1_capture_config+0x3c>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <tim4_ch1_capture_unconfig>:

void tim4_ch1_capture_unconfig()
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
		   TIM4->DIER &= ~TIM_DIER_CC1IE; //capture interrupt disabled
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cae:	f023 0302 	bic.w	r3, r3, #2
 8004cb2:	60d3      	str	r3, [r2, #12]
		   TIM4->CCER &= ~TIM_CCER_CC1E; // timer 4 channel1 unconfigured for capture enabled
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6213      	str	r3, [r2, #32]
		   TIM4->CCER &= ~TIM_CCER_CC2E; //timer 4 channel2 unconfigured for capture enabled
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4a06      	ldr	r2, [pc, #24]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	6213      	str	r3, [r2, #32]
		   TIM4->CR1 &= ~TIM_CR1_CEN; //disabled the timer
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <tim4_ch1_capture_unconfig+0x3c>)
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	6013      	str	r3, [r2, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	40000800 	.word	0x40000800

08004ce4 <tim3_ch2_capture_config>:

void tim3_ch2_capture_config()
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
	   TIM3->DIER |= TIM_DIER_CC2IE; //capture interrupt enable
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004cee:	f043 0304 	orr.w	r3, r3, #4
 8004cf2:	60d3      	str	r3, [r2, #12]
	   TIM3->CCER |= TIM_CCER_CC1E; // timer 3 channel1 configured for capture enabled
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6213      	str	r3, [r2, #32]
	   TIM3->CCER |= TIM_CCER_CC2E; //timer 3 channel2 configured for capture enabled
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004d06:	f043 0310 	orr.w	r3, r3, #16
 8004d0a:	6213      	str	r3, [r2, #32]
	   TIM3->CR1 |= TIM_CR1_CEN; //enable the timer
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a03      	ldr	r2, [pc, #12]	; (8004d20 <tim3_ch2_capture_config+0x3c>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	6013      	str	r3, [r2, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	40000400 	.word	0x40000400

08004d24 <tim3_ch2_capture_unconfig>:

void tim3_ch2_capture_unconfig()
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
		   TIM3->DIER &= ~TIM_DIER_CC2IE; //capture interrupt enable
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	60d3      	str	r3, [r2, #12]
		   TIM3->CCER &= ~TIM_CCER_CC1E; // timer 3 channel1 unconfigured for capture enabled
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6213      	str	r3, [r2, #32]
		   TIM3->CCER &= ~TIM_CCER_CC2E; ////timer 3 channel2 unconfigured for capture enabled
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	6213      	str	r3, [r2, #32]
		   TIM3->CR1 &= ~TIM_CR1_CEN; //disable the timer
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <tim3_ch2_capture_unconfig+0x3c>)
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	40000400 	.word	0x40000400

08004d64 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC2) != RESET)   // Capture Compare Event 1
 8004d68:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d15a      	bne.n	8004e2c <TIM3_IRQHandler+0xc8>
	  {
	    if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC2) != RESET)   // Cross check that whether source of Interrupt is configured
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d153      	bne.n	8004e2c <TIM3_IRQHandler+0xc8>
		// if(TIM3->DIER & TIM_DIER_CC1IE)
	    {
	        __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC2);
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0204 	mvn.w	r2, #4
 8004d8c:	611a      	str	r2, [r3, #16]
	        htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004d90:	2202      	movs	r2, #2
 8004d92:	771a      	strb	r2, [r3, #28]

	        /* Input capture event */
	        if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <TIM3_IRQHandler+0xc8>
	        {
	        	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 2( for timer 3: pin PB5)
 8004da2:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004da4:	7f1b      	ldrb	r3, [r3, #28]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d140      	bne.n	8004e2c <TIM3_IRQHandler+0xc8>
	        						{
	        							// Read the IC value
	        							TIM3_IC2Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8004daa:	2104      	movs	r1, #4
 8004dac:	4820      	ldr	r0, [pc, #128]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004dae:	f7fe fda9 	bl	8003904 <HAL_TIM_ReadCapturedValue>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <TIM3_IRQHandler+0xd0>)
 8004db6:	6013      	str	r3, [r2, #0]

	        							if (TIM3_IC2Value != 0)
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <TIM3_IRQHandler+0xd0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d035      	beq.n	8004e2c <TIM3_IRQHandler+0xc8>
	        							{
	        								TIM3_IC1Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	481b      	ldr	r0, [pc, #108]	; (8004e30 <TIM3_IRQHandler+0xcc>)
 8004dc4:	f7fe fd9e 	bl	8003904 <HAL_TIM_ReadCapturedValue>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <TIM3_IRQHandler+0xd4>)
 8004dcc:	6013      	str	r3, [r2, #0]
	        								// calculate the Duty Cycle
	        								TIM3_Duty = (TIM3_IC1Value *100)/TIM3_IC2Value;
 8004dce:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <TIM3_IRQHandler+0xd4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2264      	movs	r2, #100	; 0x64
 8004dd4:	fb02 f203 	mul.w	r2, r2, r3
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <TIM3_IRQHandler+0xd0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb ff77 	bl	8000cd4 <__aeabi_ui2f>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM3_IRQHandler+0xd8>)
 8004dea:	6013      	str	r3, [r2, #0]
	        								TIM3_Frequency = 100000/TIM3_IC2Value;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <TIM3_IRQHandler+0xd0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM3_IRQHandler+0xdc>)
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb ff6c 	bl	8000cd4 <__aeabi_ui2f>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <TIM3_IRQHandler+0xe0>)
 8004e00:	6013      	str	r3, [r2, #0]
	        								TIM3_Period = 1000000/TIM3_Frequency;//(Perid is in microseconds)
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <TIM3_IRQHandler+0xe0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	480f      	ldr	r0, [pc, #60]	; (8004e48 <TIM3_IRQHandler+0xe4>)
 8004e0a:	f7fc f86f 	bl	8000eec <__aeabi_fdiv>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <TIM3_IRQHandler+0xe8>)
 8004e14:	601a      	str	r2, [r3, #0]
	        								TIM3_Width = TIM3_Period/2;  //(in microseconds)
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <TIM3_IRQHandler+0xe8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc f864 	bl	8000eec <__aeabi_fdiv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <TIM3_IRQHandler+0xec>)
 8004e2a:	601a      	str	r2, [r3, #0]
	        }
	    }
	  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000730 	.word	0x20000730
 8004e34:	20000660 	.word	0x20000660
 8004e38:	2000065c 	.word	0x2000065c
 8004e3c:	20000668 	.word	0x20000668
 8004e40:	000186a0 	.word	0x000186a0
 8004e44:	20000664 	.word	0x20000664
 8004e48:	49742400 	.word	0x49742400
 8004e4c:	2000066c 	.word	0x2000066c
 8004e50:	20000670 	.word	0x20000670

08004e54 <TIM3_getPeriod>:

float TIM3_getPeriod()
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
	return TIM3_Period;
 8004e58:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <TIM3_getPeriod+0x10>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	2000066c 	.word	0x2000066c

08004e68 <TIM3_setPeriod>:
	return TIM3_Frequency;

}

void TIM3_setPeriod(uint32_t value)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	TIM3_Period = value;
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fb ff2f 	bl	8000cd4 <__aeabi_ui2f>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4a02      	ldr	r2, [pc, #8]	; (8004e84 <TIM3_setPeriod+0x1c>)
 8004e7a:	6013      	str	r3, [r2, #0]

}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	2000066c 	.word	0x2000066c

08004e88 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_CC1) != RESET)   // Capture Compare Event 1
 8004e8c:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d15a      	bne.n	8004f50 <TIM4_IRQHandler+0xc8>
			  {
			    if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_CC1) != RESET)   // Cross check that whether source of Interrupt is configured
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d153      	bne.n	8004f50 <TIM4_IRQHandler+0xc8>
				// if(TIM3->DIER & TIM_DIER_CC1IE)
			    {
			        __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0202 	mvn.w	r2, #2
 8004eb0:	611a      	str	r2, [r3, #16]
			        htim4.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eb2:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	771a      	strb	r2, [r3, #28]

			        /* Input capture event */
			        if ((htim4.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) // cross check that if Input Capture Interrupt is their, if input capture event is their
 8004eb8:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <TIM4_IRQHandler+0xc8>
			        {
			        	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1( for timer 4: pin PB6)
 8004ec6:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004ec8:	7f1b      	ldrb	r3, [r3, #28]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d140      	bne.n	8004f50 <TIM4_IRQHandler+0xc8>
							{
								// Read the IC value
								TIM4_IC1Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	4820      	ldr	r0, [pc, #128]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004ed2:	f7fe fd17 	bl	8003904 <HAL_TIM_ReadCapturedValue>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <TIM4_IRQHandler+0xd0>)
 8004eda:	6013      	str	r3, [r2, #0]

								if (TIM4_IC1Value != 0)
 8004edc:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <TIM4_IRQHandler+0xd0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d035      	beq.n	8004f50 <TIM4_IRQHandler+0xc8>
								{
									TIM4_IC2Value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	481b      	ldr	r0, [pc, #108]	; (8004f54 <TIM4_IRQHandler+0xcc>)
 8004ee8:	f7fe fd0c 	bl	8003904 <HAL_TIM_ReadCapturedValue>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <TIM4_IRQHandler+0xd4>)
 8004ef0:	6013      	str	r3, [r2, #0]
									// calculate the Duty Cycle
									TIM4_Duty = (TIM4_IC2Value *100)/TIM4_IC1Value;
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <TIM4_IRQHandler+0xd4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2264      	movs	r2, #100	; 0x64
 8004ef8:	fb02 f203 	mul.w	r2, r2, r3
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <TIM4_IRQHandler+0xd0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fb fee5 	bl	8000cd4 <__aeabi_ui2f>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <TIM4_IRQHandler+0xd8>)
 8004f0e:	6013      	str	r3, [r2, #0]
									TIM4_Frequency = 100000/TIM4_IC1Value;
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <TIM4_IRQHandler+0xd0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <TIM4_IRQHandler+0xdc>)
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb feda 	bl	8000cd4 <__aeabi_ui2f>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <TIM4_IRQHandler+0xe0>)
 8004f24:	6013      	str	r3, [r2, #0]
									TIM4_Period = 1000000/TIM4_Frequency;//(Perid is in microseconds)
 8004f26:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <TIM4_IRQHandler+0xe0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	480f      	ldr	r0, [pc, #60]	; (8004f6c <TIM4_IRQHandler+0xe4>)
 8004f2e:	f7fb ffdd 	bl	8000eec <__aeabi_fdiv>
 8004f32:	4603      	mov	r3, r0
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <TIM4_IRQHandler+0xe8>)
 8004f38:	601a      	str	r2, [r3, #0]
									TIM4_Width = TIM4_Period/2;  //(in microseconds)
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <TIM4_IRQHandler+0xe8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb ffd2 	bl	8000eec <__aeabi_fdiv>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <TIM4_IRQHandler+0xec>)
 8004f4e:	601a      	str	r2, [r3, #0]
							}
			        }
			    }
			  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8004f50:	bf00      	nop
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000694 	.word	0x20000694
 8004f58:	20000674 	.word	0x20000674
 8004f5c:	20000678 	.word	0x20000678
 8004f60:	20000680 	.word	0x20000680
 8004f64:	000186a0 	.word	0x000186a0
 8004f68:	2000067c 	.word	0x2000067c
 8004f6c:	49742400 	.word	0x49742400
 8004f70:	20000684 	.word	0x20000684
 8004f74:	20000688 	.word	0x20000688

08004f78 <TIM4_getPeriod>:

float TIM4_getPeriod()
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
	return TIM4_Period;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <TIM4_getPeriod+0x10>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	20000684 	.word	0x20000684

08004f8c <TIM4_setPeriod>:
	return TIM4_Frequency;

}

void TIM4_setPeriod(uint32_t value)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	TIM4_Period = value;
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fb fe9d 	bl	8000cd4 <__aeabi_ui2f>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4a02      	ldr	r2, [pc, #8]	; (8004fa8 <TIM4_setPeriod+0x1c>)
 8004f9e:	6013      	str	r3, [r2, #0]

}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000684 	.word	0x20000684

08004fac <__errno>:
 8004fac:	4b01      	ldr	r3, [pc, #4]	; (8004fb4 <__errno+0x8>)
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000020 	.word	0x20000020

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	2600      	movs	r6, #0
 8004fbc:	4d0c      	ldr	r5, [pc, #48]	; (8004ff0 <__libc_init_array+0x38>)
 8004fbe:	4c0d      	ldr	r4, [pc, #52]	; (8004ff4 <__libc_init_array+0x3c>)
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	f004 fc2a 	bl	8009820 <_init>
 8004fcc:	2600      	movs	r6, #0
 8004fce:	4d0a      	ldr	r5, [pc, #40]	; (8004ff8 <__libc_init_array+0x40>)
 8004fd0:	4c0a      	ldr	r4, [pc, #40]	; (8004ffc <__libc_init_array+0x44>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08009fc4 	.word	0x08009fc4
 8004ff4:	08009fc4 	.word	0x08009fc4
 8004ff8:	08009fc4 	.word	0x08009fc4
 8004ffc:	08009fc8 	.word	0x08009fc8

08005000 <memcpy>:
 8005000:	440a      	add	r2, r1
 8005002:	4291      	cmp	r1, r2
 8005004:	f100 33ff 	add.w	r3, r0, #4294967295
 8005008:	d100      	bne.n	800500c <memcpy+0xc>
 800500a:	4770      	bx	lr
 800500c:	b510      	push	{r4, lr}
 800500e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005012:	4291      	cmp	r1, r2
 8005014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005018:	d1f9      	bne.n	800500e <memcpy+0xe>
 800501a:	bd10      	pop	{r4, pc}

0800501c <memset>:
 800501c:	4603      	mov	r3, r0
 800501e:	4402      	add	r2, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <__cvt>:
 800502c:	2b00      	cmp	r3, #0
 800502e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005032:	461f      	mov	r7, r3
 8005034:	bfbb      	ittet	lt
 8005036:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800503a:	461f      	movlt	r7, r3
 800503c:	2300      	movge	r3, #0
 800503e:	232d      	movlt	r3, #45	; 0x2d
 8005040:	b088      	sub	sp, #32
 8005042:	4614      	mov	r4, r2
 8005044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005046:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005048:	7013      	strb	r3, [r2, #0]
 800504a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800504c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005050:	f023 0820 	bic.w	r8, r3, #32
 8005054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005058:	d005      	beq.n	8005066 <__cvt+0x3a>
 800505a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800505e:	d100      	bne.n	8005062 <__cvt+0x36>
 8005060:	3501      	adds	r5, #1
 8005062:	2302      	movs	r3, #2
 8005064:	e000      	b.n	8005068 <__cvt+0x3c>
 8005066:	2303      	movs	r3, #3
 8005068:	aa07      	add	r2, sp, #28
 800506a:	9204      	str	r2, [sp, #16]
 800506c:	aa06      	add	r2, sp, #24
 800506e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005072:	e9cd 3500 	strd	r3, r5, [sp]
 8005076:	4622      	mov	r2, r4
 8005078:	463b      	mov	r3, r7
 800507a:	f001 fda1 	bl	8006bc0 <_dtoa_r>
 800507e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005082:	4606      	mov	r6, r0
 8005084:	d102      	bne.n	800508c <__cvt+0x60>
 8005086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005088:	07db      	lsls	r3, r3, #31
 800508a:	d522      	bpl.n	80050d2 <__cvt+0xa6>
 800508c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005090:	eb06 0905 	add.w	r9, r6, r5
 8005094:	d110      	bne.n	80050b8 <__cvt+0x8c>
 8005096:	7833      	ldrb	r3, [r6, #0]
 8005098:	2b30      	cmp	r3, #48	; 0x30
 800509a:	d10a      	bne.n	80050b2 <__cvt+0x86>
 800509c:	2200      	movs	r2, #0
 800509e:	2300      	movs	r3, #0
 80050a0:	4620      	mov	r0, r4
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80050a8:	b918      	cbnz	r0, 80050b2 <__cvt+0x86>
 80050aa:	f1c5 0501 	rsb	r5, r5, #1
 80050ae:	f8ca 5000 	str.w	r5, [sl]
 80050b2:	f8da 3000 	ldr.w	r3, [sl]
 80050b6:	4499      	add	r9, r3
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4620      	mov	r0, r4
 80050be:	4639      	mov	r1, r7
 80050c0:	f7fb fc72 	bl	80009a8 <__aeabi_dcmpeq>
 80050c4:	b108      	cbz	r0, 80050ca <__cvt+0x9e>
 80050c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80050ca:	2230      	movs	r2, #48	; 0x30
 80050cc:	9b07      	ldr	r3, [sp, #28]
 80050ce:	454b      	cmp	r3, r9
 80050d0:	d307      	bcc.n	80050e2 <__cvt+0xb6>
 80050d2:	4630      	mov	r0, r6
 80050d4:	9b07      	ldr	r3, [sp, #28]
 80050d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050d8:	1b9b      	subs	r3, r3, r6
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	b008      	add	sp, #32
 80050de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e2:	1c59      	adds	r1, r3, #1
 80050e4:	9107      	str	r1, [sp, #28]
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e7f0      	b.n	80050cc <__cvt+0xa0>

080050ea <__exponent>:
 80050ea:	4603      	mov	r3, r0
 80050ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ee:	2900      	cmp	r1, #0
 80050f0:	f803 2b02 	strb.w	r2, [r3], #2
 80050f4:	bfb6      	itet	lt
 80050f6:	222d      	movlt	r2, #45	; 0x2d
 80050f8:	222b      	movge	r2, #43	; 0x2b
 80050fa:	4249      	neglt	r1, r1
 80050fc:	2909      	cmp	r1, #9
 80050fe:	7042      	strb	r2, [r0, #1]
 8005100:	dd2b      	ble.n	800515a <__exponent+0x70>
 8005102:	f10d 0407 	add.w	r4, sp, #7
 8005106:	46a4      	mov	ip, r4
 8005108:	270a      	movs	r7, #10
 800510a:	fb91 f6f7 	sdiv	r6, r1, r7
 800510e:	460a      	mov	r2, r1
 8005110:	46a6      	mov	lr, r4
 8005112:	fb07 1516 	mls	r5, r7, r6, r1
 8005116:	2a63      	cmp	r2, #99	; 0x63
 8005118:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800511c:	4631      	mov	r1, r6
 800511e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005122:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005126:	dcf0      	bgt.n	800510a <__exponent+0x20>
 8005128:	3130      	adds	r1, #48	; 0x30
 800512a:	f1ae 0502 	sub.w	r5, lr, #2
 800512e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005132:	4629      	mov	r1, r5
 8005134:	1c44      	adds	r4, r0, #1
 8005136:	4561      	cmp	r1, ip
 8005138:	d30a      	bcc.n	8005150 <__exponent+0x66>
 800513a:	f10d 0209 	add.w	r2, sp, #9
 800513e:	eba2 020e 	sub.w	r2, r2, lr
 8005142:	4565      	cmp	r5, ip
 8005144:	bf88      	it	hi
 8005146:	2200      	movhi	r2, #0
 8005148:	4413      	add	r3, r2
 800514a:	1a18      	subs	r0, r3, r0
 800514c:	b003      	add	sp, #12
 800514e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005150:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005154:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005158:	e7ed      	b.n	8005136 <__exponent+0x4c>
 800515a:	2330      	movs	r3, #48	; 0x30
 800515c:	3130      	adds	r1, #48	; 0x30
 800515e:	7083      	strb	r3, [r0, #2]
 8005160:	70c1      	strb	r1, [r0, #3]
 8005162:	1d03      	adds	r3, r0, #4
 8005164:	e7f1      	b.n	800514a <__exponent+0x60>
	...

08005168 <_printf_float>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	b091      	sub	sp, #68	; 0x44
 800516e:	460c      	mov	r4, r1
 8005170:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005174:	4616      	mov	r6, r2
 8005176:	461f      	mov	r7, r3
 8005178:	4605      	mov	r5, r0
 800517a:	f002 fe75 	bl	8007e68 <_localeconv_r>
 800517e:	6803      	ldr	r3, [r0, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	f7fa ffe4 	bl	8000150 <strlen>
 8005188:	2300      	movs	r3, #0
 800518a:	930e      	str	r3, [sp, #56]	; 0x38
 800518c:	f8d8 3000 	ldr.w	r3, [r8]
 8005190:	900a      	str	r0, [sp, #40]	; 0x28
 8005192:	3307      	adds	r3, #7
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	f103 0208 	add.w	r2, r3, #8
 800519c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051a0:	f8d4 b000 	ldr.w	fp, [r4]
 80051a4:	f8c8 2000 	str.w	r2, [r8]
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80051b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80051b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295
 80051be:	4640      	mov	r0, r8
 80051c0:	4b9c      	ldr	r3, [pc, #624]	; (8005434 <_printf_float+0x2cc>)
 80051c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c4:	f7fb fc22 	bl	8000a0c <__aeabi_dcmpun>
 80051c8:	bb70      	cbnz	r0, 8005228 <_printf_float+0xc0>
 80051ca:	f04f 32ff 	mov.w	r2, #4294967295
 80051ce:	4640      	mov	r0, r8
 80051d0:	4b98      	ldr	r3, [pc, #608]	; (8005434 <_printf_float+0x2cc>)
 80051d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d4:	f7fb fbfc 	bl	80009d0 <__aeabi_dcmple>
 80051d8:	bb30      	cbnz	r0, 8005228 <_printf_float+0xc0>
 80051da:	2200      	movs	r2, #0
 80051dc:	2300      	movs	r3, #0
 80051de:	4640      	mov	r0, r8
 80051e0:	4651      	mov	r1, sl
 80051e2:	f7fb fbeb 	bl	80009bc <__aeabi_dcmplt>
 80051e6:	b110      	cbz	r0, 80051ee <_printf_float+0x86>
 80051e8:	232d      	movs	r3, #45	; 0x2d
 80051ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ee:	4b92      	ldr	r3, [pc, #584]	; (8005438 <_printf_float+0x2d0>)
 80051f0:	4892      	ldr	r0, [pc, #584]	; (800543c <_printf_float+0x2d4>)
 80051f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051f6:	bf94      	ite	ls
 80051f8:	4698      	movls	r8, r3
 80051fa:	4680      	movhi	r8, r0
 80051fc:	2303      	movs	r3, #3
 80051fe:	f04f 0a00 	mov.w	sl, #0
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	f02b 0304 	bic.w	r3, fp, #4
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	4633      	mov	r3, r6
 800520c:	4621      	mov	r1, r4
 800520e:	4628      	mov	r0, r5
 8005210:	9700      	str	r7, [sp, #0]
 8005212:	aa0f      	add	r2, sp, #60	; 0x3c
 8005214:	f000 f9d4 	bl	80055c0 <_printf_common>
 8005218:	3001      	adds	r0, #1
 800521a:	f040 8090 	bne.w	800533e <_printf_float+0x1d6>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	b011      	add	sp, #68	; 0x44
 8005224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005228:	4642      	mov	r2, r8
 800522a:	4653      	mov	r3, sl
 800522c:	4640      	mov	r0, r8
 800522e:	4651      	mov	r1, sl
 8005230:	f7fb fbec 	bl	8000a0c <__aeabi_dcmpun>
 8005234:	b148      	cbz	r0, 800524a <_printf_float+0xe2>
 8005236:	f1ba 0f00 	cmp.w	sl, #0
 800523a:	bfb8      	it	lt
 800523c:	232d      	movlt	r3, #45	; 0x2d
 800523e:	4880      	ldr	r0, [pc, #512]	; (8005440 <_printf_float+0x2d8>)
 8005240:	bfb8      	it	lt
 8005242:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005246:	4b7f      	ldr	r3, [pc, #508]	; (8005444 <_printf_float+0x2dc>)
 8005248:	e7d3      	b.n	80051f2 <_printf_float+0x8a>
 800524a:	6863      	ldr	r3, [r4, #4]
 800524c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	d142      	bne.n	80052da <_printf_float+0x172>
 8005254:	2306      	movs	r3, #6
 8005256:	6063      	str	r3, [r4, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	9206      	str	r2, [sp, #24]
 800525c:	aa0e      	add	r2, sp, #56	; 0x38
 800525e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005262:	aa0d      	add	r2, sp, #52	; 0x34
 8005264:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005268:	9203      	str	r2, [sp, #12]
 800526a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800526e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	4642      	mov	r2, r8
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4628      	mov	r0, r5
 800527c:	4653      	mov	r3, sl
 800527e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005280:	f7ff fed4 	bl	800502c <__cvt>
 8005284:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005286:	4680      	mov	r8, r0
 8005288:	2947      	cmp	r1, #71	; 0x47
 800528a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800528c:	d108      	bne.n	80052a0 <_printf_float+0x138>
 800528e:	1cc8      	adds	r0, r1, #3
 8005290:	db02      	blt.n	8005298 <_printf_float+0x130>
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	4299      	cmp	r1, r3
 8005296:	dd40      	ble.n	800531a <_printf_float+0x1b2>
 8005298:	f1a9 0902 	sub.w	r9, r9, #2
 800529c:	fa5f f989 	uxtb.w	r9, r9
 80052a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052a4:	d81f      	bhi.n	80052e6 <_printf_float+0x17e>
 80052a6:	464a      	mov	r2, r9
 80052a8:	3901      	subs	r1, #1
 80052aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052ae:	910d      	str	r1, [sp, #52]	; 0x34
 80052b0:	f7ff ff1b 	bl	80050ea <__exponent>
 80052b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b6:	4682      	mov	sl, r0
 80052b8:	1813      	adds	r3, r2, r0
 80052ba:	2a01      	cmp	r2, #1
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	dc02      	bgt.n	80052c6 <_printf_float+0x15e>
 80052c0:	6822      	ldr	r2, [r4, #0]
 80052c2:	07d2      	lsls	r2, r2, #31
 80052c4:	d501      	bpl.n	80052ca <_printf_float+0x162>
 80052c6:	3301      	adds	r3, #1
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d09b      	beq.n	800520a <_printf_float+0xa2>
 80052d2:	232d      	movs	r3, #45	; 0x2d
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	e797      	b.n	800520a <_printf_float+0xa2>
 80052da:	2947      	cmp	r1, #71	; 0x47
 80052dc:	d1bc      	bne.n	8005258 <_printf_float+0xf0>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ba      	bne.n	8005258 <_printf_float+0xf0>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7b7      	b.n	8005256 <_printf_float+0xee>
 80052e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052ea:	d118      	bne.n	800531e <_printf_float+0x1b6>
 80052ec:	2900      	cmp	r1, #0
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	dd0b      	ble.n	800530a <_printf_float+0x1a2>
 80052f2:	6121      	str	r1, [r4, #16]
 80052f4:	b913      	cbnz	r3, 80052fc <_printf_float+0x194>
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	07d0      	lsls	r0, r2, #31
 80052fa:	d502      	bpl.n	8005302 <_printf_float+0x19a>
 80052fc:	3301      	adds	r3, #1
 80052fe:	440b      	add	r3, r1
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	f04f 0a00 	mov.w	sl, #0
 8005306:	65a1      	str	r1, [r4, #88]	; 0x58
 8005308:	e7df      	b.n	80052ca <_printf_float+0x162>
 800530a:	b913      	cbnz	r3, 8005312 <_printf_float+0x1aa>
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	07d2      	lsls	r2, r2, #31
 8005310:	d501      	bpl.n	8005316 <_printf_float+0x1ae>
 8005312:	3302      	adds	r3, #2
 8005314:	e7f4      	b.n	8005300 <_printf_float+0x198>
 8005316:	2301      	movs	r3, #1
 8005318:	e7f2      	b.n	8005300 <_printf_float+0x198>
 800531a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800531e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005320:	4299      	cmp	r1, r3
 8005322:	db05      	blt.n	8005330 <_printf_float+0x1c8>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	6121      	str	r1, [r4, #16]
 8005328:	07d8      	lsls	r0, r3, #31
 800532a:	d5ea      	bpl.n	8005302 <_printf_float+0x19a>
 800532c:	1c4b      	adds	r3, r1, #1
 800532e:	e7e7      	b.n	8005300 <_printf_float+0x198>
 8005330:	2900      	cmp	r1, #0
 8005332:	bfcc      	ite	gt
 8005334:	2201      	movgt	r2, #1
 8005336:	f1c1 0202 	rsble	r2, r1, #2
 800533a:	4413      	add	r3, r2
 800533c:	e7e0      	b.n	8005300 <_printf_float+0x198>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	055a      	lsls	r2, r3, #21
 8005342:	d407      	bmi.n	8005354 <_printf_float+0x1ec>
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	4642      	mov	r2, r8
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	d12b      	bne.n	80053aa <_printf_float+0x242>
 8005352:	e764      	b.n	800521e <_printf_float+0xb6>
 8005354:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005358:	f240 80dd 	bls.w	8005516 <_printf_float+0x3ae>
 800535c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	f7fb fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8005368:	2800      	cmp	r0, #0
 800536a:	d033      	beq.n	80053d4 <_printf_float+0x26c>
 800536c:	2301      	movs	r3, #1
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	4a35      	ldr	r2, [pc, #212]	; (8005448 <_printf_float+0x2e0>)
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f af51 	beq.w	800521e <_printf_float+0xb6>
 800537c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005380:	429a      	cmp	r2, r3
 8005382:	db02      	blt.n	800538a <_printf_float+0x222>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	07d8      	lsls	r0, r3, #31
 8005388:	d50f      	bpl.n	80053aa <_printf_float+0x242>
 800538a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f af42 	beq.w	800521e <_printf_float+0xb6>
 800539a:	f04f 0800 	mov.w	r8, #0
 800539e:	f104 091a 	add.w	r9, r4, #26
 80053a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a4:	3b01      	subs	r3, #1
 80053a6:	4543      	cmp	r3, r8
 80053a8:	dc09      	bgt.n	80053be <_printf_float+0x256>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	079b      	lsls	r3, r3, #30
 80053ae:	f100 8102 	bmi.w	80055b6 <_printf_float+0x44e>
 80053b2:	68e0      	ldr	r0, [r4, #12]
 80053b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053b6:	4298      	cmp	r0, r3
 80053b8:	bfb8      	it	lt
 80053ba:	4618      	movlt	r0, r3
 80053bc:	e731      	b.n	8005222 <_printf_float+0xba>
 80053be:	2301      	movs	r3, #1
 80053c0:	464a      	mov	r2, r9
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	f43f af28 	beq.w	800521e <_printf_float+0xb6>
 80053ce:	f108 0801 	add.w	r8, r8, #1
 80053d2:	e7e6      	b.n	80053a2 <_printf_float+0x23a>
 80053d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dc38      	bgt.n	800544c <_printf_float+0x2e4>
 80053da:	2301      	movs	r3, #1
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	4a19      	ldr	r2, [pc, #100]	; (8005448 <_printf_float+0x2e0>)
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f af1a 	beq.w	800521e <_printf_float+0xb6>
 80053ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053ee:	4313      	orrs	r3, r2
 80053f0:	d102      	bne.n	80053f8 <_printf_float+0x290>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	07d9      	lsls	r1, r3, #31
 80053f6:	d5d8      	bpl.n	80053aa <_printf_float+0x242>
 80053f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053fc:	4631      	mov	r1, r6
 80053fe:	4628      	mov	r0, r5
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	f43f af0b 	beq.w	800521e <_printf_float+0xb6>
 8005408:	f04f 0900 	mov.w	r9, #0
 800540c:	f104 0a1a 	add.w	sl, r4, #26
 8005410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005412:	425b      	negs	r3, r3
 8005414:	454b      	cmp	r3, r9
 8005416:	dc01      	bgt.n	800541c <_printf_float+0x2b4>
 8005418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800541a:	e794      	b.n	8005346 <_printf_float+0x1de>
 800541c:	2301      	movs	r3, #1
 800541e:	4652      	mov	r2, sl
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	f43f aef9 	beq.w	800521e <_printf_float+0xb6>
 800542c:	f109 0901 	add.w	r9, r9, #1
 8005430:	e7ee      	b.n	8005410 <_printf_float+0x2a8>
 8005432:	bf00      	nop
 8005434:	7fefffff 	.word	0x7fefffff
 8005438:	08009b10 	.word	0x08009b10
 800543c:	08009b14 	.word	0x08009b14
 8005440:	08009b1c 	.word	0x08009b1c
 8005444:	08009b18 	.word	0x08009b18
 8005448:	08009b20 	.word	0x08009b20
 800544c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800544e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005450:	429a      	cmp	r2, r3
 8005452:	bfa8      	it	ge
 8005454:	461a      	movge	r2, r3
 8005456:	2a00      	cmp	r2, #0
 8005458:	4691      	mov	r9, r2
 800545a:	dc37      	bgt.n	80054cc <_printf_float+0x364>
 800545c:	f04f 0b00 	mov.w	fp, #0
 8005460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005464:	f104 021a 	add.w	r2, r4, #26
 8005468:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800546c:	ebaa 0309 	sub.w	r3, sl, r9
 8005470:	455b      	cmp	r3, fp
 8005472:	dc33      	bgt.n	80054dc <_printf_float+0x374>
 8005474:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005478:	429a      	cmp	r2, r3
 800547a:	db3b      	blt.n	80054f4 <_printf_float+0x38c>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	07da      	lsls	r2, r3, #31
 8005480:	d438      	bmi.n	80054f4 <_printf_float+0x38c>
 8005482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005484:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005486:	eba2 030a 	sub.w	r3, r2, sl
 800548a:	eba2 0901 	sub.w	r9, r2, r1
 800548e:	4599      	cmp	r9, r3
 8005490:	bfa8      	it	ge
 8005492:	4699      	movge	r9, r3
 8005494:	f1b9 0f00 	cmp.w	r9, #0
 8005498:	dc34      	bgt.n	8005504 <_printf_float+0x39c>
 800549a:	f04f 0800 	mov.w	r8, #0
 800549e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054a2:	f104 0a1a 	add.w	sl, r4, #26
 80054a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	eba3 0309 	sub.w	r3, r3, r9
 80054b0:	4543      	cmp	r3, r8
 80054b2:	f77f af7a 	ble.w	80053aa <_printf_float+0x242>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	f43f aeac 	beq.w	800521e <_printf_float+0xb6>
 80054c6:	f108 0801 	add.w	r8, r8, #1
 80054ca:	e7ec      	b.n	80054a6 <_printf_float+0x33e>
 80054cc:	4613      	mov	r3, r2
 80054ce:	4631      	mov	r1, r6
 80054d0:	4642      	mov	r2, r8
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	d1c0      	bne.n	800545c <_printf_float+0x2f4>
 80054da:	e6a0      	b.n	800521e <_printf_float+0xb6>
 80054dc:	2301      	movs	r3, #1
 80054de:	4631      	mov	r1, r6
 80054e0:	4628      	mov	r0, r5
 80054e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	f43f ae99 	beq.w	800521e <_printf_float+0xb6>
 80054ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ee:	f10b 0b01 	add.w	fp, fp, #1
 80054f2:	e7b9      	b.n	8005468 <_printf_float+0x300>
 80054f4:	4631      	mov	r1, r6
 80054f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	d1bf      	bne.n	8005482 <_printf_float+0x31a>
 8005502:	e68c      	b.n	800521e <_printf_float+0xb6>
 8005504:	464b      	mov	r3, r9
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	eb08 020a 	add.w	r2, r8, sl
 800550e:	47b8      	blx	r7
 8005510:	3001      	adds	r0, #1
 8005512:	d1c2      	bne.n	800549a <_printf_float+0x332>
 8005514:	e683      	b.n	800521e <_printf_float+0xb6>
 8005516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005518:	2a01      	cmp	r2, #1
 800551a:	dc01      	bgt.n	8005520 <_printf_float+0x3b8>
 800551c:	07db      	lsls	r3, r3, #31
 800551e:	d537      	bpl.n	8005590 <_printf_float+0x428>
 8005520:	2301      	movs	r3, #1
 8005522:	4642      	mov	r2, r8
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f ae77 	beq.w	800521e <_printf_float+0xb6>
 8005530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f ae6f 	beq.w	800521e <_printf_float+0xb6>
 8005540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005544:	2200      	movs	r2, #0
 8005546:	2300      	movs	r3, #0
 8005548:	f7fb fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800554c:	b9d8      	cbnz	r0, 8005586 <_printf_float+0x41e>
 800554e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005550:	f108 0201 	add.w	r2, r8, #1
 8005554:	3b01      	subs	r3, #1
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	d10e      	bne.n	800557e <_printf_float+0x416>
 8005560:	e65d      	b.n	800521e <_printf_float+0xb6>
 8005562:	2301      	movs	r3, #1
 8005564:	464a      	mov	r2, r9
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	f43f ae56 	beq.w	800521e <_printf_float+0xb6>
 8005572:	f108 0801 	add.w	r8, r8, #1
 8005576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005578:	3b01      	subs	r3, #1
 800557a:	4543      	cmp	r3, r8
 800557c:	dcf1      	bgt.n	8005562 <_printf_float+0x3fa>
 800557e:	4653      	mov	r3, sl
 8005580:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005584:	e6e0      	b.n	8005348 <_printf_float+0x1e0>
 8005586:	f04f 0800 	mov.w	r8, #0
 800558a:	f104 091a 	add.w	r9, r4, #26
 800558e:	e7f2      	b.n	8005576 <_printf_float+0x40e>
 8005590:	2301      	movs	r3, #1
 8005592:	4642      	mov	r2, r8
 8005594:	e7df      	b.n	8005556 <_printf_float+0x3ee>
 8005596:	2301      	movs	r3, #1
 8005598:	464a      	mov	r2, r9
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f ae3c 	beq.w	800521e <_printf_float+0xb6>
 80055a6:	f108 0801 	add.w	r8, r8, #1
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055ae:	1a5b      	subs	r3, r3, r1
 80055b0:	4543      	cmp	r3, r8
 80055b2:	dcf0      	bgt.n	8005596 <_printf_float+0x42e>
 80055b4:	e6fd      	b.n	80053b2 <_printf_float+0x24a>
 80055b6:	f04f 0800 	mov.w	r8, #0
 80055ba:	f104 0919 	add.w	r9, r4, #25
 80055be:	e7f4      	b.n	80055aa <_printf_float+0x442>

080055c0 <_printf_common>:
 80055c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	4616      	mov	r6, r2
 80055c6:	4699      	mov	r9, r3
 80055c8:	688a      	ldr	r2, [r1, #8]
 80055ca:	690b      	ldr	r3, [r1, #16]
 80055cc:	4607      	mov	r7, r0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfb8      	it	lt
 80055d2:	4613      	movlt	r3, r2
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055da:	460c      	mov	r4, r1
 80055dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e0:	b10a      	cbz	r2, 80055e6 <_printf_common+0x26>
 80055e2:	3301      	adds	r3, #1
 80055e4:	6033      	str	r3, [r6, #0]
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	0699      	lsls	r1, r3, #26
 80055ea:	bf42      	ittt	mi
 80055ec:	6833      	ldrmi	r3, [r6, #0]
 80055ee:	3302      	addmi	r3, #2
 80055f0:	6033      	strmi	r3, [r6, #0]
 80055f2:	6825      	ldr	r5, [r4, #0]
 80055f4:	f015 0506 	ands.w	r5, r5, #6
 80055f8:	d106      	bne.n	8005608 <_printf_common+0x48>
 80055fa:	f104 0a19 	add.w	sl, r4, #25
 80055fe:	68e3      	ldr	r3, [r4, #12]
 8005600:	6832      	ldr	r2, [r6, #0]
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	42ab      	cmp	r3, r5
 8005606:	dc28      	bgt.n	800565a <_printf_common+0x9a>
 8005608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800560c:	1e13      	subs	r3, r2, #0
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	bf18      	it	ne
 8005612:	2301      	movne	r3, #1
 8005614:	0692      	lsls	r2, r2, #26
 8005616:	d42d      	bmi.n	8005674 <_printf_common+0xb4>
 8005618:	4649      	mov	r1, r9
 800561a:	4638      	mov	r0, r7
 800561c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005620:	47c0      	blx	r8
 8005622:	3001      	adds	r0, #1
 8005624:	d020      	beq.n	8005668 <_printf_common+0xa8>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	68e5      	ldr	r5, [r4, #12]
 800562a:	f003 0306 	and.w	r3, r3, #6
 800562e:	2b04      	cmp	r3, #4
 8005630:	bf18      	it	ne
 8005632:	2500      	movne	r5, #0
 8005634:	6832      	ldr	r2, [r6, #0]
 8005636:	f04f 0600 	mov.w	r6, #0
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	bf08      	it	eq
 800563e:	1aad      	subeq	r5, r5, r2
 8005640:	6922      	ldr	r2, [r4, #16]
 8005642:	bf08      	it	eq
 8005644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005648:	4293      	cmp	r3, r2
 800564a:	bfc4      	itt	gt
 800564c:	1a9b      	subgt	r3, r3, r2
 800564e:	18ed      	addgt	r5, r5, r3
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xcc>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xac>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xb0>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c4      	b.n	80055fe <_printf_common+0x3e>
 8005674:	2030      	movs	r0, #48	; 0x30
 8005676:	18e1      	adds	r1, r4, r3
 8005678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005682:	4422      	add	r2, r4
 8005684:	3302      	adds	r3, #2
 8005686:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800568a:	e7c5      	b.n	8005618 <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4649      	mov	r1, r9
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa8>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x92>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	460c      	mov	r4, r1
 80056a6:	7e27      	ldrb	r7, [r4, #24]
 80056a8:	4691      	mov	r9, r2
 80056aa:	2f78      	cmp	r7, #120	; 0x78
 80056ac:	4680      	mov	r8, r0
 80056ae:	469a      	mov	sl, r3
 80056b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	; 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d9 	beq.w	8005874 <_printf_i+0x1d4>
 80056c2:	2f58      	cmp	r7, #88	; 0x58
 80056c4:	f000 80a4 	beq.w	8005810 <_printf_i+0x170>
 80056c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a001      	add	r0, pc, #4	; (adr r0, 80056e0 <_printf_i+0x40>)
 80056dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	0800585b 	.word	0x0800585b
 8005710:	0800577d 	.word	0x0800577d
 8005714:	0800583d 	.word	0x0800583d
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	0800587d 	.word	0x0800587d
 8005724:	080056c9 	.word	0x080056c9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	08005845 	.word	0x08005845
 8005738:	680b      	ldr	r3, [r1, #0]
 800573a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	600a      	str	r2, [r1, #0]
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e0a4      	b.n	8005896 <_printf_i+0x1f6>
 800574c:	6825      	ldr	r5, [r4, #0]
 800574e:	6808      	ldr	r0, [r1, #0]
 8005750:	062e      	lsls	r6, r5, #24
 8005752:	f100 0304 	add.w	r3, r0, #4
 8005756:	d50a      	bpl.n	800576e <_printf_i+0xce>
 8005758:	6805      	ldr	r5, [r0, #0]
 800575a:	600b      	str	r3, [r1, #0]
 800575c:	2d00      	cmp	r5, #0
 800575e:	da03      	bge.n	8005768 <_printf_i+0xc8>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	426d      	negs	r5, r5
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	230a      	movs	r3, #10
 800576a:	485e      	ldr	r0, [pc, #376]	; (80058e4 <_printf_i+0x244>)
 800576c:	e019      	b.n	80057a2 <_printf_i+0x102>
 800576e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005772:	6805      	ldr	r5, [r0, #0]
 8005774:	600b      	str	r3, [r1, #0]
 8005776:	bf18      	it	ne
 8005778:	b22d      	sxthne	r5, r5
 800577a:	e7ef      	b.n	800575c <_printf_i+0xbc>
 800577c:	680b      	ldr	r3, [r1, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	1d18      	adds	r0, r3, #4
 8005782:	6008      	str	r0, [r1, #0]
 8005784:	0628      	lsls	r0, r5, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0xec>
 8005788:	681d      	ldr	r5, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0xf2>
 800578c:	0669      	lsls	r1, r5, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0xe8>
 8005790:	881d      	ldrh	r5, [r3, #0]
 8005792:	2f6f      	cmp	r7, #111	; 0x6f
 8005794:	bf0c      	ite	eq
 8005796:	2308      	moveq	r3, #8
 8005798:	230a      	movne	r3, #10
 800579a:	4852      	ldr	r0, [pc, #328]	; (80058e4 <_printf_i+0x244>)
 800579c:	2100      	movs	r1, #0
 800579e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a2:	6866      	ldr	r6, [r4, #4]
 80057a4:	2e00      	cmp	r6, #0
 80057a6:	bfa8      	it	ge
 80057a8:	6821      	ldrge	r1, [r4, #0]
 80057aa:	60a6      	str	r6, [r4, #8]
 80057ac:	bfa4      	itt	ge
 80057ae:	f021 0104 	bicge.w	r1, r1, #4
 80057b2:	6021      	strge	r1, [r4, #0]
 80057b4:	b90d      	cbnz	r5, 80057ba <_printf_i+0x11a>
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	d04d      	beq.n	8005856 <_printf_i+0x1b6>
 80057ba:	4616      	mov	r6, r2
 80057bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80057c0:	fb03 5711 	mls	r7, r3, r1, r5
 80057c4:	5dc7      	ldrb	r7, [r0, r7]
 80057c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ca:	462f      	mov	r7, r5
 80057cc:	42bb      	cmp	r3, r7
 80057ce:	460d      	mov	r5, r1
 80057d0:	d9f4      	bls.n	80057bc <_printf_i+0x11c>
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d10b      	bne.n	80057ee <_printf_i+0x14e>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	07df      	lsls	r7, r3, #31
 80057da:	d508      	bpl.n	80057ee <_printf_i+0x14e>
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	6861      	ldr	r1, [r4, #4]
 80057e0:	4299      	cmp	r1, r3
 80057e2:	bfde      	ittt	le
 80057e4:	2330      	movle	r3, #48	; 0x30
 80057e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057ee:	1b92      	subs	r2, r2, r6
 80057f0:	6122      	str	r2, [r4, #16]
 80057f2:	464b      	mov	r3, r9
 80057f4:	4621      	mov	r1, r4
 80057f6:	4640      	mov	r0, r8
 80057f8:	f8cd a000 	str.w	sl, [sp]
 80057fc:	aa03      	add	r2, sp, #12
 80057fe:	f7ff fedf 	bl	80055c0 <_printf_common>
 8005802:	3001      	adds	r0, #1
 8005804:	d14c      	bne.n	80058a0 <_printf_i+0x200>
 8005806:	f04f 30ff 	mov.w	r0, #4294967295
 800580a:	b004      	add	sp, #16
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005810:	4834      	ldr	r0, [pc, #208]	; (80058e4 <_printf_i+0x244>)
 8005812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005816:	680e      	ldr	r6, [r1, #0]
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f856 5b04 	ldr.w	r5, [r6], #4
 800581e:	061f      	lsls	r7, r3, #24
 8005820:	600e      	str	r6, [r1, #0]
 8005822:	d514      	bpl.n	800584e <_printf_i+0x1ae>
 8005824:	07d9      	lsls	r1, r3, #31
 8005826:	bf44      	itt	mi
 8005828:	f043 0320 	orrmi.w	r3, r3, #32
 800582c:	6023      	strmi	r3, [r4, #0]
 800582e:	b91d      	cbnz	r5, 8005838 <_printf_i+0x198>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	2310      	movs	r3, #16
 800583a:	e7af      	b.n	800579c <_printf_i+0xfc>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	f043 0320 	orr.w	r3, r3, #32
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	2378      	movs	r3, #120	; 0x78
 8005846:	4828      	ldr	r0, [pc, #160]	; (80058e8 <_printf_i+0x248>)
 8005848:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584c:	e7e3      	b.n	8005816 <_printf_i+0x176>
 800584e:	065e      	lsls	r6, r3, #25
 8005850:	bf48      	it	mi
 8005852:	b2ad      	uxthmi	r5, r5
 8005854:	e7e6      	b.n	8005824 <_printf_i+0x184>
 8005856:	4616      	mov	r6, r2
 8005858:	e7bb      	b.n	80057d2 <_printf_i+0x132>
 800585a:	680b      	ldr	r3, [r1, #0]
 800585c:	6826      	ldr	r6, [r4, #0]
 800585e:	1d1d      	adds	r5, r3, #4
 8005860:	6960      	ldr	r0, [r4, #20]
 8005862:	600d      	str	r5, [r1, #0]
 8005864:	0635      	lsls	r5, r6, #24
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	d501      	bpl.n	800586e <_printf_i+0x1ce>
 800586a:	6018      	str	r0, [r3, #0]
 800586c:	e002      	b.n	8005874 <_printf_i+0x1d4>
 800586e:	0671      	lsls	r1, r6, #25
 8005870:	d5fb      	bpl.n	800586a <_printf_i+0x1ca>
 8005872:	8018      	strh	r0, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	4616      	mov	r6, r2
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	e7ba      	b.n	80057f2 <_printf_i+0x152>
 800587c:	680b      	ldr	r3, [r1, #0]
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	600a      	str	r2, [r1, #0]
 8005882:	681e      	ldr	r6, [r3, #0]
 8005884:	2100      	movs	r1, #0
 8005886:	4630      	mov	r0, r6
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	f002 fb0b 	bl	8007ea4 <memchr>
 800588e:	b108      	cbz	r0, 8005894 <_printf_i+0x1f4>
 8005890:	1b80      	subs	r0, r0, r6
 8005892:	6060      	str	r0, [r4, #4]
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	2300      	movs	r3, #0
 800589a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589e:	e7a8      	b.n	80057f2 <_printf_i+0x152>
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	47d0      	blx	sl
 80058aa:	3001      	adds	r0, #1
 80058ac:	d0ab      	beq.n	8005806 <_printf_i+0x166>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	079b      	lsls	r3, r3, #30
 80058b2:	d413      	bmi.n	80058dc <_printf_i+0x23c>
 80058b4:	68e0      	ldr	r0, [r4, #12]
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	4298      	cmp	r0, r3
 80058ba:	bfb8      	it	lt
 80058bc:	4618      	movlt	r0, r3
 80058be:	e7a4      	b.n	800580a <_printf_i+0x16a>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4632      	mov	r2, r6
 80058c4:	4649      	mov	r1, r9
 80058c6:	4640      	mov	r0, r8
 80058c8:	47d0      	blx	sl
 80058ca:	3001      	adds	r0, #1
 80058cc:	d09b      	beq.n	8005806 <_printf_i+0x166>
 80058ce:	3501      	adds	r5, #1
 80058d0:	68e3      	ldr	r3, [r4, #12]
 80058d2:	9903      	ldr	r1, [sp, #12]
 80058d4:	1a5b      	subs	r3, r3, r1
 80058d6:	42ab      	cmp	r3, r5
 80058d8:	dcf2      	bgt.n	80058c0 <_printf_i+0x220>
 80058da:	e7eb      	b.n	80058b4 <_printf_i+0x214>
 80058dc:	2500      	movs	r5, #0
 80058de:	f104 0619 	add.w	r6, r4, #25
 80058e2:	e7f5      	b.n	80058d0 <_printf_i+0x230>
 80058e4:	08009b22 	.word	0x08009b22
 80058e8:	08009b33 	.word	0x08009b33

080058ec <_scanf_float>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	b087      	sub	sp, #28
 80058f2:	9303      	str	r3, [sp, #12]
 80058f4:	688b      	ldr	r3, [r1, #8]
 80058f6:	4617      	mov	r7, r2
 80058f8:	1e5a      	subs	r2, r3, #1
 80058fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80058fe:	bf85      	ittet	hi
 8005900:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005904:	195b      	addhi	r3, r3, r5
 8005906:	2300      	movls	r3, #0
 8005908:	9302      	strhi	r3, [sp, #8]
 800590a:	bf88      	it	hi
 800590c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005910:	468b      	mov	fp, r1
 8005912:	f04f 0500 	mov.w	r5, #0
 8005916:	bf8c      	ite	hi
 8005918:	608b      	strhi	r3, [r1, #8]
 800591a:	9302      	strls	r3, [sp, #8]
 800591c:	680b      	ldr	r3, [r1, #0]
 800591e:	4680      	mov	r8, r0
 8005920:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005924:	f84b 3b1c 	str.w	r3, [fp], #28
 8005928:	460c      	mov	r4, r1
 800592a:	465e      	mov	r6, fp
 800592c:	46aa      	mov	sl, r5
 800592e:	46a9      	mov	r9, r5
 8005930:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005934:	9501      	str	r5, [sp, #4]
 8005936:	68a2      	ldr	r2, [r4, #8]
 8005938:	b152      	cbz	r2, 8005950 <_scanf_float+0x64>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b4e      	cmp	r3, #78	; 0x4e
 8005940:	d864      	bhi.n	8005a0c <_scanf_float+0x120>
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d83c      	bhi.n	80059c0 <_scanf_float+0xd4>
 8005946:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800594a:	b2c8      	uxtb	r0, r1
 800594c:	280e      	cmp	r0, #14
 800594e:	d93a      	bls.n	80059c6 <_scanf_float+0xda>
 8005950:	f1b9 0f00 	cmp.w	r9, #0
 8005954:	d003      	beq.n	800595e <_scanf_float+0x72>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005962:	f1ba 0f01 	cmp.w	sl, #1
 8005966:	f200 8113 	bhi.w	8005b90 <_scanf_float+0x2a4>
 800596a:	455e      	cmp	r6, fp
 800596c:	f200 8105 	bhi.w	8005b7a <_scanf_float+0x28e>
 8005970:	2501      	movs	r5, #1
 8005972:	4628      	mov	r0, r5
 8005974:	b007      	add	sp, #28
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800597e:	2a0d      	cmp	r2, #13
 8005980:	d8e6      	bhi.n	8005950 <_scanf_float+0x64>
 8005982:	a101      	add	r1, pc, #4	; (adr r1, 8005988 <_scanf_float+0x9c>)
 8005984:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005988:	08005ac7 	.word	0x08005ac7
 800598c:	08005951 	.word	0x08005951
 8005990:	08005951 	.word	0x08005951
 8005994:	08005951 	.word	0x08005951
 8005998:	08005b27 	.word	0x08005b27
 800599c:	08005aff 	.word	0x08005aff
 80059a0:	08005951 	.word	0x08005951
 80059a4:	08005951 	.word	0x08005951
 80059a8:	08005ad5 	.word	0x08005ad5
 80059ac:	08005951 	.word	0x08005951
 80059b0:	08005951 	.word	0x08005951
 80059b4:	08005951 	.word	0x08005951
 80059b8:	08005951 	.word	0x08005951
 80059bc:	08005a8d 	.word	0x08005a8d
 80059c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80059c4:	e7db      	b.n	800597e <_scanf_float+0x92>
 80059c6:	290e      	cmp	r1, #14
 80059c8:	d8c2      	bhi.n	8005950 <_scanf_float+0x64>
 80059ca:	a001      	add	r0, pc, #4	; (adr r0, 80059d0 <_scanf_float+0xe4>)
 80059cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059d0:	08005a7f 	.word	0x08005a7f
 80059d4:	08005951 	.word	0x08005951
 80059d8:	08005a7f 	.word	0x08005a7f
 80059dc:	08005b13 	.word	0x08005b13
 80059e0:	08005951 	.word	0x08005951
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a69 	.word	0x08005a69
 80059ec:	08005a69 	.word	0x08005a69
 80059f0:	08005a69 	.word	0x08005a69
 80059f4:	08005a69 	.word	0x08005a69
 80059f8:	08005a69 	.word	0x08005a69
 80059fc:	08005a69 	.word	0x08005a69
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	08005a69 	.word	0x08005a69
 8005a08:	08005a69 	.word	0x08005a69
 8005a0c:	2b6e      	cmp	r3, #110	; 0x6e
 8005a0e:	d809      	bhi.n	8005a24 <_scanf_float+0x138>
 8005a10:	2b60      	cmp	r3, #96	; 0x60
 8005a12:	d8b2      	bhi.n	800597a <_scanf_float+0x8e>
 8005a14:	2b54      	cmp	r3, #84	; 0x54
 8005a16:	d077      	beq.n	8005b08 <_scanf_float+0x21c>
 8005a18:	2b59      	cmp	r3, #89	; 0x59
 8005a1a:	d199      	bne.n	8005950 <_scanf_float+0x64>
 8005a1c:	2d07      	cmp	r5, #7
 8005a1e:	d197      	bne.n	8005950 <_scanf_float+0x64>
 8005a20:	2508      	movs	r5, #8
 8005a22:	e029      	b.n	8005a78 <_scanf_float+0x18c>
 8005a24:	2b74      	cmp	r3, #116	; 0x74
 8005a26:	d06f      	beq.n	8005b08 <_scanf_float+0x21c>
 8005a28:	2b79      	cmp	r3, #121	; 0x79
 8005a2a:	e7f6      	b.n	8005a1a <_scanf_float+0x12e>
 8005a2c:	6821      	ldr	r1, [r4, #0]
 8005a2e:	05c8      	lsls	r0, r1, #23
 8005a30:	d51a      	bpl.n	8005a68 <_scanf_float+0x17c>
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a38:	6021      	str	r1, [r4, #0]
 8005a3a:	f109 0901 	add.w	r9, r9, #1
 8005a3e:	b11b      	cbz	r3, 8005a48 <_scanf_float+0x15c>
 8005a40:	3b01      	subs	r3, #1
 8005a42:	3201      	adds	r2, #1
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	60a2      	str	r2, [r4, #8]
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	60a3      	str	r3, [r4, #8]
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	f340 8084 	ble.w	8005b68 <_scanf_float+0x27c>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	e766      	b.n	8005936 <_scanf_float+0x4a>
 8005a68:	eb1a 0f05 	cmn.w	sl, r5
 8005a6c:	f47f af70 	bne.w	8005950 <_scanf_float+0x64>
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a76:	6022      	str	r2, [r4, #0]
 8005a78:	f806 3b01 	strb.w	r3, [r6], #1
 8005a7c:	e7e4      	b.n	8005a48 <_scanf_float+0x15c>
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	0610      	lsls	r0, r2, #24
 8005a82:	f57f af65 	bpl.w	8005950 <_scanf_float+0x64>
 8005a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8a:	e7f4      	b.n	8005a76 <_scanf_float+0x18a>
 8005a8c:	f1ba 0f00 	cmp.w	sl, #0
 8005a90:	d10e      	bne.n	8005ab0 <_scanf_float+0x1c4>
 8005a92:	f1b9 0f00 	cmp.w	r9, #0
 8005a96:	d10e      	bne.n	8005ab6 <_scanf_float+0x1ca>
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005aa2:	d108      	bne.n	8005ab6 <_scanf_float+0x1ca>
 8005aa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005aa8:	f04f 0a01 	mov.w	sl, #1
 8005aac:	6022      	str	r2, [r4, #0]
 8005aae:	e7e3      	b.n	8005a78 <_scanf_float+0x18c>
 8005ab0:	f1ba 0f02 	cmp.w	sl, #2
 8005ab4:	d055      	beq.n	8005b62 <_scanf_float+0x276>
 8005ab6:	2d01      	cmp	r5, #1
 8005ab8:	d002      	beq.n	8005ac0 <_scanf_float+0x1d4>
 8005aba:	2d04      	cmp	r5, #4
 8005abc:	f47f af48 	bne.w	8005950 <_scanf_float+0x64>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	b2ed      	uxtb	r5, r5
 8005ac4:	e7d8      	b.n	8005a78 <_scanf_float+0x18c>
 8005ac6:	f1ba 0f01 	cmp.w	sl, #1
 8005aca:	f47f af41 	bne.w	8005950 <_scanf_float+0x64>
 8005ace:	f04f 0a02 	mov.w	sl, #2
 8005ad2:	e7d1      	b.n	8005a78 <_scanf_float+0x18c>
 8005ad4:	b97d      	cbnz	r5, 8005af6 <_scanf_float+0x20a>
 8005ad6:	f1b9 0f00 	cmp.w	r9, #0
 8005ada:	f47f af3c 	bne.w	8005956 <_scanf_float+0x6a>
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ae4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ae8:	f47f af39 	bne.w	800595e <_scanf_float+0x72>
 8005aec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005af0:	2501      	movs	r5, #1
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	e7c0      	b.n	8005a78 <_scanf_float+0x18c>
 8005af6:	2d03      	cmp	r5, #3
 8005af8:	d0e2      	beq.n	8005ac0 <_scanf_float+0x1d4>
 8005afa:	2d05      	cmp	r5, #5
 8005afc:	e7de      	b.n	8005abc <_scanf_float+0x1d0>
 8005afe:	2d02      	cmp	r5, #2
 8005b00:	f47f af26 	bne.w	8005950 <_scanf_float+0x64>
 8005b04:	2503      	movs	r5, #3
 8005b06:	e7b7      	b.n	8005a78 <_scanf_float+0x18c>
 8005b08:	2d06      	cmp	r5, #6
 8005b0a:	f47f af21 	bne.w	8005950 <_scanf_float+0x64>
 8005b0e:	2507      	movs	r5, #7
 8005b10:	e7b2      	b.n	8005a78 <_scanf_float+0x18c>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	0591      	lsls	r1, r2, #22
 8005b16:	f57f af1b 	bpl.w	8005950 <_scanf_float+0x64>
 8005b1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b24:	e7a8      	b.n	8005a78 <_scanf_float+0x18c>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b30:	d006      	beq.n	8005b40 <_scanf_float+0x254>
 8005b32:	0550      	lsls	r0, r2, #21
 8005b34:	f57f af0c 	bpl.w	8005950 <_scanf_float+0x64>
 8005b38:	f1b9 0f00 	cmp.w	r9, #0
 8005b3c:	f43f af0f 	beq.w	800595e <_scanf_float+0x72>
 8005b40:	0591      	lsls	r1, r2, #22
 8005b42:	bf58      	it	pl
 8005b44:	9901      	ldrpl	r1, [sp, #4]
 8005b46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b4a:	bf58      	it	pl
 8005b4c:	eba9 0101 	subpl.w	r1, r9, r1
 8005b50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b54:	f04f 0900 	mov.w	r9, #0
 8005b58:	bf58      	it	pl
 8005b5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b5e:	6022      	str	r2, [r4, #0]
 8005b60:	e78a      	b.n	8005a78 <_scanf_float+0x18c>
 8005b62:	f04f 0a03 	mov.w	sl, #3
 8005b66:	e787      	b.n	8005a78 <_scanf_float+0x18c>
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b70:	4798      	blx	r3
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f43f aedf 	beq.w	8005936 <_scanf_float+0x4a>
 8005b78:	e6ea      	b.n	8005950 <_scanf_float+0x64>
 8005b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4640      	mov	r0, r8
 8005b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b86:	4798      	blx	r3
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	e6ec      	b.n	800596a <_scanf_float+0x7e>
 8005b90:	1e6b      	subs	r3, r5, #1
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d825      	bhi.n	8005be2 <_scanf_float+0x2f6>
 8005b96:	2d02      	cmp	r5, #2
 8005b98:	d836      	bhi.n	8005c08 <_scanf_float+0x31c>
 8005b9a:	455e      	cmp	r6, fp
 8005b9c:	f67f aee8 	bls.w	8005970 <_scanf_float+0x84>
 8005ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bac:	4798      	blx	r3
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	e7f1      	b.n	8005b9a <_scanf_float+0x2ae>
 8005bb6:	9802      	ldr	r0, [sp, #8]
 8005bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005bc0:	463a      	mov	r2, r7
 8005bc2:	9002      	str	r0, [sp, #8]
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	4798      	blx	r3
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd2:	fa5f fa8a 	uxtb.w	sl, sl
 8005bd6:	f1ba 0f02 	cmp.w	sl, #2
 8005bda:	d1ec      	bne.n	8005bb6 <_scanf_float+0x2ca>
 8005bdc:	3d03      	subs	r5, #3
 8005bde:	b2ed      	uxtb	r5, r5
 8005be0:	1b76      	subs	r6, r6, r5
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	05da      	lsls	r2, r3, #23
 8005be6:	d52f      	bpl.n	8005c48 <_scanf_float+0x35c>
 8005be8:	055b      	lsls	r3, r3, #21
 8005bea:	d510      	bpl.n	8005c0e <_scanf_float+0x322>
 8005bec:	455e      	cmp	r6, fp
 8005bee:	f67f aebf 	bls.w	8005970 <_scanf_float+0x84>
 8005bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bfe:	4798      	blx	r3
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	e7f1      	b.n	8005bec <_scanf_float+0x300>
 8005c08:	46aa      	mov	sl, r5
 8005c0a:	9602      	str	r6, [sp, #8]
 8005c0c:	e7df      	b.n	8005bce <_scanf_float+0x2e2>
 8005c0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	2965      	cmp	r1, #101	; 0x65
 8005c16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	d00c      	beq.n	8005c3c <_scanf_float+0x350>
 8005c22:	2945      	cmp	r1, #69	; 0x45
 8005c24:	d00a      	beq.n	8005c3c <_scanf_float+0x350>
 8005c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	4798      	blx	r3
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	1eb5      	subs	r5, r6, #2
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c44:	4798      	blx	r3
 8005c46:	462e      	mov	r6, r5
 8005c48:	6825      	ldr	r5, [r4, #0]
 8005c4a:	f015 0510 	ands.w	r5, r5, #16
 8005c4e:	d159      	bne.n	8005d04 <_scanf_float+0x418>
 8005c50:	7035      	strb	r5, [r6, #0]
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5c:	d11c      	bne.n	8005c98 <_scanf_float+0x3ac>
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	454b      	cmp	r3, r9
 8005c62:	eba3 0209 	sub.w	r2, r3, r9
 8005c66:	d124      	bne.n	8005cb2 <_scanf_float+0x3c6>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4659      	mov	r1, fp
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f000 fe8b 	bl	8006988 <_strtod_r>
 8005c72:	f8d4 c000 	ldr.w	ip, [r4]
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	f01c 0f02 	tst.w	ip, #2
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	460f      	mov	r7, r1
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	d021      	beq.n	8005cc8 <_scanf_float+0x3dc>
 8005c84:	9903      	ldr	r1, [sp, #12]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	600a      	str	r2, [r1, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	e9c3 6700 	strd	r6, r7, [r3]
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60e3      	str	r3, [r4, #12]
 8005c96:	e66c      	b.n	8005972 <_scanf_float+0x86>
 8005c98:	9b04      	ldr	r3, [sp, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0e4      	beq.n	8005c68 <_scanf_float+0x37c>
 8005c9e:	9905      	ldr	r1, [sp, #20]
 8005ca0:	230a      	movs	r3, #10
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	3101      	adds	r1, #1
 8005ca8:	f000 fefa 	bl	8006aa0 <_strtol_r>
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	9e05      	ldr	r6, [sp, #20]
 8005cb0:	1ac2      	subs	r2, r0, r3
 8005cb2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005cb6:	429e      	cmp	r6, r3
 8005cb8:	bf28      	it	cs
 8005cba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4911      	ldr	r1, [pc, #68]	; (8005d08 <_scanf_float+0x41c>)
 8005cc2:	f000 f829 	bl	8005d18 <siprintf>
 8005cc6:	e7cf      	b.n	8005c68 <_scanf_float+0x37c>
 8005cc8:	f01c 0f04 	tst.w	ip, #4
 8005ccc:	f103 0e04 	add.w	lr, r3, #4
 8005cd0:	d003      	beq.n	8005cda <_scanf_float+0x3ee>
 8005cd2:	9903      	ldr	r1, [sp, #12]
 8005cd4:	f8c1 e000 	str.w	lr, [r1]
 8005cd8:	e7d7      	b.n	8005c8a <_scanf_float+0x39e>
 8005cda:	9a03      	ldr	r2, [sp, #12]
 8005cdc:	f8c2 e000 	str.w	lr, [r2]
 8005ce0:	f8d3 8000 	ldr.w	r8, [r3]
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	f7fa fe90 	bl	8000a0c <__aeabi_dcmpun>
 8005cec:	b128      	cbz	r0, 8005cfa <_scanf_float+0x40e>
 8005cee:	4807      	ldr	r0, [pc, #28]	; (8005d0c <_scanf_float+0x420>)
 8005cf0:	f000 f80e 	bl	8005d10 <nanf>
 8005cf4:	f8c8 0000 	str.w	r0, [r8]
 8005cf8:	e7ca      	b.n	8005c90 <_scanf_float+0x3a4>
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	f7fa fee3 	bl	8000ac8 <__aeabi_d2f>
 8005d02:	e7f7      	b.n	8005cf4 <_scanf_float+0x408>
 8005d04:	2500      	movs	r5, #0
 8005d06:	e634      	b.n	8005972 <_scanf_float+0x86>
 8005d08:	08009b44 	.word	0x08009b44
 8005d0c:	08009f60 	.word	0x08009f60

08005d10 <nanf>:
 8005d10:	4800      	ldr	r0, [pc, #0]	; (8005d14 <nanf+0x4>)
 8005d12:	4770      	bx	lr
 8005d14:	7fc00000 	.word	0x7fc00000

08005d18 <siprintf>:
 8005d18:	b40e      	push	{r1, r2, r3}
 8005d1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d1e:	b500      	push	{lr}
 8005d20:	b09c      	sub	sp, #112	; 0x70
 8005d22:	ab1d      	add	r3, sp, #116	; 0x74
 8005d24:	9002      	str	r0, [sp, #8]
 8005d26:	9006      	str	r0, [sp, #24]
 8005d28:	9107      	str	r1, [sp, #28]
 8005d2a:	9104      	str	r1, [sp, #16]
 8005d2c:	4808      	ldr	r0, [pc, #32]	; (8005d50 <siprintf+0x38>)
 8005d2e:	4909      	ldr	r1, [pc, #36]	; (8005d54 <siprintf+0x3c>)
 8005d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d34:	9105      	str	r1, [sp, #20]
 8005d36:	6800      	ldr	r0, [r0, #0]
 8005d38:	a902      	add	r1, sp, #8
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f002 fe88 	bl	8008a50 <_svfiprintf_r>
 8005d40:	2200      	movs	r2, #0
 8005d42:	9b02      	ldr	r3, [sp, #8]
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	b01c      	add	sp, #112	; 0x70
 8005d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d4c:	b003      	add	sp, #12
 8005d4e:	4770      	bx	lr
 8005d50:	20000020 	.word	0x20000020
 8005d54:	ffff0208 	.word	0xffff0208

08005d58 <sulp>:
 8005d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5c:	460f      	mov	r7, r1
 8005d5e:	4690      	mov	r8, r2
 8005d60:	f002 fc1e 	bl	80085a0 <__ulp>
 8005d64:	4604      	mov	r4, r0
 8005d66:	460d      	mov	r5, r1
 8005d68:	f1b8 0f00 	cmp.w	r8, #0
 8005d6c:	d011      	beq.n	8005d92 <sulp+0x3a>
 8005d6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd0b      	ble.n	8005d92 <sulp+0x3a>
 8005d7a:	2400      	movs	r4, #0
 8005d7c:	051b      	lsls	r3, r3, #20
 8005d7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005d82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f7fa fba5 	bl	80004d8 <__aeabi_dmul>
 8005d8e:	4604      	mov	r4, r0
 8005d90:	460d      	mov	r5, r1
 8005d92:	4620      	mov	r0, r4
 8005d94:	4629      	mov	r1, r5
 8005d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9a:	0000      	movs	r0, r0
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <_strtod_l>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	469b      	mov	fp, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	b0a1      	sub	sp, #132	; 0x84
 8005daa:	931c      	str	r3, [sp, #112]	; 0x70
 8005dac:	4ba1      	ldr	r3, [pc, #644]	; (8006034 <_strtod_l+0x294>)
 8005dae:	4682      	mov	sl, r0
 8005db0:	681f      	ldr	r7, [r3, #0]
 8005db2:	460e      	mov	r6, r1
 8005db4:	4638      	mov	r0, r7
 8005db6:	9217      	str	r2, [sp, #92]	; 0x5c
 8005db8:	f7fa f9ca 	bl	8000150 <strlen>
 8005dbc:	f04f 0800 	mov.w	r8, #0
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	f04f 0900 	mov.w	r9, #0
 8005dc6:	961b      	str	r6, [sp, #108]	; 0x6c
 8005dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	2a2b      	cmp	r2, #43	; 0x2b
 8005dce:	d04c      	beq.n	8005e6a <_strtod_l+0xca>
 8005dd0:	d83a      	bhi.n	8005e48 <_strtod_l+0xa8>
 8005dd2:	2a0d      	cmp	r2, #13
 8005dd4:	d833      	bhi.n	8005e3e <_strtod_l+0x9e>
 8005dd6:	2a08      	cmp	r2, #8
 8005dd8:	d833      	bhi.n	8005e42 <_strtod_l+0xa2>
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d03d      	beq.n	8005e5a <_strtod_l+0xba>
 8005dde:	2300      	movs	r3, #0
 8005de0:	930c      	str	r3, [sp, #48]	; 0x30
 8005de2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005de4:	782b      	ldrb	r3, [r5, #0]
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	f040 80af 	bne.w	8005f4a <_strtod_l+0x1aa>
 8005dec:	786b      	ldrb	r3, [r5, #1]
 8005dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005df2:	2b58      	cmp	r3, #88	; 0x58
 8005df4:	d16c      	bne.n	8005ed0 <_strtod_l+0x130>
 8005df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005df8:	4650      	mov	r0, sl
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	ab1c      	add	r3, sp, #112	; 0x70
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4a8d      	ldr	r2, [pc, #564]	; (8006038 <_strtod_l+0x298>)
 8005e02:	f8cd b008 	str.w	fp, [sp, #8]
 8005e06:	ab1d      	add	r3, sp, #116	; 0x74
 8005e08:	a91b      	add	r1, sp, #108	; 0x6c
 8005e0a:	f001 fd2f 	bl	800786c <__gethex>
 8005e0e:	f010 0607 	ands.w	r6, r0, #7
 8005e12:	4604      	mov	r4, r0
 8005e14:	d005      	beq.n	8005e22 <_strtod_l+0x82>
 8005e16:	2e06      	cmp	r6, #6
 8005e18:	d129      	bne.n	8005e6e <_strtod_l+0xce>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	951b      	str	r5, [sp, #108]	; 0x6c
 8005e20:	930c      	str	r3, [sp, #48]	; 0x30
 8005e22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 8596 	bne.w	8006956 <_strtod_l+0xbb6>
 8005e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e2c:	b1d3      	cbz	r3, 8005e64 <_strtod_l+0xc4>
 8005e2e:	4642      	mov	r2, r8
 8005e30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	b021      	add	sp, #132	; 0x84
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	2a20      	cmp	r2, #32
 8005e40:	d1cd      	bne.n	8005dde <_strtod_l+0x3e>
 8005e42:	3301      	adds	r3, #1
 8005e44:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e46:	e7bf      	b.n	8005dc8 <_strtod_l+0x28>
 8005e48:	2a2d      	cmp	r2, #45	; 0x2d
 8005e4a:	d1c8      	bne.n	8005dde <_strtod_l+0x3e>
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	920c      	str	r2, [sp, #48]	; 0x30
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	921b      	str	r2, [sp, #108]	; 0x6c
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1c3      	bne.n	8005de2 <_strtod_l+0x42>
 8005e5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 8577 	bne.w	8006952 <_strtod_l+0xbb2>
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	e7e4      	b.n	8005e34 <_strtod_l+0x94>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	e7ef      	b.n	8005e4e <_strtod_l+0xae>
 8005e6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e70:	b13a      	cbz	r2, 8005e82 <_strtod_l+0xe2>
 8005e72:	2135      	movs	r1, #53	; 0x35
 8005e74:	a81e      	add	r0, sp, #120	; 0x78
 8005e76:	f002 fc97 	bl	80087a8 <__copybits>
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e7e:	f002 f85f 	bl	8007f40 <_Bfree>
 8005e82:	3e01      	subs	r6, #1
 8005e84:	2e05      	cmp	r6, #5
 8005e86:	d807      	bhi.n	8005e98 <_strtod_l+0xf8>
 8005e88:	e8df f006 	tbb	[pc, r6]
 8005e8c:	1d180b0e 	.word	0x1d180b0e
 8005e90:	030e      	.short	0x030e
 8005e92:	f04f 0900 	mov.w	r9, #0
 8005e96:	46c8      	mov	r8, r9
 8005e98:	0721      	lsls	r1, r4, #28
 8005e9a:	d5c2      	bpl.n	8005e22 <_strtod_l+0x82>
 8005e9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005ea0:	e7bf      	b.n	8005e22 <_strtod_l+0x82>
 8005ea2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005ea6:	e7f7      	b.n	8005e98 <_strtod_l+0xf8>
 8005ea8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005eaa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005eae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005eb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005eb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005eba:	e7ed      	b.n	8005e98 <_strtod_l+0xf8>
 8005ebc:	f04f 0800 	mov.w	r8, #0
 8005ec0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800603c <_strtod_l+0x29c>
 8005ec4:	e7e8      	b.n	8005e98 <_strtod_l+0xf8>
 8005ec6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005eca:	f04f 38ff 	mov.w	r8, #4294967295
 8005ece:	e7e3      	b.n	8005e98 <_strtod_l+0xf8>
 8005ed0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b30      	cmp	r3, #48	; 0x30
 8005eda:	d0f9      	beq.n	8005ed0 <_strtod_l+0x130>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0a0      	beq.n	8005e22 <_strtod_l+0x82>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	9307      	str	r3, [sp, #28]
 8005ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ee6:	220a      	movs	r2, #10
 8005ee8:	9308      	str	r3, [sp, #32]
 8005eea:	2300      	movs	r3, #0
 8005eec:	469b      	mov	fp, r3
 8005eee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005ef2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005ef4:	7805      	ldrb	r5, [r0, #0]
 8005ef6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005efa:	b2d9      	uxtb	r1, r3
 8005efc:	2909      	cmp	r1, #9
 8005efe:	d926      	bls.n	8005f4e <_strtod_l+0x1ae>
 8005f00:	4622      	mov	r2, r4
 8005f02:	4639      	mov	r1, r7
 8005f04:	f002 feba 	bl	8008c7c <strncmp>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d032      	beq.n	8005f72 <_strtod_l+0x1d2>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	462b      	mov	r3, r5
 8005f10:	465c      	mov	r4, fp
 8005f12:	4602      	mov	r2, r0
 8005f14:	9004      	str	r0, [sp, #16]
 8005f16:	2b65      	cmp	r3, #101	; 0x65
 8005f18:	d001      	beq.n	8005f1e <_strtod_l+0x17e>
 8005f1a:	2b45      	cmp	r3, #69	; 0x45
 8005f1c:	d113      	bne.n	8005f46 <_strtod_l+0x1a6>
 8005f1e:	b91c      	cbnz	r4, 8005f28 <_strtod_l+0x188>
 8005f20:	9b07      	ldr	r3, [sp, #28]
 8005f22:	4303      	orrs	r3, r0
 8005f24:	d099      	beq.n	8005e5a <_strtod_l+0xba>
 8005f26:	2400      	movs	r4, #0
 8005f28:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005f2a:	1c73      	adds	r3, r6, #1
 8005f2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f2e:	7873      	ldrb	r3, [r6, #1]
 8005f30:	2b2b      	cmp	r3, #43	; 0x2b
 8005f32:	d078      	beq.n	8006026 <_strtod_l+0x286>
 8005f34:	2b2d      	cmp	r3, #45	; 0x2d
 8005f36:	d07b      	beq.n	8006030 <_strtod_l+0x290>
 8005f38:	2700      	movs	r7, #0
 8005f3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005f3e:	2909      	cmp	r1, #9
 8005f40:	f240 8082 	bls.w	8006048 <_strtod_l+0x2a8>
 8005f44:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f46:	2500      	movs	r5, #0
 8005f48:	e09e      	b.n	8006088 <_strtod_l+0x2e8>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e7c9      	b.n	8005ee2 <_strtod_l+0x142>
 8005f4e:	f1bb 0f08 	cmp.w	fp, #8
 8005f52:	bfd5      	itete	le
 8005f54:	9906      	ldrle	r1, [sp, #24]
 8005f56:	9905      	ldrgt	r1, [sp, #20]
 8005f58:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005f60:	f100 0001 	add.w	r0, r0, #1
 8005f64:	bfd4      	ite	le
 8005f66:	9306      	strle	r3, [sp, #24]
 8005f68:	9305      	strgt	r3, [sp, #20]
 8005f6a:	f10b 0b01 	add.w	fp, fp, #1
 8005f6e:	901b      	str	r0, [sp, #108]	; 0x6c
 8005f70:	e7bf      	b.n	8005ef2 <_strtod_l+0x152>
 8005f72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f74:	191a      	adds	r2, r3, r4
 8005f76:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f78:	5d1b      	ldrb	r3, [r3, r4]
 8005f7a:	f1bb 0f00 	cmp.w	fp, #0
 8005f7e:	d036      	beq.n	8005fee <_strtod_l+0x24e>
 8005f80:	465c      	mov	r4, fp
 8005f82:	9004      	str	r0, [sp, #16]
 8005f84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005f88:	2a09      	cmp	r2, #9
 8005f8a:	d912      	bls.n	8005fb2 <_strtod_l+0x212>
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	e7c2      	b.n	8005f16 <_strtod_l+0x176>
 8005f90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f92:	3001      	adds	r0, #1
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b30      	cmp	r3, #48	; 0x30
 8005f9c:	d0f8      	beq.n	8005f90 <_strtod_l+0x1f0>
 8005f9e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005fa2:	2a08      	cmp	r2, #8
 8005fa4:	f200 84dc 	bhi.w	8006960 <_strtod_l+0xbc0>
 8005fa8:	9004      	str	r0, [sp, #16]
 8005faa:	2000      	movs	r0, #0
 8005fac:	4604      	mov	r4, r0
 8005fae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005fb0:	9208      	str	r2, [sp, #32]
 8005fb2:	3b30      	subs	r3, #48	; 0x30
 8005fb4:	f100 0201 	add.w	r2, r0, #1
 8005fb8:	d013      	beq.n	8005fe2 <_strtod_l+0x242>
 8005fba:	9904      	ldr	r1, [sp, #16]
 8005fbc:	1905      	adds	r5, r0, r4
 8005fbe:	4411      	add	r1, r2
 8005fc0:	9104      	str	r1, [sp, #16]
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	210a      	movs	r1, #10
 8005fc6:	42aa      	cmp	r2, r5
 8005fc8:	d113      	bne.n	8005ff2 <_strtod_l+0x252>
 8005fca:	1822      	adds	r2, r4, r0
 8005fcc:	2a08      	cmp	r2, #8
 8005fce:	f104 0401 	add.w	r4, r4, #1
 8005fd2:	4404      	add	r4, r0
 8005fd4:	dc1b      	bgt.n	800600e <_strtod_l+0x26e>
 8005fd6:	220a      	movs	r2, #10
 8005fd8:	9906      	ldr	r1, [sp, #24]
 8005fda:	fb02 3301 	mla	r3, r2, r1, r3
 8005fde:	9306      	str	r3, [sp, #24]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	911b      	str	r1, [sp, #108]	; 0x6c
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	e7ca      	b.n	8005f84 <_strtod_l+0x1e4>
 8005fee:	4658      	mov	r0, fp
 8005ff0:	e7d3      	b.n	8005f9a <_strtod_l+0x1fa>
 8005ff2:	2a08      	cmp	r2, #8
 8005ff4:	dc04      	bgt.n	8006000 <_strtod_l+0x260>
 8005ff6:	9f06      	ldr	r7, [sp, #24]
 8005ff8:	434f      	muls	r7, r1
 8005ffa:	9706      	str	r7, [sp, #24]
 8005ffc:	3201      	adds	r2, #1
 8005ffe:	e7e2      	b.n	8005fc6 <_strtod_l+0x226>
 8006000:	1c57      	adds	r7, r2, #1
 8006002:	2f10      	cmp	r7, #16
 8006004:	bfde      	ittt	le
 8006006:	9f05      	ldrle	r7, [sp, #20]
 8006008:	434f      	mulle	r7, r1
 800600a:	9705      	strle	r7, [sp, #20]
 800600c:	e7f6      	b.n	8005ffc <_strtod_l+0x25c>
 800600e:	2c10      	cmp	r4, #16
 8006010:	bfdf      	itttt	le
 8006012:	220a      	movle	r2, #10
 8006014:	9905      	ldrle	r1, [sp, #20]
 8006016:	fb02 3301 	mlale	r3, r2, r1, r3
 800601a:	9305      	strle	r3, [sp, #20]
 800601c:	e7e0      	b.n	8005fe0 <_strtod_l+0x240>
 800601e:	2300      	movs	r3, #0
 8006020:	2201      	movs	r2, #1
 8006022:	9304      	str	r3, [sp, #16]
 8006024:	e77c      	b.n	8005f20 <_strtod_l+0x180>
 8006026:	2700      	movs	r7, #0
 8006028:	1cb3      	adds	r3, r6, #2
 800602a:	931b      	str	r3, [sp, #108]	; 0x6c
 800602c:	78b3      	ldrb	r3, [r6, #2]
 800602e:	e784      	b.n	8005f3a <_strtod_l+0x19a>
 8006030:	2701      	movs	r7, #1
 8006032:	e7f9      	b.n	8006028 <_strtod_l+0x288>
 8006034:	08009da0 	.word	0x08009da0
 8006038:	08009b4c 	.word	0x08009b4c
 800603c:	7ff00000 	.word	0x7ff00000
 8006040:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006042:	1c59      	adds	r1, r3, #1
 8006044:	911b      	str	r1, [sp, #108]	; 0x6c
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b30      	cmp	r3, #48	; 0x30
 800604a:	d0f9      	beq.n	8006040 <_strtod_l+0x2a0>
 800604c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006050:	2908      	cmp	r1, #8
 8006052:	f63f af78 	bhi.w	8005f46 <_strtod_l+0x1a6>
 8006056:	f04f 0e0a 	mov.w	lr, #10
 800605a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800605e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006060:	9309      	str	r3, [sp, #36]	; 0x24
 8006062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	911b      	str	r1, [sp, #108]	; 0x6c
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800606e:	2d09      	cmp	r5, #9
 8006070:	d935      	bls.n	80060de <_strtod_l+0x33e>
 8006072:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006074:	1b49      	subs	r1, r1, r5
 8006076:	2908      	cmp	r1, #8
 8006078:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800607c:	dc02      	bgt.n	8006084 <_strtod_l+0x2e4>
 800607e:	4565      	cmp	r5, ip
 8006080:	bfa8      	it	ge
 8006082:	4665      	movge	r5, ip
 8006084:	b107      	cbz	r7, 8006088 <_strtod_l+0x2e8>
 8006086:	426d      	negs	r5, r5
 8006088:	2c00      	cmp	r4, #0
 800608a:	d14c      	bne.n	8006126 <_strtod_l+0x386>
 800608c:	9907      	ldr	r1, [sp, #28]
 800608e:	4301      	orrs	r1, r0
 8006090:	f47f aec7 	bne.w	8005e22 <_strtod_l+0x82>
 8006094:	2a00      	cmp	r2, #0
 8006096:	f47f aee0 	bne.w	8005e5a <_strtod_l+0xba>
 800609a:	2b69      	cmp	r3, #105	; 0x69
 800609c:	d026      	beq.n	80060ec <_strtod_l+0x34c>
 800609e:	dc23      	bgt.n	80060e8 <_strtod_l+0x348>
 80060a0:	2b49      	cmp	r3, #73	; 0x49
 80060a2:	d023      	beq.n	80060ec <_strtod_l+0x34c>
 80060a4:	2b4e      	cmp	r3, #78	; 0x4e
 80060a6:	f47f aed8 	bne.w	8005e5a <_strtod_l+0xba>
 80060aa:	499c      	ldr	r1, [pc, #624]	; (800631c <_strtod_l+0x57c>)
 80060ac:	a81b      	add	r0, sp, #108	; 0x6c
 80060ae:	f001 fe2b 	bl	8007d08 <__match>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f43f aed1 	beq.w	8005e5a <_strtod_l+0xba>
 80060b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b28      	cmp	r3, #40	; 0x28
 80060be:	d12c      	bne.n	800611a <_strtod_l+0x37a>
 80060c0:	4997      	ldr	r1, [pc, #604]	; (8006320 <_strtod_l+0x580>)
 80060c2:	aa1e      	add	r2, sp, #120	; 0x78
 80060c4:	a81b      	add	r0, sp, #108	; 0x6c
 80060c6:	f001 fe33 	bl	8007d30 <__hexnan>
 80060ca:	2805      	cmp	r0, #5
 80060cc:	d125      	bne.n	800611a <_strtod_l+0x37a>
 80060ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80060d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80060d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80060d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80060dc:	e6a1      	b.n	8005e22 <_strtod_l+0x82>
 80060de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80060e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80060e6:	e7bc      	b.n	8006062 <_strtod_l+0x2c2>
 80060e8:	2b6e      	cmp	r3, #110	; 0x6e
 80060ea:	e7dc      	b.n	80060a6 <_strtod_l+0x306>
 80060ec:	498d      	ldr	r1, [pc, #564]	; (8006324 <_strtod_l+0x584>)
 80060ee:	a81b      	add	r0, sp, #108	; 0x6c
 80060f0:	f001 fe0a 	bl	8007d08 <__match>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f43f aeb0 	beq.w	8005e5a <_strtod_l+0xba>
 80060fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060fc:	498a      	ldr	r1, [pc, #552]	; (8006328 <_strtod_l+0x588>)
 80060fe:	3b01      	subs	r3, #1
 8006100:	a81b      	add	r0, sp, #108	; 0x6c
 8006102:	931b      	str	r3, [sp, #108]	; 0x6c
 8006104:	f001 fe00 	bl	8007d08 <__match>
 8006108:	b910      	cbnz	r0, 8006110 <_strtod_l+0x370>
 800610a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800610c:	3301      	adds	r3, #1
 800610e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006110:	f04f 0800 	mov.w	r8, #0
 8006114:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006338 <_strtod_l+0x598>
 8006118:	e683      	b.n	8005e22 <_strtod_l+0x82>
 800611a:	4884      	ldr	r0, [pc, #528]	; (800632c <_strtod_l+0x58c>)
 800611c:	f002 fd98 	bl	8008c50 <nan>
 8006120:	4680      	mov	r8, r0
 8006122:	4689      	mov	r9, r1
 8006124:	e67d      	b.n	8005e22 <_strtod_l+0x82>
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	f1bb 0f00 	cmp.w	fp, #0
 800612c:	bf08      	it	eq
 800612e:	46a3      	moveq	fp, r4
 8006130:	1aeb      	subs	r3, r5, r3
 8006132:	2c10      	cmp	r4, #16
 8006134:	9806      	ldr	r0, [sp, #24]
 8006136:	4626      	mov	r6, r4
 8006138:	9307      	str	r3, [sp, #28]
 800613a:	bfa8      	it	ge
 800613c:	2610      	movge	r6, #16
 800613e:	f7fa f951 	bl	80003e4 <__aeabi_ui2d>
 8006142:	2c09      	cmp	r4, #9
 8006144:	4680      	mov	r8, r0
 8006146:	4689      	mov	r9, r1
 8006148:	dd13      	ble.n	8006172 <_strtod_l+0x3d2>
 800614a:	4b79      	ldr	r3, [pc, #484]	; (8006330 <_strtod_l+0x590>)
 800614c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006150:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006154:	f7fa f9c0 	bl	80004d8 <__aeabi_dmul>
 8006158:	4680      	mov	r8, r0
 800615a:	9805      	ldr	r0, [sp, #20]
 800615c:	4689      	mov	r9, r1
 800615e:	f7fa f941 	bl	80003e4 <__aeabi_ui2d>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4640      	mov	r0, r8
 8006168:	4649      	mov	r1, r9
 800616a:	f7f9 ffff 	bl	800016c <__adddf3>
 800616e:	4680      	mov	r8, r0
 8006170:	4689      	mov	r9, r1
 8006172:	2c0f      	cmp	r4, #15
 8006174:	dc36      	bgt.n	80061e4 <_strtod_l+0x444>
 8006176:	9b07      	ldr	r3, [sp, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f43f ae52 	beq.w	8005e22 <_strtod_l+0x82>
 800617e:	dd22      	ble.n	80061c6 <_strtod_l+0x426>
 8006180:	2b16      	cmp	r3, #22
 8006182:	dc09      	bgt.n	8006198 <_strtod_l+0x3f8>
 8006184:	4c6a      	ldr	r4, [pc, #424]	; (8006330 <_strtod_l+0x590>)
 8006186:	4642      	mov	r2, r8
 8006188:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800618c:	464b      	mov	r3, r9
 800618e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	e7c3      	b.n	8006120 <_strtod_l+0x380>
 8006198:	9a07      	ldr	r2, [sp, #28]
 800619a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800619e:	4293      	cmp	r3, r2
 80061a0:	db20      	blt.n	80061e4 <_strtod_l+0x444>
 80061a2:	4d63      	ldr	r5, [pc, #396]	; (8006330 <_strtod_l+0x590>)
 80061a4:	f1c4 040f 	rsb	r4, r4, #15
 80061a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80061ac:	4642      	mov	r2, r8
 80061ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b2:	464b      	mov	r3, r9
 80061b4:	f7fa f990 	bl	80004d8 <__aeabi_dmul>
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	1b1c      	subs	r4, r3, r4
 80061bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80061c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061c4:	e7e5      	b.n	8006192 <_strtod_l+0x3f2>
 80061c6:	9b07      	ldr	r3, [sp, #28]
 80061c8:	3316      	adds	r3, #22
 80061ca:	db0b      	blt.n	80061e4 <_strtod_l+0x444>
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	4a58      	ldr	r2, [pc, #352]	; (8006330 <_strtod_l+0x590>)
 80061d0:	1b5d      	subs	r5, r3, r5
 80061d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80061d6:	4640      	mov	r0, r8
 80061d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061dc:	4649      	mov	r1, r9
 80061de:	f7fa faa5 	bl	800072c <__aeabi_ddiv>
 80061e2:	e79d      	b.n	8006120 <_strtod_l+0x380>
 80061e4:	9b07      	ldr	r3, [sp, #28]
 80061e6:	1ba6      	subs	r6, r4, r6
 80061e8:	441e      	add	r6, r3
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	dd71      	ble.n	80062d2 <_strtod_l+0x532>
 80061ee:	f016 030f 	ands.w	r3, r6, #15
 80061f2:	d00a      	beq.n	800620a <_strtod_l+0x46a>
 80061f4:	494e      	ldr	r1, [pc, #312]	; (8006330 <_strtod_l+0x590>)
 80061f6:	4642      	mov	r2, r8
 80061f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006200:	464b      	mov	r3, r9
 8006202:	f7fa f969 	bl	80004d8 <__aeabi_dmul>
 8006206:	4680      	mov	r8, r0
 8006208:	4689      	mov	r9, r1
 800620a:	f036 060f 	bics.w	r6, r6, #15
 800620e:	d050      	beq.n	80062b2 <_strtod_l+0x512>
 8006210:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006214:	dd27      	ble.n	8006266 <_strtod_l+0x4c6>
 8006216:	f04f 0b00 	mov.w	fp, #0
 800621a:	f8cd b010 	str.w	fp, [sp, #16]
 800621e:	f8cd b020 	str.w	fp, [sp, #32]
 8006222:	f8cd b018 	str.w	fp, [sp, #24]
 8006226:	2322      	movs	r3, #34	; 0x22
 8006228:	f04f 0800 	mov.w	r8, #0
 800622c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006338 <_strtod_l+0x598>
 8006230:	f8ca 3000 	str.w	r3, [sl]
 8006234:	9b08      	ldr	r3, [sp, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f43f adf3 	beq.w	8005e22 <_strtod_l+0x82>
 800623c:	4650      	mov	r0, sl
 800623e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006240:	f001 fe7e 	bl	8007f40 <_Bfree>
 8006244:	4650      	mov	r0, sl
 8006246:	9906      	ldr	r1, [sp, #24]
 8006248:	f001 fe7a 	bl	8007f40 <_Bfree>
 800624c:	4650      	mov	r0, sl
 800624e:	9904      	ldr	r1, [sp, #16]
 8006250:	f001 fe76 	bl	8007f40 <_Bfree>
 8006254:	4650      	mov	r0, sl
 8006256:	9908      	ldr	r1, [sp, #32]
 8006258:	f001 fe72 	bl	8007f40 <_Bfree>
 800625c:	4659      	mov	r1, fp
 800625e:	4650      	mov	r0, sl
 8006260:	f001 fe6e 	bl	8007f40 <_Bfree>
 8006264:	e5dd      	b.n	8005e22 <_strtod_l+0x82>
 8006266:	2300      	movs	r3, #0
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	461f      	mov	r7, r3
 800626e:	1136      	asrs	r6, r6, #4
 8006270:	2e01      	cmp	r6, #1
 8006272:	dc21      	bgt.n	80062b8 <_strtod_l+0x518>
 8006274:	b10b      	cbz	r3, 800627a <_strtod_l+0x4da>
 8006276:	4680      	mov	r8, r0
 8006278:	4689      	mov	r9, r1
 800627a:	4b2e      	ldr	r3, [pc, #184]	; (8006334 <_strtod_l+0x594>)
 800627c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006280:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006284:	4642      	mov	r2, r8
 8006286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800628a:	464b      	mov	r3, r9
 800628c:	f7fa f924 	bl	80004d8 <__aeabi_dmul>
 8006290:	4b29      	ldr	r3, [pc, #164]	; (8006338 <_strtod_l+0x598>)
 8006292:	460a      	mov	r2, r1
 8006294:	400b      	ands	r3, r1
 8006296:	4929      	ldr	r1, [pc, #164]	; (800633c <_strtod_l+0x59c>)
 8006298:	4680      	mov	r8, r0
 800629a:	428b      	cmp	r3, r1
 800629c:	d8bb      	bhi.n	8006216 <_strtod_l+0x476>
 800629e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80062a2:	428b      	cmp	r3, r1
 80062a4:	bf86      	itte	hi
 80062a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80062aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006340 <_strtod_l+0x5a0>
 80062ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80062b2:	2300      	movs	r3, #0
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	e07e      	b.n	80063b6 <_strtod_l+0x616>
 80062b8:	07f2      	lsls	r2, r6, #31
 80062ba:	d507      	bpl.n	80062cc <_strtod_l+0x52c>
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <_strtod_l+0x594>)
 80062be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7fa f907 	bl	80004d8 <__aeabi_dmul>
 80062ca:	2301      	movs	r3, #1
 80062cc:	3701      	adds	r7, #1
 80062ce:	1076      	asrs	r6, r6, #1
 80062d0:	e7ce      	b.n	8006270 <_strtod_l+0x4d0>
 80062d2:	d0ee      	beq.n	80062b2 <_strtod_l+0x512>
 80062d4:	4276      	negs	r6, r6
 80062d6:	f016 020f 	ands.w	r2, r6, #15
 80062da:	d00a      	beq.n	80062f2 <_strtod_l+0x552>
 80062dc:	4b14      	ldr	r3, [pc, #80]	; (8006330 <_strtod_l+0x590>)
 80062de:	4640      	mov	r0, r8
 80062e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e4:	4649      	mov	r1, r9
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa fa1f 	bl	800072c <__aeabi_ddiv>
 80062ee:	4680      	mov	r8, r0
 80062f0:	4689      	mov	r9, r1
 80062f2:	1136      	asrs	r6, r6, #4
 80062f4:	d0dd      	beq.n	80062b2 <_strtod_l+0x512>
 80062f6:	2e1f      	cmp	r6, #31
 80062f8:	dd24      	ble.n	8006344 <_strtod_l+0x5a4>
 80062fa:	f04f 0b00 	mov.w	fp, #0
 80062fe:	f8cd b010 	str.w	fp, [sp, #16]
 8006302:	f8cd b020 	str.w	fp, [sp, #32]
 8006306:	f8cd b018 	str.w	fp, [sp, #24]
 800630a:	2322      	movs	r3, #34	; 0x22
 800630c:	f04f 0800 	mov.w	r8, #0
 8006310:	f04f 0900 	mov.w	r9, #0
 8006314:	f8ca 3000 	str.w	r3, [sl]
 8006318:	e78c      	b.n	8006234 <_strtod_l+0x494>
 800631a:	bf00      	nop
 800631c:	08009b1d 	.word	0x08009b1d
 8006320:	08009b60 	.word	0x08009b60
 8006324:	08009b15 	.word	0x08009b15
 8006328:	08009ca4 	.word	0x08009ca4
 800632c:	08009f60 	.word	0x08009f60
 8006330:	08009e40 	.word	0x08009e40
 8006334:	08009e18 	.word	0x08009e18
 8006338:	7ff00000 	.word	0x7ff00000
 800633c:	7ca00000 	.word	0x7ca00000
 8006340:	7fefffff 	.word	0x7fefffff
 8006344:	f016 0310 	ands.w	r3, r6, #16
 8006348:	bf18      	it	ne
 800634a:	236a      	movne	r3, #106	; 0x6a
 800634c:	4640      	mov	r0, r8
 800634e:	9305      	str	r3, [sp, #20]
 8006350:	4649      	mov	r1, r9
 8006352:	2300      	movs	r3, #0
 8006354:	4fb2      	ldr	r7, [pc, #712]	; (8006620 <_strtod_l+0x880>)
 8006356:	07f2      	lsls	r2, r6, #31
 8006358:	d504      	bpl.n	8006364 <_strtod_l+0x5c4>
 800635a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635e:	f7fa f8bb 	bl	80004d8 <__aeabi_dmul>
 8006362:	2301      	movs	r3, #1
 8006364:	1076      	asrs	r6, r6, #1
 8006366:	f107 0708 	add.w	r7, r7, #8
 800636a:	d1f4      	bne.n	8006356 <_strtod_l+0x5b6>
 800636c:	b10b      	cbz	r3, 8006372 <_strtod_l+0x5d2>
 800636e:	4680      	mov	r8, r0
 8006370:	4689      	mov	r9, r1
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	b1bb      	cbz	r3, 80063a6 <_strtod_l+0x606>
 8006376:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800637a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800637e:	2b00      	cmp	r3, #0
 8006380:	4649      	mov	r1, r9
 8006382:	dd10      	ble.n	80063a6 <_strtod_l+0x606>
 8006384:	2b1f      	cmp	r3, #31
 8006386:	f340 812b 	ble.w	80065e0 <_strtod_l+0x840>
 800638a:	2b34      	cmp	r3, #52	; 0x34
 800638c:	bfd8      	it	le
 800638e:	f04f 32ff 	movle.w	r2, #4294967295
 8006392:	f04f 0800 	mov.w	r8, #0
 8006396:	bfcf      	iteee	gt
 8006398:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800639c:	3b20      	suble	r3, #32
 800639e:	fa02 f303 	lslle.w	r3, r2, r3
 80063a2:	ea03 0901 	andle.w	r9, r3, r1
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7fa fafb 	bl	80009a8 <__aeabi_dcmpeq>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d1a1      	bne.n	80062fa <_strtod_l+0x55a>
 80063b6:	9b06      	ldr	r3, [sp, #24]
 80063b8:	465a      	mov	r2, fp
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	4650      	mov	r0, sl
 80063be:	4623      	mov	r3, r4
 80063c0:	9908      	ldr	r1, [sp, #32]
 80063c2:	f001 fe29 	bl	8008018 <__s2b>
 80063c6:	9008      	str	r0, [sp, #32]
 80063c8:	2800      	cmp	r0, #0
 80063ca:	f43f af24 	beq.w	8006216 <_strtod_l+0x476>
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	f04f 0b00 	mov.w	fp, #0
 80063d4:	1b5d      	subs	r5, r3, r5
 80063d6:	9b07      	ldr	r3, [sp, #28]
 80063d8:	f8cd b010 	str.w	fp, [sp, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfb4      	ite	lt
 80063e0:	462b      	movlt	r3, r5
 80063e2:	2300      	movge	r3, #0
 80063e4:	930e      	str	r3, [sp, #56]	; 0x38
 80063e6:	9b07      	ldr	r3, [sp, #28]
 80063e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063ec:	9316      	str	r3, [sp, #88]	; 0x58
 80063ee:	9b08      	ldr	r3, [sp, #32]
 80063f0:	4650      	mov	r0, sl
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	f001 fd64 	bl	8007ec0 <_Balloc>
 80063f8:	9006      	str	r0, [sp, #24]
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f43f af13 	beq.w	8006226 <_strtod_l+0x486>
 8006400:	9b08      	ldr	r3, [sp, #32]
 8006402:	300c      	adds	r0, #12
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	f103 010c 	add.w	r1, r3, #12
 800640a:	3202      	adds	r2, #2
 800640c:	0092      	lsls	r2, r2, #2
 800640e:	f7fe fdf7 	bl	8005000 <memcpy>
 8006412:	ab1e      	add	r3, sp, #120	; 0x78
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	ab1d      	add	r3, sp, #116	; 0x74
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4642      	mov	r2, r8
 800641c:	464b      	mov	r3, r9
 800641e:	4650      	mov	r0, sl
 8006420:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006424:	f002 f936 	bl	8008694 <__d2b>
 8006428:	901c      	str	r0, [sp, #112]	; 0x70
 800642a:	2800      	cmp	r0, #0
 800642c:	f43f aefb 	beq.w	8006226 <_strtod_l+0x486>
 8006430:	2101      	movs	r1, #1
 8006432:	4650      	mov	r0, sl
 8006434:	f001 fe88 	bl	8008148 <__i2b>
 8006438:	4603      	mov	r3, r0
 800643a:	9004      	str	r0, [sp, #16]
 800643c:	2800      	cmp	r0, #0
 800643e:	f43f aef2 	beq.w	8006226 <_strtod_l+0x486>
 8006442:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006444:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006446:	2d00      	cmp	r5, #0
 8006448:	bfab      	itete	ge
 800644a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800644c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800644e:	18ee      	addge	r6, r5, r3
 8006450:	1b5c      	sublt	r4, r3, r5
 8006452:	9b05      	ldr	r3, [sp, #20]
 8006454:	bfa8      	it	ge
 8006456:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006458:	eba5 0503 	sub.w	r5, r5, r3
 800645c:	4415      	add	r5, r2
 800645e:	4b71      	ldr	r3, [pc, #452]	; (8006624 <_strtod_l+0x884>)
 8006460:	f105 35ff 	add.w	r5, r5, #4294967295
 8006464:	bfb8      	it	lt
 8006466:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006468:	429d      	cmp	r5, r3
 800646a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800646e:	f280 80c9 	bge.w	8006604 <_strtod_l+0x864>
 8006472:	1b5b      	subs	r3, r3, r5
 8006474:	2b1f      	cmp	r3, #31
 8006476:	f04f 0701 	mov.w	r7, #1
 800647a:	eba2 0203 	sub.w	r2, r2, r3
 800647e:	f300 80b6 	bgt.w	80065ee <_strtod_l+0x84e>
 8006482:	2500      	movs	r5, #0
 8006484:	fa07 f303 	lsl.w	r3, r7, r3
 8006488:	930f      	str	r3, [sp, #60]	; 0x3c
 800648a:	18b7      	adds	r7, r6, r2
 800648c:	9b05      	ldr	r3, [sp, #20]
 800648e:	42be      	cmp	r6, r7
 8006490:	4414      	add	r4, r2
 8006492:	441c      	add	r4, r3
 8006494:	4633      	mov	r3, r6
 8006496:	bfa8      	it	ge
 8006498:	463b      	movge	r3, r7
 800649a:	42a3      	cmp	r3, r4
 800649c:	bfa8      	it	ge
 800649e:	4623      	movge	r3, r4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bfc2      	ittt	gt
 80064a4:	1aff      	subgt	r7, r7, r3
 80064a6:	1ae4      	subgt	r4, r4, r3
 80064a8:	1af6      	subgt	r6, r6, r3
 80064aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dd17      	ble.n	80064e0 <_strtod_l+0x740>
 80064b0:	461a      	mov	r2, r3
 80064b2:	4650      	mov	r0, sl
 80064b4:	9904      	ldr	r1, [sp, #16]
 80064b6:	f001 ff01 	bl	80082bc <__pow5mult>
 80064ba:	9004      	str	r0, [sp, #16]
 80064bc:	2800      	cmp	r0, #0
 80064be:	f43f aeb2 	beq.w	8006226 <_strtod_l+0x486>
 80064c2:	4601      	mov	r1, r0
 80064c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80064c6:	4650      	mov	r0, sl
 80064c8:	f001 fe54 	bl	8008174 <__multiply>
 80064cc:	9009      	str	r0, [sp, #36]	; 0x24
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f43f aea9 	beq.w	8006226 <_strtod_l+0x486>
 80064d4:	4650      	mov	r0, sl
 80064d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064d8:	f001 fd32 	bl	8007f40 <_Bfree>
 80064dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064de:	931c      	str	r3, [sp, #112]	; 0x70
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f300 8093 	bgt.w	800660c <_strtod_l+0x86c>
 80064e6:	9b07      	ldr	r3, [sp, #28]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dd08      	ble.n	80064fe <_strtod_l+0x75e>
 80064ec:	4650      	mov	r0, sl
 80064ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80064f0:	9906      	ldr	r1, [sp, #24]
 80064f2:	f001 fee3 	bl	80082bc <__pow5mult>
 80064f6:	9006      	str	r0, [sp, #24]
 80064f8:	2800      	cmp	r0, #0
 80064fa:	f43f ae94 	beq.w	8006226 <_strtod_l+0x486>
 80064fe:	2c00      	cmp	r4, #0
 8006500:	dd08      	ble.n	8006514 <_strtod_l+0x774>
 8006502:	4622      	mov	r2, r4
 8006504:	4650      	mov	r0, sl
 8006506:	9906      	ldr	r1, [sp, #24]
 8006508:	f001 ff32 	bl	8008370 <__lshift>
 800650c:	9006      	str	r0, [sp, #24]
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f ae89 	beq.w	8006226 <_strtod_l+0x486>
 8006514:	2e00      	cmp	r6, #0
 8006516:	dd08      	ble.n	800652a <_strtod_l+0x78a>
 8006518:	4632      	mov	r2, r6
 800651a:	4650      	mov	r0, sl
 800651c:	9904      	ldr	r1, [sp, #16]
 800651e:	f001 ff27 	bl	8008370 <__lshift>
 8006522:	9004      	str	r0, [sp, #16]
 8006524:	2800      	cmp	r0, #0
 8006526:	f43f ae7e 	beq.w	8006226 <_strtod_l+0x486>
 800652a:	4650      	mov	r0, sl
 800652c:	9a06      	ldr	r2, [sp, #24]
 800652e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006530:	f001 ffa6 	bl	8008480 <__mdiff>
 8006534:	4683      	mov	fp, r0
 8006536:	2800      	cmp	r0, #0
 8006538:	f43f ae75 	beq.w	8006226 <_strtod_l+0x486>
 800653c:	2400      	movs	r4, #0
 800653e:	68c3      	ldr	r3, [r0, #12]
 8006540:	9904      	ldr	r1, [sp, #16]
 8006542:	60c4      	str	r4, [r0, #12]
 8006544:	930d      	str	r3, [sp, #52]	; 0x34
 8006546:	f001 ff7f 	bl	8008448 <__mcmp>
 800654a:	42a0      	cmp	r0, r4
 800654c:	da70      	bge.n	8006630 <_strtod_l+0x890>
 800654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006550:	ea53 0308 	orrs.w	r3, r3, r8
 8006554:	f040 8096 	bne.w	8006684 <_strtod_l+0x8e4>
 8006558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 8091 	bne.w	8006684 <_strtod_l+0x8e4>
 8006562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006566:	0d1b      	lsrs	r3, r3, #20
 8006568:	051b      	lsls	r3, r3, #20
 800656a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800656e:	f240 8089 	bls.w	8006684 <_strtod_l+0x8e4>
 8006572:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006576:	b923      	cbnz	r3, 8006582 <_strtod_l+0x7e2>
 8006578:	f8db 3010 	ldr.w	r3, [fp, #16]
 800657c:	2b01      	cmp	r3, #1
 800657e:	f340 8081 	ble.w	8006684 <_strtod_l+0x8e4>
 8006582:	4659      	mov	r1, fp
 8006584:	2201      	movs	r2, #1
 8006586:	4650      	mov	r0, sl
 8006588:	f001 fef2 	bl	8008370 <__lshift>
 800658c:	9904      	ldr	r1, [sp, #16]
 800658e:	4683      	mov	fp, r0
 8006590:	f001 ff5a 	bl	8008448 <__mcmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	dd75      	ble.n	8006684 <_strtod_l+0x8e4>
 8006598:	9905      	ldr	r1, [sp, #20]
 800659a:	464b      	mov	r3, r9
 800659c:	4a22      	ldr	r2, [pc, #136]	; (8006628 <_strtod_l+0x888>)
 800659e:	2900      	cmp	r1, #0
 80065a0:	f000 8091 	beq.w	80066c6 <_strtod_l+0x926>
 80065a4:	ea02 0109 	and.w	r1, r2, r9
 80065a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80065ac:	f300 808b 	bgt.w	80066c6 <_strtod_l+0x926>
 80065b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80065b4:	f77f aea9 	ble.w	800630a <_strtod_l+0x56a>
 80065b8:	2300      	movs	r3, #0
 80065ba:	4a1c      	ldr	r2, [pc, #112]	; (800662c <_strtod_l+0x88c>)
 80065bc:	4640      	mov	r0, r8
 80065be:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80065c2:	4649      	mov	r1, r9
 80065c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80065c8:	f7f9 ff86 	bl	80004d8 <__aeabi_dmul>
 80065cc:	460b      	mov	r3, r1
 80065ce:	4303      	orrs	r3, r0
 80065d0:	bf08      	it	eq
 80065d2:	2322      	moveq	r3, #34	; 0x22
 80065d4:	4680      	mov	r8, r0
 80065d6:	4689      	mov	r9, r1
 80065d8:	bf08      	it	eq
 80065da:	f8ca 3000 	streq.w	r3, [sl]
 80065de:	e62d      	b.n	800623c <_strtod_l+0x49c>
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	ea03 0808 	and.w	r8, r3, r8
 80065ec:	e6db      	b.n	80063a6 <_strtod_l+0x606>
 80065ee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80065f2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80065f6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80065fa:	35e2      	adds	r5, #226	; 0xe2
 80065fc:	fa07 f505 	lsl.w	r5, r7, r5
 8006600:	970f      	str	r7, [sp, #60]	; 0x3c
 8006602:	e742      	b.n	800648a <_strtod_l+0x6ea>
 8006604:	2301      	movs	r3, #1
 8006606:	2500      	movs	r5, #0
 8006608:	930f      	str	r3, [sp, #60]	; 0x3c
 800660a:	e73e      	b.n	800648a <_strtod_l+0x6ea>
 800660c:	463a      	mov	r2, r7
 800660e:	4650      	mov	r0, sl
 8006610:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006612:	f001 fead 	bl	8008370 <__lshift>
 8006616:	901c      	str	r0, [sp, #112]	; 0x70
 8006618:	2800      	cmp	r0, #0
 800661a:	f47f af64 	bne.w	80064e6 <_strtod_l+0x746>
 800661e:	e602      	b.n	8006226 <_strtod_l+0x486>
 8006620:	08009b78 	.word	0x08009b78
 8006624:	fffffc02 	.word	0xfffffc02
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	39500000 	.word	0x39500000
 8006630:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006634:	d166      	bne.n	8006704 <_strtod_l+0x964>
 8006636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800663c:	b35a      	cbz	r2, 8006696 <_strtod_l+0x8f6>
 800663e:	4a9c      	ldr	r2, [pc, #624]	; (80068b0 <_strtod_l+0xb10>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d12c      	bne.n	800669e <_strtod_l+0x8fe>
 8006644:	9b05      	ldr	r3, [sp, #20]
 8006646:	4640      	mov	r0, r8
 8006648:	b303      	cbz	r3, 800668c <_strtod_l+0x8ec>
 800664a:	464b      	mov	r3, r9
 800664c:	4a99      	ldr	r2, [pc, #612]	; (80068b4 <_strtod_l+0xb14>)
 800664e:	f04f 31ff 	mov.w	r1, #4294967295
 8006652:	401a      	ands	r2, r3
 8006654:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006658:	d81b      	bhi.n	8006692 <_strtod_l+0x8f2>
 800665a:	0d12      	lsrs	r2, r2, #20
 800665c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	4298      	cmp	r0, r3
 8006666:	d11a      	bne.n	800669e <_strtod_l+0x8fe>
 8006668:	4b93      	ldr	r3, [pc, #588]	; (80068b8 <_strtod_l+0xb18>)
 800666a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666c:	429a      	cmp	r2, r3
 800666e:	d102      	bne.n	8006676 <_strtod_l+0x8d6>
 8006670:	3001      	adds	r0, #1
 8006672:	f43f add8 	beq.w	8006226 <_strtod_l+0x486>
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	4b8e      	ldr	r3, [pc, #568]	; (80068b4 <_strtod_l+0xb14>)
 800667c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800667e:	401a      	ands	r2, r3
 8006680:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006684:	9b05      	ldr	r3, [sp, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d196      	bne.n	80065b8 <_strtod_l+0x818>
 800668a:	e5d7      	b.n	800623c <_strtod_l+0x49c>
 800668c:	f04f 33ff 	mov.w	r3, #4294967295
 8006690:	e7e8      	b.n	8006664 <_strtod_l+0x8c4>
 8006692:	460b      	mov	r3, r1
 8006694:	e7e6      	b.n	8006664 <_strtod_l+0x8c4>
 8006696:	ea53 0308 	orrs.w	r3, r3, r8
 800669a:	f43f af7d 	beq.w	8006598 <_strtod_l+0x7f8>
 800669e:	b1e5      	cbz	r5, 80066da <_strtod_l+0x93a>
 80066a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a2:	421d      	tst	r5, r3
 80066a4:	d0ee      	beq.n	8006684 <_strtod_l+0x8e4>
 80066a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a8:	4640      	mov	r0, r8
 80066aa:	4649      	mov	r1, r9
 80066ac:	9a05      	ldr	r2, [sp, #20]
 80066ae:	b1c3      	cbz	r3, 80066e2 <_strtod_l+0x942>
 80066b0:	f7ff fb52 	bl	8005d58 <sulp>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066bc:	f7f9 fd56 	bl	800016c <__adddf3>
 80066c0:	4680      	mov	r8, r0
 80066c2:	4689      	mov	r9, r1
 80066c4:	e7de      	b.n	8006684 <_strtod_l+0x8e4>
 80066c6:	4013      	ands	r3, r2
 80066c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80066cc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80066d0:	f04f 38ff 	mov.w	r8, #4294967295
 80066d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80066d8:	e7d4      	b.n	8006684 <_strtod_l+0x8e4>
 80066da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066dc:	ea13 0f08 	tst.w	r3, r8
 80066e0:	e7e0      	b.n	80066a4 <_strtod_l+0x904>
 80066e2:	f7ff fb39 	bl	8005d58 <sulp>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066ee:	f7f9 fd3b 	bl	8000168 <__aeabi_dsub>
 80066f2:	2200      	movs	r2, #0
 80066f4:	2300      	movs	r3, #0
 80066f6:	4680      	mov	r8, r0
 80066f8:	4689      	mov	r9, r1
 80066fa:	f7fa f955 	bl	80009a8 <__aeabi_dcmpeq>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d0c0      	beq.n	8006684 <_strtod_l+0x8e4>
 8006702:	e602      	b.n	800630a <_strtod_l+0x56a>
 8006704:	4658      	mov	r0, fp
 8006706:	9904      	ldr	r1, [sp, #16]
 8006708:	f002 f820 	bl	800874c <__ratio>
 800670c:	2200      	movs	r2, #0
 800670e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006712:	4606      	mov	r6, r0
 8006714:	460f      	mov	r7, r1
 8006716:	f7fa f95b 	bl	80009d0 <__aeabi_dcmple>
 800671a:	2800      	cmp	r0, #0
 800671c:	d075      	beq.n	800680a <_strtod_l+0xa6a>
 800671e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006720:	2b00      	cmp	r3, #0
 8006722:	d047      	beq.n	80067b4 <_strtod_l+0xa14>
 8006724:	2600      	movs	r6, #0
 8006726:	4f65      	ldr	r7, [pc, #404]	; (80068bc <_strtod_l+0xb1c>)
 8006728:	4d64      	ldr	r5, [pc, #400]	; (80068bc <_strtod_l+0xb1c>)
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006730:	0d1b      	lsrs	r3, r3, #20
 8006732:	051b      	lsls	r3, r3, #20
 8006734:	930f      	str	r3, [sp, #60]	; 0x3c
 8006736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <_strtod_l+0xb20>)
 800673a:	429a      	cmp	r2, r3
 800673c:	f040 80c8 	bne.w	80068d0 <_strtod_l+0xb30>
 8006740:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006744:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	4640      	mov	r0, r8
 800674c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006750:	4649      	mov	r1, r9
 8006752:	f001 ff25 	bl	80085a0 <__ulp>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 febb 	bl	80004d8 <__aeabi_dmul>
 8006762:	4642      	mov	r2, r8
 8006764:	464b      	mov	r3, r9
 8006766:	f7f9 fd01 	bl	800016c <__adddf3>
 800676a:	460b      	mov	r3, r1
 800676c:	4951      	ldr	r1, [pc, #324]	; (80068b4 <_strtod_l+0xb14>)
 800676e:	4a55      	ldr	r2, [pc, #340]	; (80068c4 <_strtod_l+0xb24>)
 8006770:	4019      	ands	r1, r3
 8006772:	4291      	cmp	r1, r2
 8006774:	4680      	mov	r8, r0
 8006776:	d95e      	bls.n	8006836 <_strtod_l+0xa96>
 8006778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800677a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800677e:	4293      	cmp	r3, r2
 8006780:	d103      	bne.n	800678a <_strtod_l+0x9ea>
 8006782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006784:	3301      	adds	r3, #1
 8006786:	f43f ad4e 	beq.w	8006226 <_strtod_l+0x486>
 800678a:	f04f 38ff 	mov.w	r8, #4294967295
 800678e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80068b8 <_strtod_l+0xb18>
 8006792:	4650      	mov	r0, sl
 8006794:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006796:	f001 fbd3 	bl	8007f40 <_Bfree>
 800679a:	4650      	mov	r0, sl
 800679c:	9906      	ldr	r1, [sp, #24]
 800679e:	f001 fbcf 	bl	8007f40 <_Bfree>
 80067a2:	4650      	mov	r0, sl
 80067a4:	9904      	ldr	r1, [sp, #16]
 80067a6:	f001 fbcb 	bl	8007f40 <_Bfree>
 80067aa:	4659      	mov	r1, fp
 80067ac:	4650      	mov	r0, sl
 80067ae:	f001 fbc7 	bl	8007f40 <_Bfree>
 80067b2:	e61c      	b.n	80063ee <_strtod_l+0x64e>
 80067b4:	f1b8 0f00 	cmp.w	r8, #0
 80067b8:	d119      	bne.n	80067ee <_strtod_l+0xa4e>
 80067ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c0:	b9e3      	cbnz	r3, 80067fc <_strtod_l+0xa5c>
 80067c2:	2200      	movs	r2, #0
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	4b3c      	ldr	r3, [pc, #240]	; (80068bc <_strtod_l+0xb1c>)
 80067ca:	f7fa f8f7 	bl	80009bc <__aeabi_dcmplt>
 80067ce:	b9c8      	cbnz	r0, 8006804 <_strtod_l+0xa64>
 80067d0:	2200      	movs	r2, #0
 80067d2:	4630      	mov	r0, r6
 80067d4:	4639      	mov	r1, r7
 80067d6:	4b3c      	ldr	r3, [pc, #240]	; (80068c8 <_strtod_l+0xb28>)
 80067d8:	f7f9 fe7e 	bl	80004d8 <__aeabi_dmul>
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80067e4:	9418      	str	r4, [sp, #96]	; 0x60
 80067e6:	9319      	str	r3, [sp, #100]	; 0x64
 80067e8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80067ec:	e79d      	b.n	800672a <_strtod_l+0x98a>
 80067ee:	f1b8 0f01 	cmp.w	r8, #1
 80067f2:	d103      	bne.n	80067fc <_strtod_l+0xa5c>
 80067f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f43f ad87 	beq.w	800630a <_strtod_l+0x56a>
 80067fc:	2600      	movs	r6, #0
 80067fe:	2400      	movs	r4, #0
 8006800:	4f32      	ldr	r7, [pc, #200]	; (80068cc <_strtod_l+0xb2c>)
 8006802:	e791      	b.n	8006728 <_strtod_l+0x988>
 8006804:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006806:	4d30      	ldr	r5, [pc, #192]	; (80068c8 <_strtod_l+0xb28>)
 8006808:	e7ea      	b.n	80067e0 <_strtod_l+0xa40>
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <_strtod_l+0xb28>)
 800680c:	2200      	movs	r2, #0
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7f9 fe61 	bl	80004d8 <__aeabi_dmul>
 8006816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006818:	4604      	mov	r4, r0
 800681a:	460d      	mov	r5, r1
 800681c:	b933      	cbnz	r3, 800682c <_strtod_l+0xa8c>
 800681e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006822:	9010      	str	r0, [sp, #64]	; 0x40
 8006824:	9311      	str	r3, [sp, #68]	; 0x44
 8006826:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800682a:	e77e      	b.n	800672a <_strtod_l+0x98a>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006834:	e7f7      	b.n	8006826 <_strtod_l+0xa86>
 8006836:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800683a:	9b05      	ldr	r3, [sp, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1a8      	bne.n	8006792 <_strtod_l+0x9f2>
 8006840:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006846:	0d1b      	lsrs	r3, r3, #20
 8006848:	051b      	lsls	r3, r3, #20
 800684a:	429a      	cmp	r2, r3
 800684c:	d1a1      	bne.n	8006792 <_strtod_l+0x9f2>
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7fa fc7d 	bl	8001150 <__aeabi_d2lz>
 8006856:	f7f9 fe11 	bl	800047c <__aeabi_l2d>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7f9 fc81 	bl	8000168 <__aeabi_dsub>
 8006866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800686c:	ea43 0308 	orr.w	r3, r3, r8
 8006870:	4313      	orrs	r3, r2
 8006872:	4604      	mov	r4, r0
 8006874:	460d      	mov	r5, r1
 8006876:	d066      	beq.n	8006946 <_strtod_l+0xba6>
 8006878:	a309      	add	r3, pc, #36	; (adr r3, 80068a0 <_strtod_l+0xb00>)
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7fa f89d 	bl	80009bc <__aeabi_dcmplt>
 8006882:	2800      	cmp	r0, #0
 8006884:	f47f acda 	bne.w	800623c <_strtod_l+0x49c>
 8006888:	a307      	add	r3, pc, #28	; (adr r3, 80068a8 <_strtod_l+0xb08>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7fa f8b1 	bl	80009f8 <__aeabi_dcmpgt>
 8006896:	2800      	cmp	r0, #0
 8006898:	f43f af7b 	beq.w	8006792 <_strtod_l+0x9f2>
 800689c:	e4ce      	b.n	800623c <_strtod_l+0x49c>
 800689e:	bf00      	nop
 80068a0:	94a03595 	.word	0x94a03595
 80068a4:	3fdfffff 	.word	0x3fdfffff
 80068a8:	35afe535 	.word	0x35afe535
 80068ac:	3fe00000 	.word	0x3fe00000
 80068b0:	000fffff 	.word	0x000fffff
 80068b4:	7ff00000 	.word	0x7ff00000
 80068b8:	7fefffff 	.word	0x7fefffff
 80068bc:	3ff00000 	.word	0x3ff00000
 80068c0:	7fe00000 	.word	0x7fe00000
 80068c4:	7c9fffff 	.word	0x7c9fffff
 80068c8:	3fe00000 	.word	0x3fe00000
 80068cc:	bff00000 	.word	0xbff00000
 80068d0:	9b05      	ldr	r3, [sp, #20]
 80068d2:	b313      	cbz	r3, 800691a <_strtod_l+0xb7a>
 80068d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80068da:	d81e      	bhi.n	800691a <_strtod_l+0xb7a>
 80068dc:	a326      	add	r3, pc, #152	; (adr r3, 8006978 <_strtod_l+0xbd8>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	4620      	mov	r0, r4
 80068e4:	4629      	mov	r1, r5
 80068e6:	f7fa f873 	bl	80009d0 <__aeabi_dcmple>
 80068ea:	b190      	cbz	r0, 8006912 <_strtod_l+0xb72>
 80068ec:	4629      	mov	r1, r5
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7fa f8ca 	bl	8000a88 <__aeabi_d2uiz>
 80068f4:	2801      	cmp	r0, #1
 80068f6:	bf38      	it	cc
 80068f8:	2001      	movcc	r0, #1
 80068fa:	f7f9 fd73 	bl	80003e4 <__aeabi_ui2d>
 80068fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	b9d3      	cbnz	r3, 800693c <_strtod_l+0xb9c>
 8006906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800690a:	9012      	str	r0, [sp, #72]	; 0x48
 800690c:	9313      	str	r3, [sp, #76]	; 0x4c
 800690e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006914:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006918:	1a9f      	subs	r7, r3, r2
 800691a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800691e:	f001 fe3f 	bl	80085a0 <__ulp>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fdd5 	bl	80004d8 <__aeabi_dmul>
 800692e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006932:	f7f9 fc1b 	bl	800016c <__adddf3>
 8006936:	4680      	mov	r8, r0
 8006938:	4689      	mov	r9, r1
 800693a:	e77e      	b.n	800683a <_strtod_l+0xa9a>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006944:	e7e3      	b.n	800690e <_strtod_l+0xb6e>
 8006946:	a30e      	add	r3, pc, #56	; (adr r3, 8006980 <_strtod_l+0xbe0>)
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f7fa f836 	bl	80009bc <__aeabi_dcmplt>
 8006950:	e7a1      	b.n	8006896 <_strtod_l+0xaf6>
 8006952:	2300      	movs	r3, #0
 8006954:	930c      	str	r3, [sp, #48]	; 0x30
 8006956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006958:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	f7ff ba65 	b.w	8005e2a <_strtod_l+0x8a>
 8006960:	2b65      	cmp	r3, #101	; 0x65
 8006962:	f43f ab5c 	beq.w	800601e <_strtod_l+0x27e>
 8006966:	2b45      	cmp	r3, #69	; 0x45
 8006968:	f43f ab59 	beq.w	800601e <_strtod_l+0x27e>
 800696c:	2201      	movs	r2, #1
 800696e:	f7ff bb8d 	b.w	800608c <_strtod_l+0x2ec>
 8006972:	bf00      	nop
 8006974:	f3af 8000 	nop.w
 8006978:	ffc00000 	.word	0xffc00000
 800697c:	41dfffff 	.word	0x41dfffff
 8006980:	94a03595 	.word	0x94a03595
 8006984:	3fcfffff 	.word	0x3fcfffff

08006988 <_strtod_r>:
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <_strtod_r+0x8>)
 800698a:	f7ff ba09 	b.w	8005da0 <_strtod_l>
 800698e:	bf00      	nop
 8006990:	20000088 	.word	0x20000088

08006994 <_strtol_l.isra.0>:
 8006994:	2b01      	cmp	r3, #1
 8006996:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800699a:	4686      	mov	lr, r0
 800699c:	d001      	beq.n	80069a2 <_strtol_l.isra.0+0xe>
 800699e:	2b24      	cmp	r3, #36	; 0x24
 80069a0:	d906      	bls.n	80069b0 <_strtol_l.isra.0+0x1c>
 80069a2:	f7fe fb03 	bl	8004fac <__errno>
 80069a6:	2316      	movs	r3, #22
 80069a8:	6003      	str	r3, [r0, #0]
 80069aa:	2000      	movs	r0, #0
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	468c      	mov	ip, r1
 80069b2:	4e3a      	ldr	r6, [pc, #232]	; (8006a9c <_strtol_l.isra.0+0x108>)
 80069b4:	4660      	mov	r0, ip
 80069b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80069ba:	5da5      	ldrb	r5, [r4, r6]
 80069bc:	f015 0508 	ands.w	r5, r5, #8
 80069c0:	d1f8      	bne.n	80069b4 <_strtol_l.isra.0+0x20>
 80069c2:	2c2d      	cmp	r4, #45	; 0x2d
 80069c4:	d133      	bne.n	8006a2e <_strtol_l.isra.0+0x9a>
 80069c6:	f04f 0801 	mov.w	r8, #1
 80069ca:	f89c 4000 	ldrb.w	r4, [ip]
 80069ce:	f100 0c02 	add.w	ip, r0, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d05d      	beq.n	8006a92 <_strtol_l.isra.0+0xfe>
 80069d6:	2b10      	cmp	r3, #16
 80069d8:	d10c      	bne.n	80069f4 <_strtol_l.isra.0+0x60>
 80069da:	2c30      	cmp	r4, #48	; 0x30
 80069dc:	d10a      	bne.n	80069f4 <_strtol_l.isra.0+0x60>
 80069de:	f89c 0000 	ldrb.w	r0, [ip]
 80069e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80069e6:	2858      	cmp	r0, #88	; 0x58
 80069e8:	d14e      	bne.n	8006a88 <_strtol_l.isra.0+0xf4>
 80069ea:	2310      	movs	r3, #16
 80069ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80069f0:	f10c 0c02 	add.w	ip, ip, #2
 80069f4:	2500      	movs	r5, #0
 80069f6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80069fa:	3f01      	subs	r7, #1
 80069fc:	fbb7 f9f3 	udiv	r9, r7, r3
 8006a00:	4628      	mov	r0, r5
 8006a02:	fb03 7a19 	mls	sl, r3, r9, r7
 8006a06:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006a0a:	2e09      	cmp	r6, #9
 8006a0c:	d818      	bhi.n	8006a40 <_strtol_l.isra.0+0xac>
 8006a0e:	4634      	mov	r4, r6
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	dd24      	ble.n	8006a5e <_strtol_l.isra.0+0xca>
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	db1f      	blt.n	8006a58 <_strtol_l.isra.0+0xc4>
 8006a18:	4581      	cmp	r9, r0
 8006a1a:	d31d      	bcc.n	8006a58 <_strtol_l.isra.0+0xc4>
 8006a1c:	d101      	bne.n	8006a22 <_strtol_l.isra.0+0x8e>
 8006a1e:	45a2      	cmp	sl, r4
 8006a20:	db1a      	blt.n	8006a58 <_strtol_l.isra.0+0xc4>
 8006a22:	2501      	movs	r5, #1
 8006a24:	fb00 4003 	mla	r0, r0, r3, r4
 8006a28:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006a2c:	e7eb      	b.n	8006a06 <_strtol_l.isra.0+0x72>
 8006a2e:	2c2b      	cmp	r4, #43	; 0x2b
 8006a30:	bf08      	it	eq
 8006a32:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006a36:	46a8      	mov	r8, r5
 8006a38:	bf08      	it	eq
 8006a3a:	f100 0c02 	addeq.w	ip, r0, #2
 8006a3e:	e7c8      	b.n	80069d2 <_strtol_l.isra.0+0x3e>
 8006a40:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006a44:	2e19      	cmp	r6, #25
 8006a46:	d801      	bhi.n	8006a4c <_strtol_l.isra.0+0xb8>
 8006a48:	3c37      	subs	r4, #55	; 0x37
 8006a4a:	e7e1      	b.n	8006a10 <_strtol_l.isra.0+0x7c>
 8006a4c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006a50:	2e19      	cmp	r6, #25
 8006a52:	d804      	bhi.n	8006a5e <_strtol_l.isra.0+0xca>
 8006a54:	3c57      	subs	r4, #87	; 0x57
 8006a56:	e7db      	b.n	8006a10 <_strtol_l.isra.0+0x7c>
 8006a58:	f04f 35ff 	mov.w	r5, #4294967295
 8006a5c:	e7e4      	b.n	8006a28 <_strtol_l.isra.0+0x94>
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	da08      	bge.n	8006a74 <_strtol_l.isra.0+0xe0>
 8006a62:	2322      	movs	r3, #34	; 0x22
 8006a64:	4638      	mov	r0, r7
 8006a66:	f8ce 3000 	str.w	r3, [lr]
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	d09e      	beq.n	80069ac <_strtol_l.isra.0+0x18>
 8006a6e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006a72:	e007      	b.n	8006a84 <_strtol_l.isra.0+0xf0>
 8006a74:	f1b8 0f00 	cmp.w	r8, #0
 8006a78:	d000      	beq.n	8006a7c <_strtol_l.isra.0+0xe8>
 8006a7a:	4240      	negs	r0, r0
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d095      	beq.n	80069ac <_strtol_l.isra.0+0x18>
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	d1f4      	bne.n	8006a6e <_strtol_l.isra.0+0xda>
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	e791      	b.n	80069ac <_strtol_l.isra.0+0x18>
 8006a88:	2430      	movs	r4, #48	; 0x30
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1b2      	bne.n	80069f4 <_strtol_l.isra.0+0x60>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	e7b0      	b.n	80069f4 <_strtol_l.isra.0+0x60>
 8006a92:	2c30      	cmp	r4, #48	; 0x30
 8006a94:	d0a3      	beq.n	80069de <_strtol_l.isra.0+0x4a>
 8006a96:	230a      	movs	r3, #10
 8006a98:	e7ac      	b.n	80069f4 <_strtol_l.isra.0+0x60>
 8006a9a:	bf00      	nop
 8006a9c:	08009ba1 	.word	0x08009ba1

08006aa0 <_strtol_r>:
 8006aa0:	f7ff bf78 	b.w	8006994 <_strtol_l.isra.0>

08006aa4 <quorem>:
 8006aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	6903      	ldr	r3, [r0, #16]
 8006aaa:	690c      	ldr	r4, [r1, #16]
 8006aac:	4607      	mov	r7, r0
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	f2c0 8083 	blt.w	8006bba <quorem+0x116>
 8006ab4:	3c01      	subs	r4, #1
 8006ab6:	f100 0514 	add.w	r5, r0, #20
 8006aba:	f101 0814 	add.w	r8, r1, #20
 8006abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006acc:	3301      	adds	r3, #1
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ad4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ad8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006adc:	d332      	bcc.n	8006b44 <quorem+0xa0>
 8006ade:	f04f 0e00 	mov.w	lr, #0
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	46ac      	mov	ip, r5
 8006ae6:	46f2      	mov	sl, lr
 8006ae8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006aec:	b293      	uxth	r3, r2
 8006aee:	fb06 e303 	mla	r3, r6, r3, lr
 8006af2:	0c12      	lsrs	r2, r2, #16
 8006af4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006af8:	fb06 e202 	mla	r2, r6, r2, lr
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	ebaa 0303 	sub.w	r3, sl, r3
 8006b02:	f8dc a000 	ldr.w	sl, [ip]
 8006b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b0a:	fa1f fa8a 	uxth.w	sl, sl
 8006b0e:	4453      	add	r3, sl
 8006b10:	fa1f fa82 	uxth.w	sl, r2
 8006b14:	f8dc 2000 	ldr.w	r2, [ip]
 8006b18:	4581      	cmp	r9, r0
 8006b1a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b2c:	f84c 3b04 	str.w	r3, [ip], #4
 8006b30:	d2da      	bcs.n	8006ae8 <quorem+0x44>
 8006b32:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b36:	b92b      	cbnz	r3, 8006b44 <quorem+0xa0>
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	3b04      	subs	r3, #4
 8006b3c:	429d      	cmp	r5, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	d32f      	bcc.n	8006ba2 <quorem+0xfe>
 8006b42:	613c      	str	r4, [r7, #16]
 8006b44:	4638      	mov	r0, r7
 8006b46:	f001 fc7f 	bl	8008448 <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	db25      	blt.n	8006b9a <quorem+0xf6>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f04f 0c00 	mov.w	ip, #0
 8006b54:	3601      	adds	r6, #1
 8006b56:	f858 1b04 	ldr.w	r1, [r8], #4
 8006b5a:	f8d0 e000 	ldr.w	lr, [r0]
 8006b5e:	b28b      	uxth	r3, r1
 8006b60:	ebac 0303 	sub.w	r3, ip, r3
 8006b64:	fa1f f28e 	uxth.w	r2, lr
 8006b68:	4413      	add	r3, r2
 8006b6a:	0c0a      	lsrs	r2, r1, #16
 8006b6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b7a:	45c1      	cmp	r9, r8
 8006b7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b80:	f840 3b04 	str.w	r3, [r0], #4
 8006b84:	d2e7      	bcs.n	8006b56 <quorem+0xb2>
 8006b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b8e:	b922      	cbnz	r2, 8006b9a <quorem+0xf6>
 8006b90:	3b04      	subs	r3, #4
 8006b92:	429d      	cmp	r5, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	d30a      	bcc.n	8006bae <quorem+0x10a>
 8006b98:	613c      	str	r4, [r7, #16]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	b003      	add	sp, #12
 8006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	d1cb      	bne.n	8006b42 <quorem+0x9e>
 8006baa:	3c01      	subs	r4, #1
 8006bac:	e7c6      	b.n	8006b3c <quorem+0x98>
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	3b04      	subs	r3, #4
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d1f0      	bne.n	8006b98 <quorem+0xf4>
 8006bb6:	3c01      	subs	r4, #1
 8006bb8:	e7eb      	b.n	8006b92 <quorem+0xee>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e7ee      	b.n	8006b9c <quorem+0xf8>
	...

08006bc0 <_dtoa_r>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	461f      	mov	r7, r3
 8006bc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bca:	b099      	sub	sp, #100	; 0x64
 8006bcc:	4605      	mov	r5, r0
 8006bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006bd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006bd6:	b974      	cbnz	r4, 8006bf6 <_dtoa_r+0x36>
 8006bd8:	2010      	movs	r0, #16
 8006bda:	f001 f949 	bl	8007e70 <malloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6268      	str	r0, [r5, #36]	; 0x24
 8006be2:	b920      	cbnz	r0, 8006bee <_dtoa_r+0x2e>
 8006be4:	21ea      	movs	r1, #234	; 0xea
 8006be6:	4bae      	ldr	r3, [pc, #696]	; (8006ea0 <_dtoa_r+0x2e0>)
 8006be8:	48ae      	ldr	r0, [pc, #696]	; (8006ea4 <_dtoa_r+0x2e4>)
 8006bea:	f002 f867 	bl	8008cbc <__assert_func>
 8006bee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bf2:	6004      	str	r4, [r0, #0]
 8006bf4:	60c4      	str	r4, [r0, #12]
 8006bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bf8:	6819      	ldr	r1, [r3, #0]
 8006bfa:	b151      	cbz	r1, 8006c12 <_dtoa_r+0x52>
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4093      	lsls	r3, r2
 8006c02:	604a      	str	r2, [r1, #4]
 8006c04:	608b      	str	r3, [r1, #8]
 8006c06:	4628      	mov	r0, r5
 8006c08:	f001 f99a 	bl	8007f40 <_Bfree>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	1e3b      	subs	r3, r7, #0
 8006c14:	bfaf      	iteee	ge
 8006c16:	2300      	movge	r3, #0
 8006c18:	2201      	movlt	r2, #1
 8006c1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c1e:	9305      	strlt	r3, [sp, #20]
 8006c20:	bfa8      	it	ge
 8006c22:	f8c8 3000 	strge.w	r3, [r8]
 8006c26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c2a:	4b9f      	ldr	r3, [pc, #636]	; (8006ea8 <_dtoa_r+0x2e8>)
 8006c2c:	bfb8      	it	lt
 8006c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c32:	ea33 0309 	bics.w	r3, r3, r9
 8006c36:	d119      	bne.n	8006c6c <_dtoa_r+0xac>
 8006c38:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c44:	4333      	orrs	r3, r6
 8006c46:	f000 8580 	beq.w	800774a <_dtoa_r+0xb8a>
 8006c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c4c:	b953      	cbnz	r3, 8006c64 <_dtoa_r+0xa4>
 8006c4e:	4b97      	ldr	r3, [pc, #604]	; (8006eac <_dtoa_r+0x2ec>)
 8006c50:	e022      	b.n	8006c98 <_dtoa_r+0xd8>
 8006c52:	4b97      	ldr	r3, [pc, #604]	; (8006eb0 <_dtoa_r+0x2f0>)
 8006c54:	9308      	str	r3, [sp, #32]
 8006c56:	3308      	adds	r3, #8
 8006c58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	9808      	ldr	r0, [sp, #32]
 8006c5e:	b019      	add	sp, #100	; 0x64
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	4b91      	ldr	r3, [pc, #580]	; (8006eac <_dtoa_r+0x2ec>)
 8006c66:	9308      	str	r3, [sp, #32]
 8006c68:	3303      	adds	r3, #3
 8006c6a:	e7f5      	b.n	8006c58 <_dtoa_r+0x98>
 8006c6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f7f9 fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8006c80:	4680      	mov	r8, r0
 8006c82:	b158      	cbz	r0, 8006c9c <_dtoa_r+0xdc>
 8006c84:	2301      	movs	r3, #1
 8006c86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8559 	beq.w	8007744 <_dtoa_r+0xb84>
 8006c92:	4888      	ldr	r0, [pc, #544]	; (8006eb4 <_dtoa_r+0x2f4>)
 8006c94:	6018      	str	r0, [r3, #0]
 8006c96:	1e43      	subs	r3, r0, #1
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	e7df      	b.n	8006c5c <_dtoa_r+0x9c>
 8006c9c:	ab16      	add	r3, sp, #88	; 0x58
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	ab17      	add	r3, sp, #92	; 0x5c
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006caa:	f001 fcf3 	bl	8008694 <__d2b>
 8006cae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cb2:	4682      	mov	sl, r0
 8006cb4:	2c00      	cmp	r4, #0
 8006cb6:	d07e      	beq.n	8006db6 <_dtoa_r+0x1f6>
 8006cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006cca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006cce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4b78      	ldr	r3, [pc, #480]	; (8006eb8 <_dtoa_r+0x2f8>)
 8006cd6:	f7f9 fa47 	bl	8000168 <__aeabi_dsub>
 8006cda:	a36b      	add	r3, pc, #428	; (adr r3, 8006e88 <_dtoa_r+0x2c8>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8006e90 <_dtoa_r+0x2d0>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 fa3f 	bl	800016c <__adddf3>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	460f      	mov	r7, r1
 8006cf4:	f7f9 fb86 	bl	8000404 <__aeabi_i2d>
 8006cf8:	a367      	add	r3, pc, #412	; (adr r3, 8006e98 <_dtoa_r+0x2d8>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f7f9 fbeb 	bl	80004d8 <__aeabi_dmul>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4630      	mov	r0, r6
 8006d08:	4639      	mov	r1, r7
 8006d0a:	f7f9 fa2f 	bl	800016c <__adddf3>
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460f      	mov	r7, r1
 8006d12:	f7f9 fe91 	bl	8000a38 <__aeabi_d2iz>
 8006d16:	2200      	movs	r2, #0
 8006d18:	4681      	mov	r9, r0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4639      	mov	r1, r7
 8006d20:	f7f9 fe4c 	bl	80009bc <__aeabi_dcmplt>
 8006d24:	b148      	cbz	r0, 8006d3a <_dtoa_r+0x17a>
 8006d26:	4648      	mov	r0, r9
 8006d28:	f7f9 fb6c 	bl	8000404 <__aeabi_i2d>
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	463b      	mov	r3, r7
 8006d30:	f7f9 fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006d34:	b908      	cbnz	r0, 8006d3a <_dtoa_r+0x17a>
 8006d36:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d3a:	f1b9 0f16 	cmp.w	r9, #22
 8006d3e:	d857      	bhi.n	8006df0 <_dtoa_r+0x230>
 8006d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d44:	4b5d      	ldr	r3, [pc, #372]	; (8006ebc <_dtoa_r+0x2fc>)
 8006d46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fe35 	bl	80009bc <__aeabi_dcmplt>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d04e      	beq.n	8006df4 <_dtoa_r+0x234>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d60:	1b1c      	subs	r4, r3, r4
 8006d62:	1e63      	subs	r3, r4, #1
 8006d64:	9309      	str	r3, [sp, #36]	; 0x24
 8006d66:	bf49      	itett	mi
 8006d68:	f1c4 0301 	rsbmi	r3, r4, #1
 8006d6c:	2300      	movpl	r3, #0
 8006d6e:	9306      	strmi	r3, [sp, #24]
 8006d70:	2300      	movmi	r3, #0
 8006d72:	bf54      	ite	pl
 8006d74:	9306      	strpl	r3, [sp, #24]
 8006d76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d78:	f1b9 0f00 	cmp.w	r9, #0
 8006d7c:	db3c      	blt.n	8006df8 <_dtoa_r+0x238>
 8006d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d84:	444b      	add	r3, r9
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	2300      	movs	r3, #0
 8006d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d86c      	bhi.n	8006e6c <_dtoa_r+0x2ac>
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	bfc4      	itt	gt
 8006d96:	3b04      	subgt	r3, #4
 8006d98:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9c:	bfc8      	it	gt
 8006d9e:	2400      	movgt	r4, #0
 8006da0:	f1a3 0302 	sub.w	r3, r3, #2
 8006da4:	bfd8      	it	le
 8006da6:	2401      	movle	r4, #1
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	f200 808b 	bhi.w	8006ec4 <_dtoa_r+0x304>
 8006dae:	e8df f003 	tbb	[pc, r3]
 8006db2:	4f2d      	.short	0x4f2d
 8006db4:	5b4d      	.short	0x5b4d
 8006db6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006dba:	441c      	add	r4, r3
 8006dbc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	bfc3      	ittte	gt
 8006dc4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dc8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006dcc:	fa09 f303 	lslgt.w	r3, r9, r3
 8006dd0:	f1c3 0320 	rsble	r3, r3, #32
 8006dd4:	bfc6      	itte	gt
 8006dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dda:	4318      	orrgt	r0, r3
 8006ddc:	fa06 f003 	lslle.w	r0, r6, r3
 8006de0:	f7f9 fb00 	bl	80003e4 <__aeabi_ui2d>
 8006de4:	2301      	movs	r3, #1
 8006de6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006dea:	3c01      	subs	r4, #1
 8006dec:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dee:	e770      	b.n	8006cd2 <_dtoa_r+0x112>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e7b3      	b.n	8006d5c <_dtoa_r+0x19c>
 8006df4:	900f      	str	r0, [sp, #60]	; 0x3c
 8006df6:	e7b2      	b.n	8006d5e <_dtoa_r+0x19e>
 8006df8:	9b06      	ldr	r3, [sp, #24]
 8006dfa:	eba3 0309 	sub.w	r3, r3, r9
 8006dfe:	9306      	str	r3, [sp, #24]
 8006e00:	f1c9 0300 	rsb	r3, r9, #0
 8006e04:	930a      	str	r3, [sp, #40]	; 0x28
 8006e06:	2300      	movs	r3, #0
 8006e08:	930e      	str	r3, [sp, #56]	; 0x38
 8006e0a:	e7bf      	b.n	8006d8c <_dtoa_r+0x1cc>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dc59      	bgt.n	8006eca <_dtoa_r+0x30a>
 8006e16:	f04f 0b01 	mov.w	fp, #1
 8006e1a:	465b      	mov	r3, fp
 8006e1c:	f8cd b008 	str.w	fp, [sp, #8]
 8006e20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006e24:	2200      	movs	r2, #0
 8006e26:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e28:	6042      	str	r2, [r0, #4]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	f102 0614 	add.w	r6, r2, #20
 8006e30:	429e      	cmp	r6, r3
 8006e32:	6841      	ldr	r1, [r0, #4]
 8006e34:	d94f      	bls.n	8006ed6 <_dtoa_r+0x316>
 8006e36:	4628      	mov	r0, r5
 8006e38:	f001 f842 	bl	8007ec0 <_Balloc>
 8006e3c:	9008      	str	r0, [sp, #32]
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d14d      	bne.n	8006ede <_dtoa_r+0x31e>
 8006e42:	4602      	mov	r2, r0
 8006e44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e48:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <_dtoa_r+0x300>)
 8006e4a:	e6cd      	b.n	8006be8 <_dtoa_r+0x28>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e7de      	b.n	8006e0e <_dtoa_r+0x24e>
 8006e50:	2300      	movs	r3, #0
 8006e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e56:	eb09 0b03 	add.w	fp, r9, r3
 8006e5a:	f10b 0301 	add.w	r3, fp, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	bfb8      	it	lt
 8006e64:	2301      	movlt	r3, #1
 8006e66:	e7dd      	b.n	8006e24 <_dtoa_r+0x264>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e7f2      	b.n	8006e52 <_dtoa_r+0x292>
 8006e6c:	2401      	movs	r4, #1
 8006e6e:	2300      	movs	r3, #0
 8006e70:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e72:	9322      	str	r3, [sp, #136]	; 0x88
 8006e74:	f04f 3bff 	mov.w	fp, #4294967295
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2312      	movs	r3, #18
 8006e7c:	f8cd b008 	str.w	fp, [sp, #8]
 8006e80:	9223      	str	r2, [sp, #140]	; 0x8c
 8006e82:	e7cf      	b.n	8006e24 <_dtoa_r+0x264>
 8006e84:	f3af 8000 	nop.w
 8006e88:	636f4361 	.word	0x636f4361
 8006e8c:	3fd287a7 	.word	0x3fd287a7
 8006e90:	8b60c8b3 	.word	0x8b60c8b3
 8006e94:	3fc68a28 	.word	0x3fc68a28
 8006e98:	509f79fb 	.word	0x509f79fb
 8006e9c:	3fd34413 	.word	0x3fd34413
 8006ea0:	08009cae 	.word	0x08009cae
 8006ea4:	08009cc5 	.word	0x08009cc5
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	08009caa 	.word	0x08009caa
 8006eb0:	08009ca1 	.word	0x08009ca1
 8006eb4:	08009b21 	.word	0x08009b21
 8006eb8:	3ff80000 	.word	0x3ff80000
 8006ebc:	08009e40 	.word	0x08009e40
 8006ec0:	08009d24 	.word	0x08009d24
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ec8:	e7d4      	b.n	8006e74 <_dtoa_r+0x2b4>
 8006eca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006ece:	465b      	mov	r3, fp
 8006ed0:	f8cd b008 	str.w	fp, [sp, #8]
 8006ed4:	e7a6      	b.n	8006e24 <_dtoa_r+0x264>
 8006ed6:	3101      	adds	r1, #1
 8006ed8:	6041      	str	r1, [r0, #4]
 8006eda:	0052      	lsls	r2, r2, #1
 8006edc:	e7a6      	b.n	8006e2c <_dtoa_r+0x26c>
 8006ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ee0:	9a08      	ldr	r2, [sp, #32]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	9b02      	ldr	r3, [sp, #8]
 8006ee6:	2b0e      	cmp	r3, #14
 8006ee8:	f200 80a8 	bhi.w	800703c <_dtoa_r+0x47c>
 8006eec:	2c00      	cmp	r4, #0
 8006eee:	f000 80a5 	beq.w	800703c <_dtoa_r+0x47c>
 8006ef2:	f1b9 0f00 	cmp.w	r9, #0
 8006ef6:	dd34      	ble.n	8006f62 <_dtoa_r+0x3a2>
 8006ef8:	4a9a      	ldr	r2, [pc, #616]	; (8007164 <_dtoa_r+0x5a4>)
 8006efa:	f009 030f 	and.w	r3, r9, #15
 8006efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f02:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f0e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006f12:	d016      	beq.n	8006f42 <_dtoa_r+0x382>
 8006f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f18:	4b93      	ldr	r3, [pc, #588]	; (8007168 <_dtoa_r+0x5a8>)
 8006f1a:	2703      	movs	r7, #3
 8006f1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f20:	f7f9 fc04 	bl	800072c <__aeabi_ddiv>
 8006f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f28:	f004 040f 	and.w	r4, r4, #15
 8006f2c:	4e8e      	ldr	r6, [pc, #568]	; (8007168 <_dtoa_r+0x5a8>)
 8006f2e:	b954      	cbnz	r4, 8006f46 <_dtoa_r+0x386>
 8006f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f38:	f7f9 fbf8 	bl	800072c <__aeabi_ddiv>
 8006f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f40:	e029      	b.n	8006f96 <_dtoa_r+0x3d6>
 8006f42:	2702      	movs	r7, #2
 8006f44:	e7f2      	b.n	8006f2c <_dtoa_r+0x36c>
 8006f46:	07e1      	lsls	r1, r4, #31
 8006f48:	d508      	bpl.n	8006f5c <_dtoa_r+0x39c>
 8006f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f52:	f7f9 fac1 	bl	80004d8 <__aeabi_dmul>
 8006f56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f5a:	3701      	adds	r7, #1
 8006f5c:	1064      	asrs	r4, r4, #1
 8006f5e:	3608      	adds	r6, #8
 8006f60:	e7e5      	b.n	8006f2e <_dtoa_r+0x36e>
 8006f62:	f000 80a5 	beq.w	80070b0 <_dtoa_r+0x4f0>
 8006f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f6a:	f1c9 0400 	rsb	r4, r9, #0
 8006f6e:	4b7d      	ldr	r3, [pc, #500]	; (8007164 <_dtoa_r+0x5a4>)
 8006f70:	f004 020f 	and.w	r2, r4, #15
 8006f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f7f9 faac 	bl	80004d8 <__aeabi_dmul>
 8006f80:	2702      	movs	r7, #2
 8006f82:	2300      	movs	r3, #0
 8006f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f88:	4e77      	ldr	r6, [pc, #476]	; (8007168 <_dtoa_r+0x5a8>)
 8006f8a:	1124      	asrs	r4, r4, #4
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	f040 8084 	bne.w	800709a <_dtoa_r+0x4da>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1d2      	bne.n	8006f3c <_dtoa_r+0x37c>
 8006f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 808b 	beq.w	80070b4 <_dtoa_r+0x4f4>
 8006f9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006fa2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006faa:	2200      	movs	r2, #0
 8006fac:	4b6f      	ldr	r3, [pc, #444]	; (800716c <_dtoa_r+0x5ac>)
 8006fae:	f7f9 fd05 	bl	80009bc <__aeabi_dcmplt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d07e      	beq.n	80070b4 <_dtoa_r+0x4f4>
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d07b      	beq.n	80070b4 <_dtoa_r+0x4f4>
 8006fbc:	f1bb 0f00 	cmp.w	fp, #0
 8006fc0:	dd38      	ble.n	8007034 <_dtoa_r+0x474>
 8006fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4b69      	ldr	r3, [pc, #420]	; (8007170 <_dtoa_r+0x5b0>)
 8006fca:	f7f9 fa85 	bl	80004d8 <__aeabi_dmul>
 8006fce:	465c      	mov	r4, fp
 8006fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fd4:	f109 38ff 	add.w	r8, r9, #4294967295
 8006fd8:	3701      	adds	r7, #1
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f7f9 fa12 	bl	8000404 <__aeabi_i2d>
 8006fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe4:	f7f9 fa78 	bl	80004d8 <__aeabi_dmul>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b62      	ldr	r3, [pc, #392]	; (8007174 <_dtoa_r+0x5b4>)
 8006fec:	f7f9 f8be 	bl	800016c <__adddf3>
 8006ff0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ff8:	9611      	str	r6, [sp, #68]	; 0x44
 8006ffa:	2c00      	cmp	r4, #0
 8006ffc:	d15d      	bne.n	80070ba <_dtoa_r+0x4fa>
 8006ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007002:	2200      	movs	r2, #0
 8007004:	4b5c      	ldr	r3, [pc, #368]	; (8007178 <_dtoa_r+0x5b8>)
 8007006:	f7f9 f8af 	bl	8000168 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007012:	4633      	mov	r3, r6
 8007014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007016:	f7f9 fcef 	bl	80009f8 <__aeabi_dcmpgt>
 800701a:	2800      	cmp	r0, #0
 800701c:	f040 829e 	bne.w	800755c <_dtoa_r+0x99c>
 8007020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007026:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800702a:	f7f9 fcc7 	bl	80009bc <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8292 	bne.w	8007558 <_dtoa_r+0x998>
 8007034:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800703c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703e:	2b00      	cmp	r3, #0
 8007040:	f2c0 8153 	blt.w	80072ea <_dtoa_r+0x72a>
 8007044:	f1b9 0f0e 	cmp.w	r9, #14
 8007048:	f300 814f 	bgt.w	80072ea <_dtoa_r+0x72a>
 800704c:	4b45      	ldr	r3, [pc, #276]	; (8007164 <_dtoa_r+0x5a4>)
 800704e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007056:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800705a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800705c:	2b00      	cmp	r3, #0
 800705e:	f280 80db 	bge.w	8007218 <_dtoa_r+0x658>
 8007062:	9b02      	ldr	r3, [sp, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f300 80d7 	bgt.w	8007218 <_dtoa_r+0x658>
 800706a:	f040 8274 	bne.w	8007556 <_dtoa_r+0x996>
 800706e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007072:	2200      	movs	r2, #0
 8007074:	4b40      	ldr	r3, [pc, #256]	; (8007178 <_dtoa_r+0x5b8>)
 8007076:	f7f9 fa2f 	bl	80004d8 <__aeabi_dmul>
 800707a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707e:	f7f9 fcb1 	bl	80009e4 <__aeabi_dcmpge>
 8007082:	9c02      	ldr	r4, [sp, #8]
 8007084:	4626      	mov	r6, r4
 8007086:	2800      	cmp	r0, #0
 8007088:	f040 824a 	bne.w	8007520 <_dtoa_r+0x960>
 800708c:	2331      	movs	r3, #49	; 0x31
 800708e:	9f08      	ldr	r7, [sp, #32]
 8007090:	f109 0901 	add.w	r9, r9, #1
 8007094:	f807 3b01 	strb.w	r3, [r7], #1
 8007098:	e246      	b.n	8007528 <_dtoa_r+0x968>
 800709a:	07e2      	lsls	r2, r4, #31
 800709c:	d505      	bpl.n	80070aa <_dtoa_r+0x4ea>
 800709e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070a2:	f7f9 fa19 	bl	80004d8 <__aeabi_dmul>
 80070a6:	2301      	movs	r3, #1
 80070a8:	3701      	adds	r7, #1
 80070aa:	1064      	asrs	r4, r4, #1
 80070ac:	3608      	adds	r6, #8
 80070ae:	e76d      	b.n	8006f8c <_dtoa_r+0x3cc>
 80070b0:	2702      	movs	r7, #2
 80070b2:	e770      	b.n	8006f96 <_dtoa_r+0x3d6>
 80070b4:	46c8      	mov	r8, r9
 80070b6:	9c02      	ldr	r4, [sp, #8]
 80070b8:	e78f      	b.n	8006fda <_dtoa_r+0x41a>
 80070ba:	9908      	ldr	r1, [sp, #32]
 80070bc:	4b29      	ldr	r3, [pc, #164]	; (8007164 <_dtoa_r+0x5a4>)
 80070be:	4421      	add	r1, r4
 80070c0:	9112      	str	r1, [sp, #72]	; 0x48
 80070c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80070cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070d0:	2900      	cmp	r1, #0
 80070d2:	d055      	beq.n	8007180 <_dtoa_r+0x5c0>
 80070d4:	2000      	movs	r0, #0
 80070d6:	4929      	ldr	r1, [pc, #164]	; (800717c <_dtoa_r+0x5bc>)
 80070d8:	f7f9 fb28 	bl	800072c <__aeabi_ddiv>
 80070dc:	463b      	mov	r3, r7
 80070de:	4632      	mov	r2, r6
 80070e0:	f7f9 f842 	bl	8000168 <__aeabi_dsub>
 80070e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070e8:	9f08      	ldr	r7, [sp, #32]
 80070ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070ee:	f7f9 fca3 	bl	8000a38 <__aeabi_d2iz>
 80070f2:	4604      	mov	r4, r0
 80070f4:	f7f9 f986 	bl	8000404 <__aeabi_i2d>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007100:	f7f9 f832 	bl	8000168 <__aeabi_dsub>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	3430      	adds	r4, #48	; 0x30
 800710a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800710e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007112:	f807 4b01 	strb.w	r4, [r7], #1
 8007116:	f7f9 fc51 	bl	80009bc <__aeabi_dcmplt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d174      	bne.n	8007208 <_dtoa_r+0x648>
 800711e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007122:	2000      	movs	r0, #0
 8007124:	4911      	ldr	r1, [pc, #68]	; (800716c <_dtoa_r+0x5ac>)
 8007126:	f7f9 f81f 	bl	8000168 <__aeabi_dsub>
 800712a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800712e:	f7f9 fc45 	bl	80009bc <__aeabi_dcmplt>
 8007132:	2800      	cmp	r0, #0
 8007134:	f040 80b6 	bne.w	80072a4 <_dtoa_r+0x6e4>
 8007138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800713a:	429f      	cmp	r7, r3
 800713c:	f43f af7a 	beq.w	8007034 <_dtoa_r+0x474>
 8007140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007144:	2200      	movs	r2, #0
 8007146:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <_dtoa_r+0x5b0>)
 8007148:	f7f9 f9c6 	bl	80004d8 <__aeabi_dmul>
 800714c:	2200      	movs	r2, #0
 800714e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007156:	4b06      	ldr	r3, [pc, #24]	; (8007170 <_dtoa_r+0x5b0>)
 8007158:	f7f9 f9be 	bl	80004d8 <__aeabi_dmul>
 800715c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007160:	e7c3      	b.n	80070ea <_dtoa_r+0x52a>
 8007162:	bf00      	nop
 8007164:	08009e40 	.word	0x08009e40
 8007168:	08009e18 	.word	0x08009e18
 800716c:	3ff00000 	.word	0x3ff00000
 8007170:	40240000 	.word	0x40240000
 8007174:	401c0000 	.word	0x401c0000
 8007178:	40140000 	.word	0x40140000
 800717c:	3fe00000 	.word	0x3fe00000
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 f9a8 	bl	80004d8 <__aeabi_dmul>
 8007188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800718a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800718e:	9c08      	ldr	r4, [sp, #32]
 8007190:	9314      	str	r3, [sp, #80]	; 0x50
 8007192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007196:	f7f9 fc4f 	bl	8000a38 <__aeabi_d2iz>
 800719a:	9015      	str	r0, [sp, #84]	; 0x54
 800719c:	f7f9 f932 	bl	8000404 <__aeabi_i2d>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071a8:	f7f8 ffde 	bl	8000168 <__aeabi_dsub>
 80071ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ae:	4606      	mov	r6, r0
 80071b0:	3330      	adds	r3, #48	; 0x30
 80071b2:	f804 3b01 	strb.w	r3, [r4], #1
 80071b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071b8:	460f      	mov	r7, r1
 80071ba:	429c      	cmp	r4, r3
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	d124      	bne.n	800720c <_dtoa_r+0x64c>
 80071c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071c6:	4bb3      	ldr	r3, [pc, #716]	; (8007494 <_dtoa_r+0x8d4>)
 80071c8:	f7f8 ffd0 	bl	800016c <__adddf3>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f9 fc10 	bl	80009f8 <__aeabi_dcmpgt>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d162      	bne.n	80072a2 <_dtoa_r+0x6e2>
 80071dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071e0:	2000      	movs	r0, #0
 80071e2:	49ac      	ldr	r1, [pc, #688]	; (8007494 <_dtoa_r+0x8d4>)
 80071e4:	f7f8 ffc0 	bl	8000168 <__aeabi_dsub>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fbe4 	bl	80009bc <__aeabi_dcmplt>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f43f af1d 	beq.w	8007034 <_dtoa_r+0x474>
 80071fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071fc:	1e7b      	subs	r3, r7, #1
 80071fe:	9314      	str	r3, [sp, #80]	; 0x50
 8007200:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007204:	2b30      	cmp	r3, #48	; 0x30
 8007206:	d0f8      	beq.n	80071fa <_dtoa_r+0x63a>
 8007208:	46c1      	mov	r9, r8
 800720a:	e03a      	b.n	8007282 <_dtoa_r+0x6c2>
 800720c:	4ba2      	ldr	r3, [pc, #648]	; (8007498 <_dtoa_r+0x8d8>)
 800720e:	f7f9 f963 	bl	80004d8 <__aeabi_dmul>
 8007212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007216:	e7bc      	b.n	8007192 <_dtoa_r+0x5d2>
 8007218:	9f08      	ldr	r7, [sp, #32]
 800721a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800721e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007222:	f7f9 fa83 	bl	800072c <__aeabi_ddiv>
 8007226:	f7f9 fc07 	bl	8000a38 <__aeabi_d2iz>
 800722a:	4604      	mov	r4, r0
 800722c:	f7f9 f8ea 	bl	8000404 <__aeabi_i2d>
 8007230:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007234:	f7f9 f950 	bl	80004d8 <__aeabi_dmul>
 8007238:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800723c:	460b      	mov	r3, r1
 800723e:	4602      	mov	r2, r0
 8007240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007244:	f7f8 ff90 	bl	8000168 <__aeabi_dsub>
 8007248:	f807 6b01 	strb.w	r6, [r7], #1
 800724c:	9e08      	ldr	r6, [sp, #32]
 800724e:	9b02      	ldr	r3, [sp, #8]
 8007250:	1bbe      	subs	r6, r7, r6
 8007252:	42b3      	cmp	r3, r6
 8007254:	d13a      	bne.n	80072cc <_dtoa_r+0x70c>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	f7f8 ff87 	bl	800016c <__adddf3>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800726a:	f7f9 fbc5 	bl	80009f8 <__aeabi_dcmpgt>
 800726e:	bb58      	cbnz	r0, 80072c8 <_dtoa_r+0x708>
 8007270:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007278:	f7f9 fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800727c:	b108      	cbz	r0, 8007282 <_dtoa_r+0x6c2>
 800727e:	07e1      	lsls	r1, r4, #31
 8007280:	d422      	bmi.n	80072c8 <_dtoa_r+0x708>
 8007282:	4628      	mov	r0, r5
 8007284:	4651      	mov	r1, sl
 8007286:	f000 fe5b 	bl	8007f40 <_Bfree>
 800728a:	2300      	movs	r3, #0
 800728c:	703b      	strb	r3, [r7, #0]
 800728e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007290:	f109 0001 	add.w	r0, r9, #1
 8007294:	6018      	str	r0, [r3, #0]
 8007296:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007298:	2b00      	cmp	r3, #0
 800729a:	f43f acdf 	beq.w	8006c5c <_dtoa_r+0x9c>
 800729e:	601f      	str	r7, [r3, #0]
 80072a0:	e4dc      	b.n	8006c5c <_dtoa_r+0x9c>
 80072a2:	4627      	mov	r7, r4
 80072a4:	463b      	mov	r3, r7
 80072a6:	461f      	mov	r7, r3
 80072a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ac:	2a39      	cmp	r2, #57	; 0x39
 80072ae:	d107      	bne.n	80072c0 <_dtoa_r+0x700>
 80072b0:	9a08      	ldr	r2, [sp, #32]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d1f7      	bne.n	80072a6 <_dtoa_r+0x6e6>
 80072b6:	2230      	movs	r2, #48	; 0x30
 80072b8:	9908      	ldr	r1, [sp, #32]
 80072ba:	f108 0801 	add.w	r8, r8, #1
 80072be:	700a      	strb	r2, [r1, #0]
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	3201      	adds	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e79f      	b.n	8007208 <_dtoa_r+0x648>
 80072c8:	46c8      	mov	r8, r9
 80072ca:	e7eb      	b.n	80072a4 <_dtoa_r+0x6e4>
 80072cc:	2200      	movs	r2, #0
 80072ce:	4b72      	ldr	r3, [pc, #456]	; (8007498 <_dtoa_r+0x8d8>)
 80072d0:	f7f9 f902 	bl	80004d8 <__aeabi_dmul>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	f7f9 fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d098      	beq.n	800721a <_dtoa_r+0x65a>
 80072e8:	e7cb      	b.n	8007282 <_dtoa_r+0x6c2>
 80072ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	f000 80cd 	beq.w	800748c <_dtoa_r+0x8cc>
 80072f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072f4:	2a01      	cmp	r2, #1
 80072f6:	f300 80af 	bgt.w	8007458 <_dtoa_r+0x898>
 80072fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072fc:	2a00      	cmp	r2, #0
 80072fe:	f000 80a7 	beq.w	8007450 <_dtoa_r+0x890>
 8007302:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007306:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007308:	9f06      	ldr	r7, [sp, #24]
 800730a:	9a06      	ldr	r2, [sp, #24]
 800730c:	2101      	movs	r1, #1
 800730e:	441a      	add	r2, r3
 8007310:	9206      	str	r2, [sp, #24]
 8007312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007314:	4628      	mov	r0, r5
 8007316:	441a      	add	r2, r3
 8007318:	9209      	str	r2, [sp, #36]	; 0x24
 800731a:	f000 ff15 	bl	8008148 <__i2b>
 800731e:	4606      	mov	r6, r0
 8007320:	2f00      	cmp	r7, #0
 8007322:	dd0c      	ble.n	800733e <_dtoa_r+0x77e>
 8007324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	dd09      	ble.n	800733e <_dtoa_r+0x77e>
 800732a:	42bb      	cmp	r3, r7
 800732c:	bfa8      	it	ge
 800732e:	463b      	movge	r3, r7
 8007330:	9a06      	ldr	r2, [sp, #24]
 8007332:	1aff      	subs	r7, r7, r3
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	9206      	str	r2, [sp, #24]
 8007338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007340:	b1f3      	cbz	r3, 8007380 <_dtoa_r+0x7c0>
 8007342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80a9 	beq.w	800749c <_dtoa_r+0x8dc>
 800734a:	2c00      	cmp	r4, #0
 800734c:	dd10      	ble.n	8007370 <_dtoa_r+0x7b0>
 800734e:	4631      	mov	r1, r6
 8007350:	4622      	mov	r2, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 ffb2 	bl	80082bc <__pow5mult>
 8007358:	4652      	mov	r2, sl
 800735a:	4601      	mov	r1, r0
 800735c:	4606      	mov	r6, r0
 800735e:	4628      	mov	r0, r5
 8007360:	f000 ff08 	bl	8008174 <__multiply>
 8007364:	4680      	mov	r8, r0
 8007366:	4651      	mov	r1, sl
 8007368:	4628      	mov	r0, r5
 800736a:	f000 fde9 	bl	8007f40 <_Bfree>
 800736e:	46c2      	mov	sl, r8
 8007370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007372:	1b1a      	subs	r2, r3, r4
 8007374:	d004      	beq.n	8007380 <_dtoa_r+0x7c0>
 8007376:	4651      	mov	r1, sl
 8007378:	4628      	mov	r0, r5
 800737a:	f000 ff9f 	bl	80082bc <__pow5mult>
 800737e:	4682      	mov	sl, r0
 8007380:	2101      	movs	r1, #1
 8007382:	4628      	mov	r0, r5
 8007384:	f000 fee0 	bl	8008148 <__i2b>
 8007388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800738a:	4604      	mov	r4, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	f340 8087 	ble.w	80074a0 <_dtoa_r+0x8e0>
 8007392:	461a      	mov	r2, r3
 8007394:	4601      	mov	r1, r0
 8007396:	4628      	mov	r0, r5
 8007398:	f000 ff90 	bl	80082bc <__pow5mult>
 800739c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800739e:	4604      	mov	r4, r0
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f340 8080 	ble.w	80074a6 <_dtoa_r+0x8e6>
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073b0:	6918      	ldr	r0, [r3, #16]
 80073b2:	f000 fe7b 	bl	80080ac <__hi0bits>
 80073b6:	f1c0 0020 	rsb	r0, r0, #32
 80073ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073bc:	4418      	add	r0, r3
 80073be:	f010 001f 	ands.w	r0, r0, #31
 80073c2:	f000 8092 	beq.w	80074ea <_dtoa_r+0x92a>
 80073c6:	f1c0 0320 	rsb	r3, r0, #32
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	f340 808a 	ble.w	80074e4 <_dtoa_r+0x924>
 80073d0:	f1c0 001c 	rsb	r0, r0, #28
 80073d4:	9b06      	ldr	r3, [sp, #24]
 80073d6:	4407      	add	r7, r0
 80073d8:	4403      	add	r3, r0
 80073da:	9306      	str	r3, [sp, #24]
 80073dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073de:	4403      	add	r3, r0
 80073e0:	9309      	str	r3, [sp, #36]	; 0x24
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd05      	ble.n	80073f4 <_dtoa_r+0x834>
 80073e8:	4651      	mov	r1, sl
 80073ea:	461a      	mov	r2, r3
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 ffbf 	bl	8008370 <__lshift>
 80073f2:	4682      	mov	sl, r0
 80073f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dd05      	ble.n	8007406 <_dtoa_r+0x846>
 80073fa:	4621      	mov	r1, r4
 80073fc:	461a      	mov	r2, r3
 80073fe:	4628      	mov	r0, r5
 8007400:	f000 ffb6 	bl	8008370 <__lshift>
 8007404:	4604      	mov	r4, r0
 8007406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d070      	beq.n	80074ee <_dtoa_r+0x92e>
 800740c:	4621      	mov	r1, r4
 800740e:	4650      	mov	r0, sl
 8007410:	f001 f81a 	bl	8008448 <__mcmp>
 8007414:	2800      	cmp	r0, #0
 8007416:	da6a      	bge.n	80074ee <_dtoa_r+0x92e>
 8007418:	2300      	movs	r3, #0
 800741a:	4651      	mov	r1, sl
 800741c:	220a      	movs	r2, #10
 800741e:	4628      	mov	r0, r5
 8007420:	f000 fdb0 	bl	8007f84 <__multadd>
 8007424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007426:	4682      	mov	sl, r0
 8007428:	f109 39ff 	add.w	r9, r9, #4294967295
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8193 	beq.w	8007758 <_dtoa_r+0xb98>
 8007432:	4631      	mov	r1, r6
 8007434:	2300      	movs	r3, #0
 8007436:	220a      	movs	r2, #10
 8007438:	4628      	mov	r0, r5
 800743a:	f000 fda3 	bl	8007f84 <__multadd>
 800743e:	f1bb 0f00 	cmp.w	fp, #0
 8007442:	4606      	mov	r6, r0
 8007444:	f300 8093 	bgt.w	800756e <_dtoa_r+0x9ae>
 8007448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800744a:	2b02      	cmp	r3, #2
 800744c:	dc57      	bgt.n	80074fe <_dtoa_r+0x93e>
 800744e:	e08e      	b.n	800756e <_dtoa_r+0x9ae>
 8007450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007452:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007456:	e756      	b.n	8007306 <_dtoa_r+0x746>
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	1e5c      	subs	r4, r3, #1
 800745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745e:	42a3      	cmp	r3, r4
 8007460:	bfb7      	itett	lt
 8007462:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007464:	1b1c      	subge	r4, r3, r4
 8007466:	1ae2      	sublt	r2, r4, r3
 8007468:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800746a:	bfbe      	ittt	lt
 800746c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800746e:	189b      	addlt	r3, r3, r2
 8007470:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007472:	9b02      	ldr	r3, [sp, #8]
 8007474:	bfb8      	it	lt
 8007476:	2400      	movlt	r4, #0
 8007478:	2b00      	cmp	r3, #0
 800747a:	bfbb      	ittet	lt
 800747c:	9b06      	ldrlt	r3, [sp, #24]
 800747e:	9a02      	ldrlt	r2, [sp, #8]
 8007480:	9f06      	ldrge	r7, [sp, #24]
 8007482:	1a9f      	sublt	r7, r3, r2
 8007484:	bfac      	ite	ge
 8007486:	9b02      	ldrge	r3, [sp, #8]
 8007488:	2300      	movlt	r3, #0
 800748a:	e73e      	b.n	800730a <_dtoa_r+0x74a>
 800748c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800748e:	9f06      	ldr	r7, [sp, #24]
 8007490:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007492:	e745      	b.n	8007320 <_dtoa_r+0x760>
 8007494:	3fe00000 	.word	0x3fe00000
 8007498:	40240000 	.word	0x40240000
 800749c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800749e:	e76a      	b.n	8007376 <_dtoa_r+0x7b6>
 80074a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	dc19      	bgt.n	80074da <_dtoa_r+0x91a>
 80074a6:	9b04      	ldr	r3, [sp, #16]
 80074a8:	b9bb      	cbnz	r3, 80074da <_dtoa_r+0x91a>
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b0:	b99b      	cbnz	r3, 80074da <_dtoa_r+0x91a>
 80074b2:	9b05      	ldr	r3, [sp, #20]
 80074b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074b8:	0d1b      	lsrs	r3, r3, #20
 80074ba:	051b      	lsls	r3, r3, #20
 80074bc:	b183      	cbz	r3, 80074e0 <_dtoa_r+0x920>
 80074be:	f04f 0801 	mov.w	r8, #1
 80074c2:	9b06      	ldr	r3, [sp, #24]
 80074c4:	3301      	adds	r3, #1
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ca:	3301      	adds	r3, #1
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f47f af6a 	bne.w	80073aa <_dtoa_r+0x7ea>
 80074d6:	2001      	movs	r0, #1
 80074d8:	e76f      	b.n	80073ba <_dtoa_r+0x7fa>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	e7f6      	b.n	80074ce <_dtoa_r+0x90e>
 80074e0:	4698      	mov	r8, r3
 80074e2:	e7f4      	b.n	80074ce <_dtoa_r+0x90e>
 80074e4:	f43f af7d 	beq.w	80073e2 <_dtoa_r+0x822>
 80074e8:	4618      	mov	r0, r3
 80074ea:	301c      	adds	r0, #28
 80074ec:	e772      	b.n	80073d4 <_dtoa_r+0x814>
 80074ee:	9b02      	ldr	r3, [sp, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dc36      	bgt.n	8007562 <_dtoa_r+0x9a2>
 80074f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	dd33      	ble.n	8007562 <_dtoa_r+0x9a2>
 80074fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80074fe:	f1bb 0f00 	cmp.w	fp, #0
 8007502:	d10d      	bne.n	8007520 <_dtoa_r+0x960>
 8007504:	4621      	mov	r1, r4
 8007506:	465b      	mov	r3, fp
 8007508:	2205      	movs	r2, #5
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fd3a 	bl	8007f84 <__multadd>
 8007510:	4601      	mov	r1, r0
 8007512:	4604      	mov	r4, r0
 8007514:	4650      	mov	r0, sl
 8007516:	f000 ff97 	bl	8008448 <__mcmp>
 800751a:	2800      	cmp	r0, #0
 800751c:	f73f adb6 	bgt.w	800708c <_dtoa_r+0x4cc>
 8007520:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007522:	9f08      	ldr	r7, [sp, #32]
 8007524:	ea6f 0903 	mvn.w	r9, r3
 8007528:	f04f 0800 	mov.w	r8, #0
 800752c:	4621      	mov	r1, r4
 800752e:	4628      	mov	r0, r5
 8007530:	f000 fd06 	bl	8007f40 <_Bfree>
 8007534:	2e00      	cmp	r6, #0
 8007536:	f43f aea4 	beq.w	8007282 <_dtoa_r+0x6c2>
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	d005      	beq.n	800754c <_dtoa_r+0x98c>
 8007540:	45b0      	cmp	r8, r6
 8007542:	d003      	beq.n	800754c <_dtoa_r+0x98c>
 8007544:	4641      	mov	r1, r8
 8007546:	4628      	mov	r0, r5
 8007548:	f000 fcfa 	bl	8007f40 <_Bfree>
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fcf6 	bl	8007f40 <_Bfree>
 8007554:	e695      	b.n	8007282 <_dtoa_r+0x6c2>
 8007556:	2400      	movs	r4, #0
 8007558:	4626      	mov	r6, r4
 800755a:	e7e1      	b.n	8007520 <_dtoa_r+0x960>
 800755c:	46c1      	mov	r9, r8
 800755e:	4626      	mov	r6, r4
 8007560:	e594      	b.n	800708c <_dtoa_r+0x4cc>
 8007562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007564:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 80fc 	beq.w	8007766 <_dtoa_r+0xba6>
 800756e:	2f00      	cmp	r7, #0
 8007570:	dd05      	ble.n	800757e <_dtoa_r+0x9be>
 8007572:	4631      	mov	r1, r6
 8007574:	463a      	mov	r2, r7
 8007576:	4628      	mov	r0, r5
 8007578:	f000 fefa 	bl	8008370 <__lshift>
 800757c:	4606      	mov	r6, r0
 800757e:	f1b8 0f00 	cmp.w	r8, #0
 8007582:	d05c      	beq.n	800763e <_dtoa_r+0xa7e>
 8007584:	4628      	mov	r0, r5
 8007586:	6871      	ldr	r1, [r6, #4]
 8007588:	f000 fc9a 	bl	8007ec0 <_Balloc>
 800758c:	4607      	mov	r7, r0
 800758e:	b928      	cbnz	r0, 800759c <_dtoa_r+0x9dc>
 8007590:	4602      	mov	r2, r0
 8007592:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007596:	4b7e      	ldr	r3, [pc, #504]	; (8007790 <_dtoa_r+0xbd0>)
 8007598:	f7ff bb26 	b.w	8006be8 <_dtoa_r+0x28>
 800759c:	6932      	ldr	r2, [r6, #16]
 800759e:	f106 010c 	add.w	r1, r6, #12
 80075a2:	3202      	adds	r2, #2
 80075a4:	0092      	lsls	r2, r2, #2
 80075a6:	300c      	adds	r0, #12
 80075a8:	f7fd fd2a 	bl	8005000 <memcpy>
 80075ac:	2201      	movs	r2, #1
 80075ae:	4639      	mov	r1, r7
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 fedd 	bl	8008370 <__lshift>
 80075b6:	46b0      	mov	r8, r6
 80075b8:	4606      	mov	r6, r0
 80075ba:	9b08      	ldr	r3, [sp, #32]
 80075bc:	3301      	adds	r3, #1
 80075be:	9302      	str	r3, [sp, #8]
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	445b      	add	r3, fp
 80075c4:	930a      	str	r3, [sp, #40]	; 0x28
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	9309      	str	r3, [sp, #36]	; 0x24
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	4621      	mov	r1, r4
 80075d2:	4650      	mov	r0, sl
 80075d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80075d8:	f7ff fa64 	bl	8006aa4 <quorem>
 80075dc:	4603      	mov	r3, r0
 80075de:	4641      	mov	r1, r8
 80075e0:	3330      	adds	r3, #48	; 0x30
 80075e2:	9004      	str	r0, [sp, #16]
 80075e4:	4650      	mov	r0, sl
 80075e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e8:	f000 ff2e 	bl	8008448 <__mcmp>
 80075ec:	4632      	mov	r2, r6
 80075ee:	9006      	str	r0, [sp, #24]
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 ff44 	bl	8008480 <__mdiff>
 80075f8:	68c2      	ldr	r2, [r0, #12]
 80075fa:	4607      	mov	r7, r0
 80075fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075fe:	bb02      	cbnz	r2, 8007642 <_dtoa_r+0xa82>
 8007600:	4601      	mov	r1, r0
 8007602:	4650      	mov	r0, sl
 8007604:	f000 ff20 	bl	8008448 <__mcmp>
 8007608:	4602      	mov	r2, r0
 800760a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760c:	4639      	mov	r1, r7
 800760e:	4628      	mov	r0, r5
 8007610:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007614:	f000 fc94 	bl	8007f40 <_Bfree>
 8007618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800761a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800761c:	9f02      	ldr	r7, [sp, #8]
 800761e:	ea43 0102 	orr.w	r1, r3, r2
 8007622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007624:	430b      	orrs	r3, r1
 8007626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007628:	d10d      	bne.n	8007646 <_dtoa_r+0xa86>
 800762a:	2b39      	cmp	r3, #57	; 0x39
 800762c:	d027      	beq.n	800767e <_dtoa_r+0xabe>
 800762e:	9a06      	ldr	r2, [sp, #24]
 8007630:	2a00      	cmp	r2, #0
 8007632:	dd01      	ble.n	8007638 <_dtoa_r+0xa78>
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	3331      	adds	r3, #49	; 0x31
 8007638:	f88b 3000 	strb.w	r3, [fp]
 800763c:	e776      	b.n	800752c <_dtoa_r+0x96c>
 800763e:	4630      	mov	r0, r6
 8007640:	e7b9      	b.n	80075b6 <_dtoa_r+0x9f6>
 8007642:	2201      	movs	r2, #1
 8007644:	e7e2      	b.n	800760c <_dtoa_r+0xa4c>
 8007646:	9906      	ldr	r1, [sp, #24]
 8007648:	2900      	cmp	r1, #0
 800764a:	db04      	blt.n	8007656 <_dtoa_r+0xa96>
 800764c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800764e:	4301      	orrs	r1, r0
 8007650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007652:	4301      	orrs	r1, r0
 8007654:	d120      	bne.n	8007698 <_dtoa_r+0xad8>
 8007656:	2a00      	cmp	r2, #0
 8007658:	ddee      	ble.n	8007638 <_dtoa_r+0xa78>
 800765a:	4651      	mov	r1, sl
 800765c:	2201      	movs	r2, #1
 800765e:	4628      	mov	r0, r5
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	f000 fe85 	bl	8008370 <__lshift>
 8007666:	4621      	mov	r1, r4
 8007668:	4682      	mov	sl, r0
 800766a:	f000 feed 	bl	8008448 <__mcmp>
 800766e:	2800      	cmp	r0, #0
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	dc02      	bgt.n	800767a <_dtoa_r+0xaba>
 8007674:	d1e0      	bne.n	8007638 <_dtoa_r+0xa78>
 8007676:	07da      	lsls	r2, r3, #31
 8007678:	d5de      	bpl.n	8007638 <_dtoa_r+0xa78>
 800767a:	2b39      	cmp	r3, #57	; 0x39
 800767c:	d1da      	bne.n	8007634 <_dtoa_r+0xa74>
 800767e:	2339      	movs	r3, #57	; 0x39
 8007680:	f88b 3000 	strb.w	r3, [fp]
 8007684:	463b      	mov	r3, r7
 8007686:	461f      	mov	r7, r3
 8007688:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800768c:	3b01      	subs	r3, #1
 800768e:	2a39      	cmp	r2, #57	; 0x39
 8007690:	d050      	beq.n	8007734 <_dtoa_r+0xb74>
 8007692:	3201      	adds	r2, #1
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e749      	b.n	800752c <_dtoa_r+0x96c>
 8007698:	2a00      	cmp	r2, #0
 800769a:	dd03      	ble.n	80076a4 <_dtoa_r+0xae4>
 800769c:	2b39      	cmp	r3, #57	; 0x39
 800769e:	d0ee      	beq.n	800767e <_dtoa_r+0xabe>
 80076a0:	3301      	adds	r3, #1
 80076a2:	e7c9      	b.n	8007638 <_dtoa_r+0xa78>
 80076a4:	9a02      	ldr	r2, [sp, #8]
 80076a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076ac:	428a      	cmp	r2, r1
 80076ae:	d02a      	beq.n	8007706 <_dtoa_r+0xb46>
 80076b0:	4651      	mov	r1, sl
 80076b2:	2300      	movs	r3, #0
 80076b4:	220a      	movs	r2, #10
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 fc64 	bl	8007f84 <__multadd>
 80076bc:	45b0      	cmp	r8, r6
 80076be:	4682      	mov	sl, r0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	f04f 020a 	mov.w	r2, #10
 80076c8:	4641      	mov	r1, r8
 80076ca:	4628      	mov	r0, r5
 80076cc:	d107      	bne.n	80076de <_dtoa_r+0xb1e>
 80076ce:	f000 fc59 	bl	8007f84 <__multadd>
 80076d2:	4680      	mov	r8, r0
 80076d4:	4606      	mov	r6, r0
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	3301      	adds	r3, #1
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	e777      	b.n	80075ce <_dtoa_r+0xa0e>
 80076de:	f000 fc51 	bl	8007f84 <__multadd>
 80076e2:	4631      	mov	r1, r6
 80076e4:	4680      	mov	r8, r0
 80076e6:	2300      	movs	r3, #0
 80076e8:	220a      	movs	r2, #10
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 fc4a 	bl	8007f84 <__multadd>
 80076f0:	4606      	mov	r6, r0
 80076f2:	e7f0      	b.n	80076d6 <_dtoa_r+0xb16>
 80076f4:	f1bb 0f00 	cmp.w	fp, #0
 80076f8:	bfcc      	ite	gt
 80076fa:	465f      	movgt	r7, fp
 80076fc:	2701      	movle	r7, #1
 80076fe:	f04f 0800 	mov.w	r8, #0
 8007702:	9a08      	ldr	r2, [sp, #32]
 8007704:	4417      	add	r7, r2
 8007706:	4651      	mov	r1, sl
 8007708:	2201      	movs	r2, #1
 800770a:	4628      	mov	r0, r5
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	f000 fe2f 	bl	8008370 <__lshift>
 8007712:	4621      	mov	r1, r4
 8007714:	4682      	mov	sl, r0
 8007716:	f000 fe97 	bl	8008448 <__mcmp>
 800771a:	2800      	cmp	r0, #0
 800771c:	dcb2      	bgt.n	8007684 <_dtoa_r+0xac4>
 800771e:	d102      	bne.n	8007726 <_dtoa_r+0xb66>
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	07db      	lsls	r3, r3, #31
 8007724:	d4ae      	bmi.n	8007684 <_dtoa_r+0xac4>
 8007726:	463b      	mov	r3, r7
 8007728:	461f      	mov	r7, r3
 800772a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800772e:	2a30      	cmp	r2, #48	; 0x30
 8007730:	d0fa      	beq.n	8007728 <_dtoa_r+0xb68>
 8007732:	e6fb      	b.n	800752c <_dtoa_r+0x96c>
 8007734:	9a08      	ldr	r2, [sp, #32]
 8007736:	429a      	cmp	r2, r3
 8007738:	d1a5      	bne.n	8007686 <_dtoa_r+0xac6>
 800773a:	2331      	movs	r3, #49	; 0x31
 800773c:	f109 0901 	add.w	r9, r9, #1
 8007740:	7013      	strb	r3, [r2, #0]
 8007742:	e6f3      	b.n	800752c <_dtoa_r+0x96c>
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <_dtoa_r+0xbd4>)
 8007746:	f7ff baa7 	b.w	8006c98 <_dtoa_r+0xd8>
 800774a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800774c:	2b00      	cmp	r3, #0
 800774e:	f47f aa80 	bne.w	8006c52 <_dtoa_r+0x92>
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <_dtoa_r+0xbd8>)
 8007754:	f7ff baa0 	b.w	8006c98 <_dtoa_r+0xd8>
 8007758:	f1bb 0f00 	cmp.w	fp, #0
 800775c:	dc03      	bgt.n	8007766 <_dtoa_r+0xba6>
 800775e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007760:	2b02      	cmp	r3, #2
 8007762:	f73f aecc 	bgt.w	80074fe <_dtoa_r+0x93e>
 8007766:	9f08      	ldr	r7, [sp, #32]
 8007768:	4621      	mov	r1, r4
 800776a:	4650      	mov	r0, sl
 800776c:	f7ff f99a 	bl	8006aa4 <quorem>
 8007770:	9a08      	ldr	r2, [sp, #32]
 8007772:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007776:	f807 3b01 	strb.w	r3, [r7], #1
 800777a:	1aba      	subs	r2, r7, r2
 800777c:	4593      	cmp	fp, r2
 800777e:	ddb9      	ble.n	80076f4 <_dtoa_r+0xb34>
 8007780:	4651      	mov	r1, sl
 8007782:	2300      	movs	r3, #0
 8007784:	220a      	movs	r2, #10
 8007786:	4628      	mov	r0, r5
 8007788:	f000 fbfc 	bl	8007f84 <__multadd>
 800778c:	4682      	mov	sl, r0
 800778e:	e7eb      	b.n	8007768 <_dtoa_r+0xba8>
 8007790:	08009d24 	.word	0x08009d24
 8007794:	08009b20 	.word	0x08009b20
 8007798:	08009ca1 	.word	0x08009ca1

0800779c <rshift>:
 800779c:	6903      	ldr	r3, [r0, #16]
 800779e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80077a6:	f100 0414 	add.w	r4, r0, #20
 80077aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80077ae:	dd46      	ble.n	800783e <rshift+0xa2>
 80077b0:	f011 011f 	ands.w	r1, r1, #31
 80077b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80077b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077bc:	d10c      	bne.n	80077d8 <rshift+0x3c>
 80077be:	4629      	mov	r1, r5
 80077c0:	f100 0710 	add.w	r7, r0, #16
 80077c4:	42b1      	cmp	r1, r6
 80077c6:	d335      	bcc.n	8007834 <rshift+0x98>
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	1eea      	subs	r2, r5, #3
 80077ce:	4296      	cmp	r6, r2
 80077d0:	bf38      	it	cc
 80077d2:	2300      	movcc	r3, #0
 80077d4:	4423      	add	r3, r4
 80077d6:	e015      	b.n	8007804 <rshift+0x68>
 80077d8:	46a1      	mov	r9, r4
 80077da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077de:	f1c1 0820 	rsb	r8, r1, #32
 80077e2:	40cf      	lsrs	r7, r1
 80077e4:	f105 0e04 	add.w	lr, r5, #4
 80077e8:	4576      	cmp	r6, lr
 80077ea:	46f4      	mov	ip, lr
 80077ec:	d816      	bhi.n	800781c <rshift+0x80>
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	009a      	lsls	r2, r3, #2
 80077f2:	3a04      	subs	r2, #4
 80077f4:	3501      	adds	r5, #1
 80077f6:	42ae      	cmp	r6, r5
 80077f8:	bf38      	it	cc
 80077fa:	2200      	movcc	r2, #0
 80077fc:	18a3      	adds	r3, r4, r2
 80077fe:	50a7      	str	r7, [r4, r2]
 8007800:	b107      	cbz	r7, 8007804 <rshift+0x68>
 8007802:	3304      	adds	r3, #4
 8007804:	42a3      	cmp	r3, r4
 8007806:	eba3 0204 	sub.w	r2, r3, r4
 800780a:	bf08      	it	eq
 800780c:	2300      	moveq	r3, #0
 800780e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007812:	6102      	str	r2, [r0, #16]
 8007814:	bf08      	it	eq
 8007816:	6143      	streq	r3, [r0, #20]
 8007818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781c:	f8dc c000 	ldr.w	ip, [ip]
 8007820:	fa0c fc08 	lsl.w	ip, ip, r8
 8007824:	ea4c 0707 	orr.w	r7, ip, r7
 8007828:	f849 7b04 	str.w	r7, [r9], #4
 800782c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007830:	40cf      	lsrs	r7, r1
 8007832:	e7d9      	b.n	80077e8 <rshift+0x4c>
 8007834:	f851 cb04 	ldr.w	ip, [r1], #4
 8007838:	f847 cf04 	str.w	ip, [r7, #4]!
 800783c:	e7c2      	b.n	80077c4 <rshift+0x28>
 800783e:	4623      	mov	r3, r4
 8007840:	e7e0      	b.n	8007804 <rshift+0x68>

08007842 <__hexdig_fun>:
 8007842:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007846:	2b09      	cmp	r3, #9
 8007848:	d802      	bhi.n	8007850 <__hexdig_fun+0xe>
 800784a:	3820      	subs	r0, #32
 800784c:	b2c0      	uxtb	r0, r0
 800784e:	4770      	bx	lr
 8007850:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007854:	2b05      	cmp	r3, #5
 8007856:	d801      	bhi.n	800785c <__hexdig_fun+0x1a>
 8007858:	3847      	subs	r0, #71	; 0x47
 800785a:	e7f7      	b.n	800784c <__hexdig_fun+0xa>
 800785c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007860:	2b05      	cmp	r3, #5
 8007862:	d801      	bhi.n	8007868 <__hexdig_fun+0x26>
 8007864:	3827      	subs	r0, #39	; 0x27
 8007866:	e7f1      	b.n	800784c <__hexdig_fun+0xa>
 8007868:	2000      	movs	r0, #0
 800786a:	4770      	bx	lr

0800786c <__gethex>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	b08b      	sub	sp, #44	; 0x2c
 8007872:	9306      	str	r3, [sp, #24]
 8007874:	4bb9      	ldr	r3, [pc, #740]	; (8007b5c <__gethex+0x2f0>)
 8007876:	9002      	str	r0, [sp, #8]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	468b      	mov	fp, r1
 800787c:	4618      	mov	r0, r3
 800787e:	4690      	mov	r8, r2
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	f7f8 fc65 	bl	8000150 <strlen>
 8007886:	4682      	mov	sl, r0
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	f8db 2000 	ldr.w	r2, [fp]
 800788e:	4403      	add	r3, r0
 8007890:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007894:	9307      	str	r3, [sp, #28]
 8007896:	1c93      	adds	r3, r2, #2
 8007898:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800789c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80078a0:	32fe      	adds	r2, #254	; 0xfe
 80078a2:	18d1      	adds	r1, r2, r3
 80078a4:	461f      	mov	r7, r3
 80078a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078aa:	9101      	str	r1, [sp, #4]
 80078ac:	2830      	cmp	r0, #48	; 0x30
 80078ae:	d0f8      	beq.n	80078a2 <__gethex+0x36>
 80078b0:	f7ff ffc7 	bl	8007842 <__hexdig_fun>
 80078b4:	4604      	mov	r4, r0
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d13a      	bne.n	8007930 <__gethex+0xc4>
 80078ba:	4652      	mov	r2, sl
 80078bc:	4638      	mov	r0, r7
 80078be:	9903      	ldr	r1, [sp, #12]
 80078c0:	f001 f9dc 	bl	8008c7c <strncmp>
 80078c4:	4605      	mov	r5, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d166      	bne.n	8007998 <__gethex+0x12c>
 80078ca:	f817 000a 	ldrb.w	r0, [r7, sl]
 80078ce:	eb07 060a 	add.w	r6, r7, sl
 80078d2:	f7ff ffb6 	bl	8007842 <__hexdig_fun>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d060      	beq.n	800799c <__gethex+0x130>
 80078da:	4633      	mov	r3, r6
 80078dc:	7818      	ldrb	r0, [r3, #0]
 80078de:	461f      	mov	r7, r3
 80078e0:	2830      	cmp	r0, #48	; 0x30
 80078e2:	f103 0301 	add.w	r3, r3, #1
 80078e6:	d0f9      	beq.n	80078dc <__gethex+0x70>
 80078e8:	f7ff ffab 	bl	8007842 <__hexdig_fun>
 80078ec:	2301      	movs	r3, #1
 80078ee:	fab0 f480 	clz	r4, r0
 80078f2:	4635      	mov	r5, r6
 80078f4:	0964      	lsrs	r4, r4, #5
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	463a      	mov	r2, r7
 80078fa:	4616      	mov	r6, r2
 80078fc:	7830      	ldrb	r0, [r6, #0]
 80078fe:	3201      	adds	r2, #1
 8007900:	f7ff ff9f 	bl	8007842 <__hexdig_fun>
 8007904:	2800      	cmp	r0, #0
 8007906:	d1f8      	bne.n	80078fa <__gethex+0x8e>
 8007908:	4652      	mov	r2, sl
 800790a:	4630      	mov	r0, r6
 800790c:	9903      	ldr	r1, [sp, #12]
 800790e:	f001 f9b5 	bl	8008c7c <strncmp>
 8007912:	b980      	cbnz	r0, 8007936 <__gethex+0xca>
 8007914:	b94d      	cbnz	r5, 800792a <__gethex+0xbe>
 8007916:	eb06 050a 	add.w	r5, r6, sl
 800791a:	462a      	mov	r2, r5
 800791c:	4616      	mov	r6, r2
 800791e:	7830      	ldrb	r0, [r6, #0]
 8007920:	3201      	adds	r2, #1
 8007922:	f7ff ff8e 	bl	8007842 <__hexdig_fun>
 8007926:	2800      	cmp	r0, #0
 8007928:	d1f8      	bne.n	800791c <__gethex+0xb0>
 800792a:	1bad      	subs	r5, r5, r6
 800792c:	00ad      	lsls	r5, r5, #2
 800792e:	e004      	b.n	800793a <__gethex+0xce>
 8007930:	2400      	movs	r4, #0
 8007932:	4625      	mov	r5, r4
 8007934:	e7e0      	b.n	80078f8 <__gethex+0x8c>
 8007936:	2d00      	cmp	r5, #0
 8007938:	d1f7      	bne.n	800792a <__gethex+0xbe>
 800793a:	7833      	ldrb	r3, [r6, #0]
 800793c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007940:	2b50      	cmp	r3, #80	; 0x50
 8007942:	d139      	bne.n	80079b8 <__gethex+0x14c>
 8007944:	7873      	ldrb	r3, [r6, #1]
 8007946:	2b2b      	cmp	r3, #43	; 0x2b
 8007948:	d02a      	beq.n	80079a0 <__gethex+0x134>
 800794a:	2b2d      	cmp	r3, #45	; 0x2d
 800794c:	d02c      	beq.n	80079a8 <__gethex+0x13c>
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	1c71      	adds	r1, r6, #1
 8007954:	7808      	ldrb	r0, [r1, #0]
 8007956:	f7ff ff74 	bl	8007842 <__hexdig_fun>
 800795a:	1e43      	subs	r3, r0, #1
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b18      	cmp	r3, #24
 8007960:	d82a      	bhi.n	80079b8 <__gethex+0x14c>
 8007962:	f1a0 0210 	sub.w	r2, r0, #16
 8007966:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800796a:	f7ff ff6a 	bl	8007842 <__hexdig_fun>
 800796e:	1e43      	subs	r3, r0, #1
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b18      	cmp	r3, #24
 8007974:	d91b      	bls.n	80079ae <__gethex+0x142>
 8007976:	f1b9 0f00 	cmp.w	r9, #0
 800797a:	d000      	beq.n	800797e <__gethex+0x112>
 800797c:	4252      	negs	r2, r2
 800797e:	4415      	add	r5, r2
 8007980:	f8cb 1000 	str.w	r1, [fp]
 8007984:	b1d4      	cbz	r4, 80079bc <__gethex+0x150>
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2700      	movne	r7, #0
 800798e:	2706      	moveq	r7, #6
 8007990:	4638      	mov	r0, r7
 8007992:	b00b      	add	sp, #44	; 0x2c
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	463e      	mov	r6, r7
 800799a:	4625      	mov	r5, r4
 800799c:	2401      	movs	r4, #1
 800799e:	e7cc      	b.n	800793a <__gethex+0xce>
 80079a0:	f04f 0900 	mov.w	r9, #0
 80079a4:	1cb1      	adds	r1, r6, #2
 80079a6:	e7d5      	b.n	8007954 <__gethex+0xe8>
 80079a8:	f04f 0901 	mov.w	r9, #1
 80079ac:	e7fa      	b.n	80079a4 <__gethex+0x138>
 80079ae:	230a      	movs	r3, #10
 80079b0:	fb03 0202 	mla	r2, r3, r2, r0
 80079b4:	3a10      	subs	r2, #16
 80079b6:	e7d6      	b.n	8007966 <__gethex+0xfa>
 80079b8:	4631      	mov	r1, r6
 80079ba:	e7e1      	b.n	8007980 <__gethex+0x114>
 80079bc:	4621      	mov	r1, r4
 80079be:	1bf3      	subs	r3, r6, r7
 80079c0:	3b01      	subs	r3, #1
 80079c2:	2b07      	cmp	r3, #7
 80079c4:	dc0a      	bgt.n	80079dc <__gethex+0x170>
 80079c6:	9802      	ldr	r0, [sp, #8]
 80079c8:	f000 fa7a 	bl	8007ec0 <_Balloc>
 80079cc:	4604      	mov	r4, r0
 80079ce:	b940      	cbnz	r0, 80079e2 <__gethex+0x176>
 80079d0:	4602      	mov	r2, r0
 80079d2:	21de      	movs	r1, #222	; 0xde
 80079d4:	4b62      	ldr	r3, [pc, #392]	; (8007b60 <__gethex+0x2f4>)
 80079d6:	4863      	ldr	r0, [pc, #396]	; (8007b64 <__gethex+0x2f8>)
 80079d8:	f001 f970 	bl	8008cbc <__assert_func>
 80079dc:	3101      	adds	r1, #1
 80079de:	105b      	asrs	r3, r3, #1
 80079e0:	e7ef      	b.n	80079c2 <__gethex+0x156>
 80079e2:	f04f 0b00 	mov.w	fp, #0
 80079e6:	f100 0914 	add.w	r9, r0, #20
 80079ea:	f1ca 0301 	rsb	r3, sl, #1
 80079ee:	f8cd 9010 	str.w	r9, [sp, #16]
 80079f2:	f8cd b004 	str.w	fp, [sp, #4]
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	42b7      	cmp	r7, r6
 80079fa:	d33f      	bcc.n	8007a7c <__gethex+0x210>
 80079fc:	9f04      	ldr	r7, [sp, #16]
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	f847 3b04 	str.w	r3, [r7], #4
 8007a04:	eba7 0709 	sub.w	r7, r7, r9
 8007a08:	10bf      	asrs	r7, r7, #2
 8007a0a:	6127      	str	r7, [r4, #16]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fb4d 	bl	80080ac <__hi0bits>
 8007a12:	017f      	lsls	r7, r7, #5
 8007a14:	f8d8 6000 	ldr.w	r6, [r8]
 8007a18:	1a3f      	subs	r7, r7, r0
 8007a1a:	42b7      	cmp	r7, r6
 8007a1c:	dd62      	ble.n	8007ae4 <__gethex+0x278>
 8007a1e:	1bbf      	subs	r7, r7, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fee3 	bl	80087ee <__any_on>
 8007a28:	4682      	mov	sl, r0
 8007a2a:	b1a8      	cbz	r0, 8007a58 <__gethex+0x1ec>
 8007a2c:	f04f 0a01 	mov.w	sl, #1
 8007a30:	1e7b      	subs	r3, r7, #1
 8007a32:	1159      	asrs	r1, r3, #5
 8007a34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a38:	f003 021f 	and.w	r2, r3, #31
 8007a3c:	fa0a f202 	lsl.w	r2, sl, r2
 8007a40:	420a      	tst	r2, r1
 8007a42:	d009      	beq.n	8007a58 <__gethex+0x1ec>
 8007a44:	4553      	cmp	r3, sl
 8007a46:	dd05      	ble.n	8007a54 <__gethex+0x1e8>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	1eb9      	subs	r1, r7, #2
 8007a4c:	f000 fecf 	bl	80087ee <__any_on>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d144      	bne.n	8007ade <__gethex+0x272>
 8007a54:	f04f 0a02 	mov.w	sl, #2
 8007a58:	4639      	mov	r1, r7
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7ff fe9e 	bl	800779c <rshift>
 8007a60:	443d      	add	r5, r7
 8007a62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a66:	42ab      	cmp	r3, r5
 8007a68:	da4a      	bge.n	8007b00 <__gethex+0x294>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	9802      	ldr	r0, [sp, #8]
 8007a6e:	f000 fa67 	bl	8007f40 <_Bfree>
 8007a72:	2300      	movs	r3, #0
 8007a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a76:	27a3      	movs	r7, #163	; 0xa3
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e789      	b.n	8007990 <__gethex+0x124>
 8007a7c:	1e73      	subs	r3, r6, #1
 8007a7e:	9a07      	ldr	r2, [sp, #28]
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d019      	beq.n	8007abe <__gethex+0x252>
 8007a8a:	f1bb 0f20 	cmp.w	fp, #32
 8007a8e:	d107      	bne.n	8007aa0 <__gethex+0x234>
 8007a90:	9b04      	ldr	r3, [sp, #16]
 8007a92:	9a01      	ldr	r2, [sp, #4]
 8007a94:	f843 2b04 	str.w	r2, [r3], #4
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	469b      	mov	fp, r3
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007aa4:	f7ff fecd 	bl	8007842 <__hexdig_fun>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	f000 000f 	and.w	r0, r0, #15
 8007aae:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ab2:	4303      	orrs	r3, r0
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	f10b 0b04 	add.w	fp, fp, #4
 8007aba:	9b05      	ldr	r3, [sp, #20]
 8007abc:	e00d      	b.n	8007ada <__gethex+0x26e>
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	9a08      	ldr	r2, [sp, #32]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	42bb      	cmp	r3, r7
 8007ac6:	d3e0      	bcc.n	8007a8a <__gethex+0x21e>
 8007ac8:	4618      	mov	r0, r3
 8007aca:	4652      	mov	r2, sl
 8007acc:	9903      	ldr	r1, [sp, #12]
 8007ace:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad0:	f001 f8d4 	bl	8008c7c <strncmp>
 8007ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d1d7      	bne.n	8007a8a <__gethex+0x21e>
 8007ada:	461e      	mov	r6, r3
 8007adc:	e78c      	b.n	80079f8 <__gethex+0x18c>
 8007ade:	f04f 0a03 	mov.w	sl, #3
 8007ae2:	e7b9      	b.n	8007a58 <__gethex+0x1ec>
 8007ae4:	da09      	bge.n	8007afa <__gethex+0x28e>
 8007ae6:	1bf7      	subs	r7, r6, r7
 8007ae8:	4621      	mov	r1, r4
 8007aea:	463a      	mov	r2, r7
 8007aec:	9802      	ldr	r0, [sp, #8]
 8007aee:	f000 fc3f 	bl	8008370 <__lshift>
 8007af2:	4604      	mov	r4, r0
 8007af4:	1bed      	subs	r5, r5, r7
 8007af6:	f100 0914 	add.w	r9, r0, #20
 8007afa:	f04f 0a00 	mov.w	sl, #0
 8007afe:	e7b0      	b.n	8007a62 <__gethex+0x1f6>
 8007b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b04:	42a8      	cmp	r0, r5
 8007b06:	dd71      	ble.n	8007bec <__gethex+0x380>
 8007b08:	1b45      	subs	r5, r0, r5
 8007b0a:	42ae      	cmp	r6, r5
 8007b0c:	dc34      	bgt.n	8007b78 <__gethex+0x30c>
 8007b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d028      	beq.n	8007b68 <__gethex+0x2fc>
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d02a      	beq.n	8007b70 <__gethex+0x304>
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d115      	bne.n	8007b4a <__gethex+0x2de>
 8007b1e:	42ae      	cmp	r6, r5
 8007b20:	d113      	bne.n	8007b4a <__gethex+0x2de>
 8007b22:	2e01      	cmp	r6, #1
 8007b24:	d10b      	bne.n	8007b3e <__gethex+0x2d2>
 8007b26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b2a:	9a06      	ldr	r2, [sp, #24]
 8007b2c:	2762      	movs	r7, #98	; 0x62
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	2301      	movs	r3, #1
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	f8c9 3000 	str.w	r3, [r9]
 8007b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b3a:	601c      	str	r4, [r3, #0]
 8007b3c:	e728      	b.n	8007990 <__gethex+0x124>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	1e71      	subs	r1, r6, #1
 8007b42:	f000 fe54 	bl	80087ee <__any_on>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d1ed      	bne.n	8007b26 <__gethex+0x2ba>
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	9802      	ldr	r0, [sp, #8]
 8007b4e:	f000 f9f7 	bl	8007f40 <_Bfree>
 8007b52:	2300      	movs	r3, #0
 8007b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b56:	2750      	movs	r7, #80	; 0x50
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e719      	b.n	8007990 <__gethex+0x124>
 8007b5c:	08009da0 	.word	0x08009da0
 8007b60:	08009d24 	.word	0x08009d24
 8007b64:	08009d35 	.word	0x08009d35
 8007b68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1ed      	bne.n	8007b4a <__gethex+0x2de>
 8007b6e:	e7da      	b.n	8007b26 <__gethex+0x2ba>
 8007b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1d7      	bne.n	8007b26 <__gethex+0x2ba>
 8007b76:	e7e8      	b.n	8007b4a <__gethex+0x2de>
 8007b78:	1e6f      	subs	r7, r5, #1
 8007b7a:	f1ba 0f00 	cmp.w	sl, #0
 8007b7e:	d132      	bne.n	8007be6 <__gethex+0x37a>
 8007b80:	b127      	cbz	r7, 8007b8c <__gethex+0x320>
 8007b82:	4639      	mov	r1, r7
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fe32 	bl	80087ee <__any_on>
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	117b      	asrs	r3, r7, #5
 8007b90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b94:	f007 071f 	and.w	r7, r7, #31
 8007b98:	fa01 f707 	lsl.w	r7, r1, r7
 8007b9c:	421f      	tst	r7, r3
 8007b9e:	f04f 0702 	mov.w	r7, #2
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	bf18      	it	ne
 8007ba8:	f04a 0a02 	orrne.w	sl, sl, #2
 8007bac:	1b76      	subs	r6, r6, r5
 8007bae:	f7ff fdf5 	bl	800779c <rshift>
 8007bb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bb6:	f1ba 0f00 	cmp.w	sl, #0
 8007bba:	d048      	beq.n	8007c4e <__gethex+0x3e2>
 8007bbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d015      	beq.n	8007bf0 <__gethex+0x384>
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d017      	beq.n	8007bf8 <__gethex+0x38c>
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d109      	bne.n	8007be0 <__gethex+0x374>
 8007bcc:	f01a 0f02 	tst.w	sl, #2
 8007bd0:	d006      	beq.n	8007be0 <__gethex+0x374>
 8007bd2:	f8d9 0000 	ldr.w	r0, [r9]
 8007bd6:	ea4a 0a00 	orr.w	sl, sl, r0
 8007bda:	f01a 0f01 	tst.w	sl, #1
 8007bde:	d10e      	bne.n	8007bfe <__gethex+0x392>
 8007be0:	f047 0710 	orr.w	r7, r7, #16
 8007be4:	e033      	b.n	8007c4e <__gethex+0x3e2>
 8007be6:	f04f 0a01 	mov.w	sl, #1
 8007bea:	e7cf      	b.n	8007b8c <__gethex+0x320>
 8007bec:	2701      	movs	r7, #1
 8007bee:	e7e2      	b.n	8007bb6 <__gethex+0x34a>
 8007bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf2:	f1c3 0301 	rsb	r3, r3, #1
 8007bf6:	9315      	str	r3, [sp, #84]	; 0x54
 8007bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0f0      	beq.n	8007be0 <__gethex+0x374>
 8007bfe:	f04f 0c00 	mov.w	ip, #0
 8007c02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c06:	f104 0314 	add.w	r3, r4, #20
 8007c0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c1c:	d01c      	beq.n	8007c58 <__gethex+0x3ec>
 8007c1e:	3201      	adds	r2, #1
 8007c20:	6002      	str	r2, [r0, #0]
 8007c22:	2f02      	cmp	r7, #2
 8007c24:	f104 0314 	add.w	r3, r4, #20
 8007c28:	d13d      	bne.n	8007ca6 <__gethex+0x43a>
 8007c2a:	f8d8 2000 	ldr.w	r2, [r8]
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	42b2      	cmp	r2, r6
 8007c32:	d10a      	bne.n	8007c4a <__gethex+0x3de>
 8007c34:	2201      	movs	r2, #1
 8007c36:	1171      	asrs	r1, r6, #5
 8007c38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c3c:	f006 061f 	and.w	r6, r6, #31
 8007c40:	fa02 f606 	lsl.w	r6, r2, r6
 8007c44:	421e      	tst	r6, r3
 8007c46:	bf18      	it	ne
 8007c48:	4617      	movne	r7, r2
 8007c4a:	f047 0720 	orr.w	r7, r7, #32
 8007c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c50:	601c      	str	r4, [r3, #0]
 8007c52:	9b06      	ldr	r3, [sp, #24]
 8007c54:	601d      	str	r5, [r3, #0]
 8007c56:	e69b      	b.n	8007990 <__gethex+0x124>
 8007c58:	4299      	cmp	r1, r3
 8007c5a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c5e:	d8d8      	bhi.n	8007c12 <__gethex+0x3a6>
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	459b      	cmp	fp, r3
 8007c64:	db17      	blt.n	8007c96 <__gethex+0x42a>
 8007c66:	6861      	ldr	r1, [r4, #4]
 8007c68:	9802      	ldr	r0, [sp, #8]
 8007c6a:	3101      	adds	r1, #1
 8007c6c:	f000 f928 	bl	8007ec0 <_Balloc>
 8007c70:	4681      	mov	r9, r0
 8007c72:	b918      	cbnz	r0, 8007c7c <__gethex+0x410>
 8007c74:	4602      	mov	r2, r0
 8007c76:	2184      	movs	r1, #132	; 0x84
 8007c78:	4b19      	ldr	r3, [pc, #100]	; (8007ce0 <__gethex+0x474>)
 8007c7a:	e6ac      	b.n	80079d6 <__gethex+0x16a>
 8007c7c:	6922      	ldr	r2, [r4, #16]
 8007c7e:	f104 010c 	add.w	r1, r4, #12
 8007c82:	3202      	adds	r2, #2
 8007c84:	0092      	lsls	r2, r2, #2
 8007c86:	300c      	adds	r0, #12
 8007c88:	f7fd f9ba 	bl	8005000 <memcpy>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	9802      	ldr	r0, [sp, #8]
 8007c90:	f000 f956 	bl	8007f40 <_Bfree>
 8007c94:	464c      	mov	r4, r9
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	6122      	str	r2, [r4, #16]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ca2:	615a      	str	r2, [r3, #20]
 8007ca4:	e7bd      	b.n	8007c22 <__gethex+0x3b6>
 8007ca6:	6922      	ldr	r2, [r4, #16]
 8007ca8:	455a      	cmp	r2, fp
 8007caa:	dd0b      	ble.n	8007cc4 <__gethex+0x458>
 8007cac:	2101      	movs	r1, #1
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7ff fd74 	bl	800779c <rshift>
 8007cb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cb8:	3501      	adds	r5, #1
 8007cba:	42ab      	cmp	r3, r5
 8007cbc:	f6ff aed5 	blt.w	8007a6a <__gethex+0x1fe>
 8007cc0:	2701      	movs	r7, #1
 8007cc2:	e7c2      	b.n	8007c4a <__gethex+0x3de>
 8007cc4:	f016 061f 	ands.w	r6, r6, #31
 8007cc8:	d0fa      	beq.n	8007cc0 <__gethex+0x454>
 8007cca:	449a      	add	sl, r3
 8007ccc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007cd0:	f000 f9ec 	bl	80080ac <__hi0bits>
 8007cd4:	f1c6 0620 	rsb	r6, r6, #32
 8007cd8:	42b0      	cmp	r0, r6
 8007cda:	dbe7      	blt.n	8007cac <__gethex+0x440>
 8007cdc:	e7f0      	b.n	8007cc0 <__gethex+0x454>
 8007cde:	bf00      	nop
 8007ce0:	08009d24 	.word	0x08009d24

08007ce4 <L_shift>:
 8007ce4:	f1c2 0208 	rsb	r2, r2, #8
 8007ce8:	0092      	lsls	r2, r2, #2
 8007cea:	b570      	push	{r4, r5, r6, lr}
 8007cec:	f1c2 0620 	rsb	r6, r2, #32
 8007cf0:	6843      	ldr	r3, [r0, #4]
 8007cf2:	6804      	ldr	r4, [r0, #0]
 8007cf4:	fa03 f506 	lsl.w	r5, r3, r6
 8007cf8:	432c      	orrs	r4, r5
 8007cfa:	40d3      	lsrs	r3, r2
 8007cfc:	6004      	str	r4, [r0, #0]
 8007cfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d02:	4288      	cmp	r0, r1
 8007d04:	d3f4      	bcc.n	8007cf0 <L_shift+0xc>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}

08007d08 <__match>:
 8007d08:	b530      	push	{r4, r5, lr}
 8007d0a:	6803      	ldr	r3, [r0, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d12:	b914      	cbnz	r4, 8007d1a <__match+0x12>
 8007d14:	6003      	str	r3, [r0, #0]
 8007d16:	2001      	movs	r0, #1
 8007d18:	bd30      	pop	{r4, r5, pc}
 8007d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d22:	2d19      	cmp	r5, #25
 8007d24:	bf98      	it	ls
 8007d26:	3220      	addls	r2, #32
 8007d28:	42a2      	cmp	r2, r4
 8007d2a:	d0f0      	beq.n	8007d0e <__match+0x6>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e7f3      	b.n	8007d18 <__match+0x10>

08007d30 <__hexnan>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	2500      	movs	r5, #0
 8007d36:	680b      	ldr	r3, [r1, #0]
 8007d38:	4682      	mov	sl, r0
 8007d3a:	115e      	asrs	r6, r3, #5
 8007d3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d40:	f013 031f 	ands.w	r3, r3, #31
 8007d44:	bf18      	it	ne
 8007d46:	3604      	addne	r6, #4
 8007d48:	1f37      	subs	r7, r6, #4
 8007d4a:	4690      	mov	r8, r2
 8007d4c:	46b9      	mov	r9, r7
 8007d4e:	463c      	mov	r4, r7
 8007d50:	46ab      	mov	fp, r5
 8007d52:	b087      	sub	sp, #28
 8007d54:	6801      	ldr	r1, [r0, #0]
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d5c:	9502      	str	r5, [sp, #8]
 8007d5e:	784a      	ldrb	r2, [r1, #1]
 8007d60:	1c4b      	adds	r3, r1, #1
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	b342      	cbz	r2, 8007db8 <__hexnan+0x88>
 8007d66:	4610      	mov	r0, r2
 8007d68:	9105      	str	r1, [sp, #20]
 8007d6a:	9204      	str	r2, [sp, #16]
 8007d6c:	f7ff fd69 	bl	8007842 <__hexdig_fun>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d14f      	bne.n	8007e14 <__hexnan+0xe4>
 8007d74:	9a04      	ldr	r2, [sp, #16]
 8007d76:	9905      	ldr	r1, [sp, #20]
 8007d78:	2a20      	cmp	r2, #32
 8007d7a:	d818      	bhi.n	8007dae <__hexnan+0x7e>
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	459b      	cmp	fp, r3
 8007d80:	dd13      	ble.n	8007daa <__hexnan+0x7a>
 8007d82:	454c      	cmp	r4, r9
 8007d84:	d206      	bcs.n	8007d94 <__hexnan+0x64>
 8007d86:	2d07      	cmp	r5, #7
 8007d88:	dc04      	bgt.n	8007d94 <__hexnan+0x64>
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff ffa8 	bl	8007ce4 <L_shift>
 8007d94:	4544      	cmp	r4, r8
 8007d96:	d950      	bls.n	8007e3a <__hexnan+0x10a>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f1a4 0904 	sub.w	r9, r4, #4
 8007d9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007da2:	461d      	mov	r5, r3
 8007da4:	464c      	mov	r4, r9
 8007da6:	f8cd b008 	str.w	fp, [sp, #8]
 8007daa:	9903      	ldr	r1, [sp, #12]
 8007dac:	e7d7      	b.n	8007d5e <__hexnan+0x2e>
 8007dae:	2a29      	cmp	r2, #41	; 0x29
 8007db0:	d156      	bne.n	8007e60 <__hexnan+0x130>
 8007db2:	3102      	adds	r1, #2
 8007db4:	f8ca 1000 	str.w	r1, [sl]
 8007db8:	f1bb 0f00 	cmp.w	fp, #0
 8007dbc:	d050      	beq.n	8007e60 <__hexnan+0x130>
 8007dbe:	454c      	cmp	r4, r9
 8007dc0:	d206      	bcs.n	8007dd0 <__hexnan+0xa0>
 8007dc2:	2d07      	cmp	r5, #7
 8007dc4:	dc04      	bgt.n	8007dd0 <__hexnan+0xa0>
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4649      	mov	r1, r9
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff ff8a 	bl	8007ce4 <L_shift>
 8007dd0:	4544      	cmp	r4, r8
 8007dd2:	d934      	bls.n	8007e3e <__hexnan+0x10e>
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	f1a8 0204 	sub.w	r2, r8, #4
 8007dda:	f853 1b04 	ldr.w	r1, [r3], #4
 8007dde:	429f      	cmp	r7, r3
 8007de0:	f842 1f04 	str.w	r1, [r2, #4]!
 8007de4:	d2f9      	bcs.n	8007dda <__hexnan+0xaa>
 8007de6:	1b3b      	subs	r3, r7, r4
 8007de8:	f023 0303 	bic.w	r3, r3, #3
 8007dec:	3304      	adds	r3, #4
 8007dee:	3401      	adds	r4, #1
 8007df0:	3e03      	subs	r6, #3
 8007df2:	42b4      	cmp	r4, r6
 8007df4:	bf88      	it	hi
 8007df6:	2304      	movhi	r3, #4
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4443      	add	r3, r8
 8007dfc:	f843 2b04 	str.w	r2, [r3], #4
 8007e00:	429f      	cmp	r7, r3
 8007e02:	d2fb      	bcs.n	8007dfc <__hexnan+0xcc>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	b91b      	cbnz	r3, 8007e10 <__hexnan+0xe0>
 8007e08:	4547      	cmp	r7, r8
 8007e0a:	d127      	bne.n	8007e5c <__hexnan+0x12c>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	2005      	movs	r0, #5
 8007e12:	e026      	b.n	8007e62 <__hexnan+0x132>
 8007e14:	3501      	adds	r5, #1
 8007e16:	2d08      	cmp	r5, #8
 8007e18:	f10b 0b01 	add.w	fp, fp, #1
 8007e1c:	dd06      	ble.n	8007e2c <__hexnan+0xfc>
 8007e1e:	4544      	cmp	r4, r8
 8007e20:	d9c3      	bls.n	8007daa <__hexnan+0x7a>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2501      	movs	r5, #1
 8007e26:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e2a:	3c04      	subs	r4, #4
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	f000 000f 	and.w	r0, r0, #15
 8007e32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	e7b7      	b.n	8007daa <__hexnan+0x7a>
 8007e3a:	2508      	movs	r5, #8
 8007e3c:	e7b5      	b.n	8007daa <__hexnan+0x7a>
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0df      	beq.n	8007e04 <__hexnan+0xd4>
 8007e44:	f04f 32ff 	mov.w	r2, #4294967295
 8007e48:	f1c3 0320 	rsb	r3, r3, #32
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e54:	401a      	ands	r2, r3
 8007e56:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e5a:	e7d3      	b.n	8007e04 <__hexnan+0xd4>
 8007e5c:	3f04      	subs	r7, #4
 8007e5e:	e7d1      	b.n	8007e04 <__hexnan+0xd4>
 8007e60:	2004      	movs	r0, #4
 8007e62:	b007      	add	sp, #28
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e68 <_localeconv_r>:
 8007e68:	4800      	ldr	r0, [pc, #0]	; (8007e6c <_localeconv_r+0x4>)
 8007e6a:	4770      	bx	lr
 8007e6c:	20000178 	.word	0x20000178

08007e70 <malloc>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <malloc+0xc>)
 8007e72:	4601      	mov	r1, r0
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f000 bd35 	b.w	80088e4 <_malloc_r>
 8007e7a:	bf00      	nop
 8007e7c:	20000020 	.word	0x20000020

08007e80 <__ascii_mbtowc>:
 8007e80:	b082      	sub	sp, #8
 8007e82:	b901      	cbnz	r1, 8007e86 <__ascii_mbtowc+0x6>
 8007e84:	a901      	add	r1, sp, #4
 8007e86:	b142      	cbz	r2, 8007e9a <__ascii_mbtowc+0x1a>
 8007e88:	b14b      	cbz	r3, 8007e9e <__ascii_mbtowc+0x1e>
 8007e8a:	7813      	ldrb	r3, [r2, #0]
 8007e8c:	600b      	str	r3, [r1, #0]
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	1e10      	subs	r0, r2, #0
 8007e92:	bf18      	it	ne
 8007e94:	2001      	movne	r0, #1
 8007e96:	b002      	add	sp, #8
 8007e98:	4770      	bx	lr
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	e7fb      	b.n	8007e96 <__ascii_mbtowc+0x16>
 8007e9e:	f06f 0001 	mvn.w	r0, #1
 8007ea2:	e7f8      	b.n	8007e96 <__ascii_mbtowc+0x16>

08007ea4 <memchr>:
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	b2c9      	uxtb	r1, r1
 8007eaa:	4402      	add	r2, r0
 8007eac:	4293      	cmp	r3, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	d101      	bne.n	8007eb6 <memchr+0x12>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e003      	b.n	8007ebe <memchr+0x1a>
 8007eb6:	7804      	ldrb	r4, [r0, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	428c      	cmp	r4, r1
 8007ebc:	d1f6      	bne.n	8007eac <memchr+0x8>
 8007ebe:	bd10      	pop	{r4, pc}

08007ec0 <_Balloc>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	b976      	cbnz	r6, 8007ee8 <_Balloc+0x28>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	f7ff ffd0 	bl	8007e70 <malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_Balloc+0x20>
 8007ed6:	2166      	movs	r1, #102	; 0x66
 8007ed8:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <_Balloc+0x78>)
 8007eda:	4818      	ldr	r0, [pc, #96]	; (8007f3c <_Balloc+0x7c>)
 8007edc:	f000 feee 	bl	8008cbc <__assert_func>
 8007ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee4:	6006      	str	r6, [r0, #0]
 8007ee6:	60c6      	str	r6, [r0, #12]
 8007ee8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007eea:	68f3      	ldr	r3, [r6, #12]
 8007eec:	b183      	cbz	r3, 8007f10 <_Balloc+0x50>
 8007eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ef6:	b9b8      	cbnz	r0, 8007f28 <_Balloc+0x68>
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f605 	lsl.w	r6, r1, r5
 8007efe:	1d72      	adds	r2, r6, #5
 8007f00:	4620      	mov	r0, r4
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	f000 fc94 	bl	8008830 <_calloc_r>
 8007f08:	b160      	cbz	r0, 8007f24 <_Balloc+0x64>
 8007f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f0e:	e00e      	b.n	8007f2e <_Balloc+0x6e>
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	2104      	movs	r1, #4
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fc8b 	bl	8008830 <_calloc_r>
 8007f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1c:	60f0      	str	r0, [r6, #12]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e4      	bne.n	8007eee <_Balloc+0x2e>
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	6802      	ldr	r2, [r0, #0]
 8007f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f34:	e7f7      	b.n	8007f26 <_Balloc+0x66>
 8007f36:	bf00      	nop
 8007f38:	08009cae 	.word	0x08009cae
 8007f3c:	08009db4 	.word	0x08009db4

08007f40 <_Bfree>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	b976      	cbnz	r6, 8007f68 <_Bfree+0x28>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ff90 	bl	8007e70 <malloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6268      	str	r0, [r5, #36]	; 0x24
 8007f54:	b920      	cbnz	r0, 8007f60 <_Bfree+0x20>
 8007f56:	218a      	movs	r1, #138	; 0x8a
 8007f58:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <_Bfree+0x3c>)
 8007f5a:	4809      	ldr	r0, [pc, #36]	; (8007f80 <_Bfree+0x40>)
 8007f5c:	f000 feae 	bl	8008cbc <__assert_func>
 8007f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f64:	6006      	str	r6, [r0, #0]
 8007f66:	60c6      	str	r6, [r0, #12]
 8007f68:	b13c      	cbz	r4, 8007f7a <_Bfree+0x3a>
 8007f6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f74:	6021      	str	r1, [r4, #0]
 8007f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	08009cae 	.word	0x08009cae
 8007f80:	08009db4 	.word	0x08009db4

08007f84 <__multadd>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	4698      	mov	r8, r3
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	690e      	ldr	r6, [r1, #16]
 8007f90:	4607      	mov	r7, r0
 8007f92:	f101 0014 	add.w	r0, r1, #20
 8007f96:	6805      	ldr	r5, [r0, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	b2a9      	uxth	r1, r5
 8007f9c:	fb02 8101 	mla	r1, r2, r1, r8
 8007fa0:	0c2d      	lsrs	r5, r5, #16
 8007fa2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007fa6:	fb02 c505 	mla	r5, r2, r5, ip
 8007faa:	b289      	uxth	r1, r1
 8007fac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fb0:	429e      	cmp	r6, r3
 8007fb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fb6:	f840 1b04 	str.w	r1, [r0], #4
 8007fba:	dcec      	bgt.n	8007f96 <__multadd+0x12>
 8007fbc:	f1b8 0f00 	cmp.w	r8, #0
 8007fc0:	d022      	beq.n	8008008 <__multadd+0x84>
 8007fc2:	68a3      	ldr	r3, [r4, #8]
 8007fc4:	42b3      	cmp	r3, r6
 8007fc6:	dc19      	bgt.n	8007ffc <__multadd+0x78>
 8007fc8:	6861      	ldr	r1, [r4, #4]
 8007fca:	4638      	mov	r0, r7
 8007fcc:	3101      	adds	r1, #1
 8007fce:	f7ff ff77 	bl	8007ec0 <_Balloc>
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	b928      	cbnz	r0, 8007fe2 <__multadd+0x5e>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	21b5      	movs	r1, #181	; 0xb5
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <__multadd+0x8c>)
 8007fdc:	480d      	ldr	r0, [pc, #52]	; (8008014 <__multadd+0x90>)
 8007fde:	f000 fe6d 	bl	8008cbc <__assert_func>
 8007fe2:	6922      	ldr	r2, [r4, #16]
 8007fe4:	f104 010c 	add.w	r1, r4, #12
 8007fe8:	3202      	adds	r2, #2
 8007fea:	0092      	lsls	r2, r2, #2
 8007fec:	300c      	adds	r0, #12
 8007fee:	f7fd f807 	bl	8005000 <memcpy>
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ffa3 	bl	8007f40 <_Bfree>
 8007ffa:	462c      	mov	r4, r5
 8007ffc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008000:	3601      	adds	r6, #1
 8008002:	f8c3 8014 	str.w	r8, [r3, #20]
 8008006:	6126      	str	r6, [r4, #16]
 8008008:	4620      	mov	r0, r4
 800800a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800e:	bf00      	nop
 8008010:	08009d24 	.word	0x08009d24
 8008014:	08009db4 	.word	0x08009db4

08008018 <__s2b>:
 8008018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800801c:	4615      	mov	r5, r2
 800801e:	2209      	movs	r2, #9
 8008020:	461f      	mov	r7, r3
 8008022:	3308      	adds	r3, #8
 8008024:	460c      	mov	r4, r1
 8008026:	fb93 f3f2 	sdiv	r3, r3, r2
 800802a:	4606      	mov	r6, r0
 800802c:	2201      	movs	r2, #1
 800802e:	2100      	movs	r1, #0
 8008030:	429a      	cmp	r2, r3
 8008032:	db09      	blt.n	8008048 <__s2b+0x30>
 8008034:	4630      	mov	r0, r6
 8008036:	f7ff ff43 	bl	8007ec0 <_Balloc>
 800803a:	b940      	cbnz	r0, 800804e <__s2b+0x36>
 800803c:	4602      	mov	r2, r0
 800803e:	21ce      	movs	r1, #206	; 0xce
 8008040:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <__s2b+0x8c>)
 8008042:	4819      	ldr	r0, [pc, #100]	; (80080a8 <__s2b+0x90>)
 8008044:	f000 fe3a 	bl	8008cbc <__assert_func>
 8008048:	0052      	lsls	r2, r2, #1
 800804a:	3101      	adds	r1, #1
 800804c:	e7f0      	b.n	8008030 <__s2b+0x18>
 800804e:	9b08      	ldr	r3, [sp, #32]
 8008050:	2d09      	cmp	r5, #9
 8008052:	6143      	str	r3, [r0, #20]
 8008054:	f04f 0301 	mov.w	r3, #1
 8008058:	6103      	str	r3, [r0, #16]
 800805a:	dd16      	ble.n	800808a <__s2b+0x72>
 800805c:	f104 0909 	add.w	r9, r4, #9
 8008060:	46c8      	mov	r8, r9
 8008062:	442c      	add	r4, r5
 8008064:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008068:	4601      	mov	r1, r0
 800806a:	220a      	movs	r2, #10
 800806c:	4630      	mov	r0, r6
 800806e:	3b30      	subs	r3, #48	; 0x30
 8008070:	f7ff ff88 	bl	8007f84 <__multadd>
 8008074:	45a0      	cmp	r8, r4
 8008076:	d1f5      	bne.n	8008064 <__s2b+0x4c>
 8008078:	f1a5 0408 	sub.w	r4, r5, #8
 800807c:	444c      	add	r4, r9
 800807e:	1b2d      	subs	r5, r5, r4
 8008080:	1963      	adds	r3, r4, r5
 8008082:	42bb      	cmp	r3, r7
 8008084:	db04      	blt.n	8008090 <__s2b+0x78>
 8008086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808a:	2509      	movs	r5, #9
 800808c:	340a      	adds	r4, #10
 800808e:	e7f6      	b.n	800807e <__s2b+0x66>
 8008090:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008094:	4601      	mov	r1, r0
 8008096:	220a      	movs	r2, #10
 8008098:	4630      	mov	r0, r6
 800809a:	3b30      	subs	r3, #48	; 0x30
 800809c:	f7ff ff72 	bl	8007f84 <__multadd>
 80080a0:	e7ee      	b.n	8008080 <__s2b+0x68>
 80080a2:	bf00      	nop
 80080a4:	08009d24 	.word	0x08009d24
 80080a8:	08009db4 	.word	0x08009db4

080080ac <__hi0bits>:
 80080ac:	0c02      	lsrs	r2, r0, #16
 80080ae:	0412      	lsls	r2, r2, #16
 80080b0:	4603      	mov	r3, r0
 80080b2:	b9ca      	cbnz	r2, 80080e8 <__hi0bits+0x3c>
 80080b4:	0403      	lsls	r3, r0, #16
 80080b6:	2010      	movs	r0, #16
 80080b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080bc:	bf04      	itt	eq
 80080be:	021b      	lsleq	r3, r3, #8
 80080c0:	3008      	addeq	r0, #8
 80080c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80080c6:	bf04      	itt	eq
 80080c8:	011b      	lsleq	r3, r3, #4
 80080ca:	3004      	addeq	r0, #4
 80080cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80080d0:	bf04      	itt	eq
 80080d2:	009b      	lsleq	r3, r3, #2
 80080d4:	3002      	addeq	r0, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	db05      	blt.n	80080e6 <__hi0bits+0x3a>
 80080da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80080de:	f100 0001 	add.w	r0, r0, #1
 80080e2:	bf08      	it	eq
 80080e4:	2020      	moveq	r0, #32
 80080e6:	4770      	bx	lr
 80080e8:	2000      	movs	r0, #0
 80080ea:	e7e5      	b.n	80080b8 <__hi0bits+0xc>

080080ec <__lo0bits>:
 80080ec:	6803      	ldr	r3, [r0, #0]
 80080ee:	4602      	mov	r2, r0
 80080f0:	f013 0007 	ands.w	r0, r3, #7
 80080f4:	d00b      	beq.n	800810e <__lo0bits+0x22>
 80080f6:	07d9      	lsls	r1, r3, #31
 80080f8:	d422      	bmi.n	8008140 <__lo0bits+0x54>
 80080fa:	0798      	lsls	r0, r3, #30
 80080fc:	bf49      	itett	mi
 80080fe:	085b      	lsrmi	r3, r3, #1
 8008100:	089b      	lsrpl	r3, r3, #2
 8008102:	2001      	movmi	r0, #1
 8008104:	6013      	strmi	r3, [r2, #0]
 8008106:	bf5c      	itt	pl
 8008108:	2002      	movpl	r0, #2
 800810a:	6013      	strpl	r3, [r2, #0]
 800810c:	4770      	bx	lr
 800810e:	b299      	uxth	r1, r3
 8008110:	b909      	cbnz	r1, 8008116 <__lo0bits+0x2a>
 8008112:	2010      	movs	r0, #16
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	f013 0fff 	tst.w	r3, #255	; 0xff
 800811a:	bf04      	itt	eq
 800811c:	0a1b      	lsreq	r3, r3, #8
 800811e:	3008      	addeq	r0, #8
 8008120:	0719      	lsls	r1, r3, #28
 8008122:	bf04      	itt	eq
 8008124:	091b      	lsreq	r3, r3, #4
 8008126:	3004      	addeq	r0, #4
 8008128:	0799      	lsls	r1, r3, #30
 800812a:	bf04      	itt	eq
 800812c:	089b      	lsreq	r3, r3, #2
 800812e:	3002      	addeq	r0, #2
 8008130:	07d9      	lsls	r1, r3, #31
 8008132:	d403      	bmi.n	800813c <__lo0bits+0x50>
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	f100 0001 	add.w	r0, r0, #1
 800813a:	d003      	beq.n	8008144 <__lo0bits+0x58>
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4770      	bx	lr
 8008140:	2000      	movs	r0, #0
 8008142:	4770      	bx	lr
 8008144:	2020      	movs	r0, #32
 8008146:	4770      	bx	lr

08008148 <__i2b>:
 8008148:	b510      	push	{r4, lr}
 800814a:	460c      	mov	r4, r1
 800814c:	2101      	movs	r1, #1
 800814e:	f7ff feb7 	bl	8007ec0 <_Balloc>
 8008152:	4602      	mov	r2, r0
 8008154:	b928      	cbnz	r0, 8008162 <__i2b+0x1a>
 8008156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800815a:	4b04      	ldr	r3, [pc, #16]	; (800816c <__i2b+0x24>)
 800815c:	4804      	ldr	r0, [pc, #16]	; (8008170 <__i2b+0x28>)
 800815e:	f000 fdad 	bl	8008cbc <__assert_func>
 8008162:	2301      	movs	r3, #1
 8008164:	6144      	str	r4, [r0, #20]
 8008166:	6103      	str	r3, [r0, #16]
 8008168:	bd10      	pop	{r4, pc}
 800816a:	bf00      	nop
 800816c:	08009d24 	.word	0x08009d24
 8008170:	08009db4 	.word	0x08009db4

08008174 <__multiply>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	4614      	mov	r4, r2
 800817a:	690a      	ldr	r2, [r1, #16]
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	460d      	mov	r5, r1
 8008180:	429a      	cmp	r2, r3
 8008182:	bfbe      	ittt	lt
 8008184:	460b      	movlt	r3, r1
 8008186:	4625      	movlt	r5, r4
 8008188:	461c      	movlt	r4, r3
 800818a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800818e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008192:	68ab      	ldr	r3, [r5, #8]
 8008194:	6869      	ldr	r1, [r5, #4]
 8008196:	eb0a 0709 	add.w	r7, sl, r9
 800819a:	42bb      	cmp	r3, r7
 800819c:	b085      	sub	sp, #20
 800819e:	bfb8      	it	lt
 80081a0:	3101      	addlt	r1, #1
 80081a2:	f7ff fe8d 	bl	8007ec0 <_Balloc>
 80081a6:	b930      	cbnz	r0, 80081b6 <__multiply+0x42>
 80081a8:	4602      	mov	r2, r0
 80081aa:	f240 115d 	movw	r1, #349	; 0x15d
 80081ae:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <__multiply+0x140>)
 80081b0:	4841      	ldr	r0, [pc, #260]	; (80082b8 <__multiply+0x144>)
 80081b2:	f000 fd83 	bl	8008cbc <__assert_func>
 80081b6:	f100 0614 	add.w	r6, r0, #20
 80081ba:	4633      	mov	r3, r6
 80081bc:	2200      	movs	r2, #0
 80081be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80081c2:	4543      	cmp	r3, r8
 80081c4:	d31e      	bcc.n	8008204 <__multiply+0x90>
 80081c6:	f105 0c14 	add.w	ip, r5, #20
 80081ca:	f104 0314 	add.w	r3, r4, #20
 80081ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80081d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80081d6:	9202      	str	r2, [sp, #8]
 80081d8:	ebac 0205 	sub.w	r2, ip, r5
 80081dc:	3a15      	subs	r2, #21
 80081de:	f022 0203 	bic.w	r2, r2, #3
 80081e2:	3204      	adds	r2, #4
 80081e4:	f105 0115 	add.w	r1, r5, #21
 80081e8:	458c      	cmp	ip, r1
 80081ea:	bf38      	it	cc
 80081ec:	2204      	movcc	r2, #4
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	9a02      	ldr	r2, [sp, #8]
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d808      	bhi.n	800820a <__multiply+0x96>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	dc55      	bgt.n	80082a8 <__multiply+0x134>
 80081fc:	6107      	str	r7, [r0, #16]
 80081fe:	b005      	add	sp, #20
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	f843 2b04 	str.w	r2, [r3], #4
 8008208:	e7db      	b.n	80081c2 <__multiply+0x4e>
 800820a:	f8b3 a000 	ldrh.w	sl, [r3]
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d020      	beq.n	8008256 <__multiply+0xe2>
 8008214:	46b1      	mov	r9, r6
 8008216:	2200      	movs	r2, #0
 8008218:	f105 0e14 	add.w	lr, r5, #20
 800821c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008220:	f8d9 b000 	ldr.w	fp, [r9]
 8008224:	b2a1      	uxth	r1, r4
 8008226:	fa1f fb8b 	uxth.w	fp, fp
 800822a:	fb0a b101 	mla	r1, sl, r1, fp
 800822e:	4411      	add	r1, r2
 8008230:	f8d9 2000 	ldr.w	r2, [r9]
 8008234:	0c24      	lsrs	r4, r4, #16
 8008236:	0c12      	lsrs	r2, r2, #16
 8008238:	fb0a 2404 	mla	r4, sl, r4, r2
 800823c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008240:	b289      	uxth	r1, r1
 8008242:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008246:	45f4      	cmp	ip, lr
 8008248:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800824c:	f849 1b04 	str.w	r1, [r9], #4
 8008250:	d8e4      	bhi.n	800821c <__multiply+0xa8>
 8008252:	9901      	ldr	r1, [sp, #4]
 8008254:	5072      	str	r2, [r6, r1]
 8008256:	9a03      	ldr	r2, [sp, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	d01f      	beq.n	80082a4 <__multiply+0x130>
 8008264:	46b6      	mov	lr, r6
 8008266:	f04f 0a00 	mov.w	sl, #0
 800826a:	6834      	ldr	r4, [r6, #0]
 800826c:	f105 0114 	add.w	r1, r5, #20
 8008270:	880a      	ldrh	r2, [r1, #0]
 8008272:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008276:	b2a4      	uxth	r4, r4
 8008278:	fb09 b202 	mla	r2, r9, r2, fp
 800827c:	4492      	add	sl, r2
 800827e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008282:	f84e 4b04 	str.w	r4, [lr], #4
 8008286:	f851 4b04 	ldr.w	r4, [r1], #4
 800828a:	f8be 2000 	ldrh.w	r2, [lr]
 800828e:	0c24      	lsrs	r4, r4, #16
 8008290:	fb09 2404 	mla	r4, r9, r4, r2
 8008294:	458c      	cmp	ip, r1
 8008296:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800829a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800829e:	d8e7      	bhi.n	8008270 <__multiply+0xfc>
 80082a0:	9a01      	ldr	r2, [sp, #4]
 80082a2:	50b4      	str	r4, [r6, r2]
 80082a4:	3604      	adds	r6, #4
 80082a6:	e7a3      	b.n	80081f0 <__multiply+0x7c>
 80082a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1a5      	bne.n	80081fc <__multiply+0x88>
 80082b0:	3f01      	subs	r7, #1
 80082b2:	e7a1      	b.n	80081f8 <__multiply+0x84>
 80082b4:	08009d24 	.word	0x08009d24
 80082b8:	08009db4 	.word	0x08009db4

080082bc <__pow5mult>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	4615      	mov	r5, r2
 80082c2:	f012 0203 	ands.w	r2, r2, #3
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	d007      	beq.n	80082dc <__pow5mult+0x20>
 80082cc:	4c25      	ldr	r4, [pc, #148]	; (8008364 <__pow5mult+0xa8>)
 80082ce:	3a01      	subs	r2, #1
 80082d0:	2300      	movs	r3, #0
 80082d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082d6:	f7ff fe55 	bl	8007f84 <__multadd>
 80082da:	4607      	mov	r7, r0
 80082dc:	10ad      	asrs	r5, r5, #2
 80082de:	d03d      	beq.n	800835c <__pow5mult+0xa0>
 80082e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082e2:	b97c      	cbnz	r4, 8008304 <__pow5mult+0x48>
 80082e4:	2010      	movs	r0, #16
 80082e6:	f7ff fdc3 	bl	8007e70 <malloc>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6270      	str	r0, [r6, #36]	; 0x24
 80082ee:	b928      	cbnz	r0, 80082fc <__pow5mult+0x40>
 80082f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082f4:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <__pow5mult+0xac>)
 80082f6:	481d      	ldr	r0, [pc, #116]	; (800836c <__pow5mult+0xb0>)
 80082f8:	f000 fce0 	bl	8008cbc <__assert_func>
 80082fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008300:	6004      	str	r4, [r0, #0]
 8008302:	60c4      	str	r4, [r0, #12]
 8008304:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008308:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800830c:	b94c      	cbnz	r4, 8008322 <__pow5mult+0x66>
 800830e:	f240 2171 	movw	r1, #625	; 0x271
 8008312:	4630      	mov	r0, r6
 8008314:	f7ff ff18 	bl	8008148 <__i2b>
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	f04f 0900 	mov.w	r9, #0
 8008326:	07eb      	lsls	r3, r5, #31
 8008328:	d50a      	bpl.n	8008340 <__pow5mult+0x84>
 800832a:	4639      	mov	r1, r7
 800832c:	4622      	mov	r2, r4
 800832e:	4630      	mov	r0, r6
 8008330:	f7ff ff20 	bl	8008174 <__multiply>
 8008334:	4680      	mov	r8, r0
 8008336:	4639      	mov	r1, r7
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff fe01 	bl	8007f40 <_Bfree>
 800833e:	4647      	mov	r7, r8
 8008340:	106d      	asrs	r5, r5, #1
 8008342:	d00b      	beq.n	800835c <__pow5mult+0xa0>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	b938      	cbnz	r0, 8008358 <__pow5mult+0x9c>
 8008348:	4622      	mov	r2, r4
 800834a:	4621      	mov	r1, r4
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff ff11 	bl	8008174 <__multiply>
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	f8c0 9000 	str.w	r9, [r0]
 8008358:	4604      	mov	r4, r0
 800835a:	e7e4      	b.n	8008326 <__pow5mult+0x6a>
 800835c:	4638      	mov	r0, r7
 800835e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008362:	bf00      	nop
 8008364:	08009f08 	.word	0x08009f08
 8008368:	08009cae 	.word	0x08009cae
 800836c:	08009db4 	.word	0x08009db4

08008370 <__lshift>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	460c      	mov	r4, r1
 8008376:	4607      	mov	r7, r0
 8008378:	4691      	mov	r9, r2
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	6849      	ldr	r1, [r1, #4]
 800837e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008388:	f108 0601 	add.w	r6, r8, #1
 800838c:	42b3      	cmp	r3, r6
 800838e:	db0b      	blt.n	80083a8 <__lshift+0x38>
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff fd95 	bl	8007ec0 <_Balloc>
 8008396:	4605      	mov	r5, r0
 8008398:	b948      	cbnz	r0, 80083ae <__lshift+0x3e>
 800839a:	4602      	mov	r2, r0
 800839c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083a0:	4b27      	ldr	r3, [pc, #156]	; (8008440 <__lshift+0xd0>)
 80083a2:	4828      	ldr	r0, [pc, #160]	; (8008444 <__lshift+0xd4>)
 80083a4:	f000 fc8a 	bl	8008cbc <__assert_func>
 80083a8:	3101      	adds	r1, #1
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	e7ee      	b.n	800838c <__lshift+0x1c>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f100 0114 	add.w	r1, r0, #20
 80083b4:	f100 0210 	add.w	r2, r0, #16
 80083b8:	4618      	mov	r0, r3
 80083ba:	4553      	cmp	r3, sl
 80083bc:	db33      	blt.n	8008426 <__lshift+0xb6>
 80083be:	6920      	ldr	r0, [r4, #16]
 80083c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c4:	f104 0314 	add.w	r3, r4, #20
 80083c8:	f019 091f 	ands.w	r9, r9, #31
 80083cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083d4:	d02b      	beq.n	800842e <__lshift+0xbe>
 80083d6:	468a      	mov	sl, r1
 80083d8:	2200      	movs	r2, #0
 80083da:	f1c9 0e20 	rsb	lr, r9, #32
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	fa00 f009 	lsl.w	r0, r0, r9
 80083e4:	4302      	orrs	r2, r0
 80083e6:	f84a 2b04 	str.w	r2, [sl], #4
 80083ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ee:	459c      	cmp	ip, r3
 80083f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80083f4:	d8f3      	bhi.n	80083de <__lshift+0x6e>
 80083f6:	ebac 0304 	sub.w	r3, ip, r4
 80083fa:	3b15      	subs	r3, #21
 80083fc:	f023 0303 	bic.w	r3, r3, #3
 8008400:	3304      	adds	r3, #4
 8008402:	f104 0015 	add.w	r0, r4, #21
 8008406:	4584      	cmp	ip, r0
 8008408:	bf38      	it	cc
 800840a:	2304      	movcc	r3, #4
 800840c:	50ca      	str	r2, [r1, r3]
 800840e:	b10a      	cbz	r2, 8008414 <__lshift+0xa4>
 8008410:	f108 0602 	add.w	r6, r8, #2
 8008414:	3e01      	subs	r6, #1
 8008416:	4638      	mov	r0, r7
 8008418:	4621      	mov	r1, r4
 800841a:	612e      	str	r6, [r5, #16]
 800841c:	f7ff fd90 	bl	8007f40 <_Bfree>
 8008420:	4628      	mov	r0, r5
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008426:	f842 0f04 	str.w	r0, [r2, #4]!
 800842a:	3301      	adds	r3, #1
 800842c:	e7c5      	b.n	80083ba <__lshift+0x4a>
 800842e:	3904      	subs	r1, #4
 8008430:	f853 2b04 	ldr.w	r2, [r3], #4
 8008434:	459c      	cmp	ip, r3
 8008436:	f841 2f04 	str.w	r2, [r1, #4]!
 800843a:	d8f9      	bhi.n	8008430 <__lshift+0xc0>
 800843c:	e7ea      	b.n	8008414 <__lshift+0xa4>
 800843e:	bf00      	nop
 8008440:	08009d24 	.word	0x08009d24
 8008444:	08009db4 	.word	0x08009db4

08008448 <__mcmp>:
 8008448:	4603      	mov	r3, r0
 800844a:	690a      	ldr	r2, [r1, #16]
 800844c:	6900      	ldr	r0, [r0, #16]
 800844e:	b530      	push	{r4, r5, lr}
 8008450:	1a80      	subs	r0, r0, r2
 8008452:	d10d      	bne.n	8008470 <__mcmp+0x28>
 8008454:	3314      	adds	r3, #20
 8008456:	3114      	adds	r1, #20
 8008458:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800845c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008460:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008464:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008468:	4295      	cmp	r5, r2
 800846a:	d002      	beq.n	8008472 <__mcmp+0x2a>
 800846c:	d304      	bcc.n	8008478 <__mcmp+0x30>
 800846e:	2001      	movs	r0, #1
 8008470:	bd30      	pop	{r4, r5, pc}
 8008472:	42a3      	cmp	r3, r4
 8008474:	d3f4      	bcc.n	8008460 <__mcmp+0x18>
 8008476:	e7fb      	b.n	8008470 <__mcmp+0x28>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	e7f8      	b.n	8008470 <__mcmp+0x28>
	...

08008480 <__mdiff>:
 8008480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	4606      	mov	r6, r0
 8008488:	4611      	mov	r1, r2
 800848a:	4620      	mov	r0, r4
 800848c:	4692      	mov	sl, r2
 800848e:	f7ff ffdb 	bl	8008448 <__mcmp>
 8008492:	1e05      	subs	r5, r0, #0
 8008494:	d111      	bne.n	80084ba <__mdiff+0x3a>
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff fd11 	bl	8007ec0 <_Balloc>
 800849e:	4602      	mov	r2, r0
 80084a0:	b928      	cbnz	r0, 80084ae <__mdiff+0x2e>
 80084a2:	f240 2132 	movw	r1, #562	; 0x232
 80084a6:	4b3c      	ldr	r3, [pc, #240]	; (8008598 <__mdiff+0x118>)
 80084a8:	483c      	ldr	r0, [pc, #240]	; (800859c <__mdiff+0x11c>)
 80084aa:	f000 fc07 	bl	8008cbc <__assert_func>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084b4:	4610      	mov	r0, r2
 80084b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	bfa4      	itt	ge
 80084bc:	4653      	movge	r3, sl
 80084be:	46a2      	movge	sl, r4
 80084c0:	4630      	mov	r0, r6
 80084c2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80084c6:	bfa6      	itte	ge
 80084c8:	461c      	movge	r4, r3
 80084ca:	2500      	movge	r5, #0
 80084cc:	2501      	movlt	r5, #1
 80084ce:	f7ff fcf7 	bl	8007ec0 <_Balloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	b918      	cbnz	r0, 80084de <__mdiff+0x5e>
 80084d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084da:	4b2f      	ldr	r3, [pc, #188]	; (8008598 <__mdiff+0x118>)
 80084dc:	e7e4      	b.n	80084a8 <__mdiff+0x28>
 80084de:	f100 0814 	add.w	r8, r0, #20
 80084e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80084e6:	60c5      	str	r5, [r0, #12]
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	f10a 0514 	add.w	r5, sl, #20
 80084f0:	f10a 0010 	add.w	r0, sl, #16
 80084f4:	46c2      	mov	sl, r8
 80084f6:	6926      	ldr	r6, [r4, #16]
 80084f8:	f104 0914 	add.w	r9, r4, #20
 80084fc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008504:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008508:	f859 3b04 	ldr.w	r3, [r9], #4
 800850c:	fa1f f18b 	uxth.w	r1, fp
 8008510:	4461      	add	r1, ip
 8008512:	fa1f fc83 	uxth.w	ip, r3
 8008516:	0c1b      	lsrs	r3, r3, #16
 8008518:	eba1 010c 	sub.w	r1, r1, ip
 800851c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008520:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008524:	b289      	uxth	r1, r1
 8008526:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800852a:	454e      	cmp	r6, r9
 800852c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008530:	f84a 3b04 	str.w	r3, [sl], #4
 8008534:	d8e6      	bhi.n	8008504 <__mdiff+0x84>
 8008536:	1b33      	subs	r3, r6, r4
 8008538:	3b15      	subs	r3, #21
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	3415      	adds	r4, #21
 8008540:	3304      	adds	r3, #4
 8008542:	42a6      	cmp	r6, r4
 8008544:	bf38      	it	cc
 8008546:	2304      	movcc	r3, #4
 8008548:	441d      	add	r5, r3
 800854a:	4443      	add	r3, r8
 800854c:	461e      	mov	r6, r3
 800854e:	462c      	mov	r4, r5
 8008550:	4574      	cmp	r4, lr
 8008552:	d30e      	bcc.n	8008572 <__mdiff+0xf2>
 8008554:	f10e 0103 	add.w	r1, lr, #3
 8008558:	1b49      	subs	r1, r1, r5
 800855a:	f021 0103 	bic.w	r1, r1, #3
 800855e:	3d03      	subs	r5, #3
 8008560:	45ae      	cmp	lr, r5
 8008562:	bf38      	it	cc
 8008564:	2100      	movcc	r1, #0
 8008566:	4419      	add	r1, r3
 8008568:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800856c:	b18b      	cbz	r3, 8008592 <__mdiff+0x112>
 800856e:	6117      	str	r7, [r2, #16]
 8008570:	e7a0      	b.n	80084b4 <__mdiff+0x34>
 8008572:	f854 8b04 	ldr.w	r8, [r4], #4
 8008576:	fa1f f188 	uxth.w	r1, r8
 800857a:	4461      	add	r1, ip
 800857c:	1408      	asrs	r0, r1, #16
 800857e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008582:	b289      	uxth	r1, r1
 8008584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800858c:	f846 1b04 	str.w	r1, [r6], #4
 8008590:	e7de      	b.n	8008550 <__mdiff+0xd0>
 8008592:	3f01      	subs	r7, #1
 8008594:	e7e8      	b.n	8008568 <__mdiff+0xe8>
 8008596:	bf00      	nop
 8008598:	08009d24 	.word	0x08009d24
 800859c:	08009db4 	.word	0x08009db4

080085a0 <__ulp>:
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <__ulp+0x48>)
 80085a2:	400b      	ands	r3, r1
 80085a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dd02      	ble.n	80085b2 <__ulp+0x12>
 80085ac:	2000      	movs	r0, #0
 80085ae:	4619      	mov	r1, r3
 80085b0:	4770      	bx	lr
 80085b2:	425b      	negs	r3, r3
 80085b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085b8:	f04f 0000 	mov.w	r0, #0
 80085bc:	f04f 0100 	mov.w	r1, #0
 80085c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085c4:	da04      	bge.n	80085d0 <__ulp+0x30>
 80085c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80085ca:	fa43 f102 	asr.w	r1, r3, r2
 80085ce:	4770      	bx	lr
 80085d0:	f1a2 0314 	sub.w	r3, r2, #20
 80085d4:	2b1e      	cmp	r3, #30
 80085d6:	bfd6      	itet	le
 80085d8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80085dc:	2301      	movgt	r3, #1
 80085de:	fa22 f303 	lsrle.w	r3, r2, r3
 80085e2:	4618      	mov	r0, r3
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	7ff00000 	.word	0x7ff00000

080085ec <__b2d>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	6907      	ldr	r7, [r0, #16]
 80085f2:	f100 0914 	add.w	r9, r0, #20
 80085f6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80085fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80085fe:	f1a7 0804 	sub.w	r8, r7, #4
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff fd52 	bl	80080ac <__hi0bits>
 8008608:	f1c0 0320 	rsb	r3, r0, #32
 800860c:	280a      	cmp	r0, #10
 800860e:	600b      	str	r3, [r1, #0]
 8008610:	491f      	ldr	r1, [pc, #124]	; (8008690 <__b2d+0xa4>)
 8008612:	dc17      	bgt.n	8008644 <__b2d+0x58>
 8008614:	45c1      	cmp	r9, r8
 8008616:	bf28      	it	cs
 8008618:	2200      	movcs	r2, #0
 800861a:	f1c0 0c0b 	rsb	ip, r0, #11
 800861e:	fa26 f30c 	lsr.w	r3, r6, ip
 8008622:	bf38      	it	cc
 8008624:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008628:	ea43 0501 	orr.w	r5, r3, r1
 800862c:	f100 0315 	add.w	r3, r0, #21
 8008630:	fa06 f303 	lsl.w	r3, r6, r3
 8008634:	fa22 f20c 	lsr.w	r2, r2, ip
 8008638:	ea43 0402 	orr.w	r4, r3, r2
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008644:	45c1      	cmp	r9, r8
 8008646:	bf2e      	itee	cs
 8008648:	2200      	movcs	r2, #0
 800864a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800864e:	f1a7 0808 	subcc.w	r8, r7, #8
 8008652:	f1b0 030b 	subs.w	r3, r0, #11
 8008656:	d016      	beq.n	8008686 <__b2d+0x9a>
 8008658:	f1c3 0720 	rsb	r7, r3, #32
 800865c:	fa22 f107 	lsr.w	r1, r2, r7
 8008660:	45c8      	cmp	r8, r9
 8008662:	fa06 f603 	lsl.w	r6, r6, r3
 8008666:	ea46 0601 	orr.w	r6, r6, r1
 800866a:	bf94      	ite	ls
 800866c:	2100      	movls	r1, #0
 800866e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008672:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008676:	fa02 f003 	lsl.w	r0, r2, r3
 800867a:	40f9      	lsrs	r1, r7
 800867c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008680:	ea40 0401 	orr.w	r4, r0, r1
 8008684:	e7da      	b.n	800863c <__b2d+0x50>
 8008686:	4614      	mov	r4, r2
 8008688:	ea46 0501 	orr.w	r5, r6, r1
 800868c:	e7d6      	b.n	800863c <__b2d+0x50>
 800868e:	bf00      	nop
 8008690:	3ff00000 	.word	0x3ff00000

08008694 <__d2b>:
 8008694:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008698:	2101      	movs	r1, #1
 800869a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800869e:	4690      	mov	r8, r2
 80086a0:	461d      	mov	r5, r3
 80086a2:	f7ff fc0d 	bl	8007ec0 <_Balloc>
 80086a6:	4604      	mov	r4, r0
 80086a8:	b930      	cbnz	r0, 80086b8 <__d2b+0x24>
 80086aa:	4602      	mov	r2, r0
 80086ac:	f240 310a 	movw	r1, #778	; 0x30a
 80086b0:	4b24      	ldr	r3, [pc, #144]	; (8008744 <__d2b+0xb0>)
 80086b2:	4825      	ldr	r0, [pc, #148]	; (8008748 <__d2b+0xb4>)
 80086b4:	f000 fb02 	bl	8008cbc <__assert_func>
 80086b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80086bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80086c0:	bb2d      	cbnz	r5, 800870e <__d2b+0x7a>
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	f1b8 0300 	subs.w	r3, r8, #0
 80086c8:	d026      	beq.n	8008718 <__d2b+0x84>
 80086ca:	4668      	mov	r0, sp
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	f7ff fd0d 	bl	80080ec <__lo0bits>
 80086d2:	9900      	ldr	r1, [sp, #0]
 80086d4:	b1f0      	cbz	r0, 8008714 <__d2b+0x80>
 80086d6:	9a01      	ldr	r2, [sp, #4]
 80086d8:	f1c0 0320 	rsb	r3, r0, #32
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	430b      	orrs	r3, r1
 80086e2:	40c2      	lsrs	r2, r0
 80086e4:	6163      	str	r3, [r4, #20]
 80086e6:	9201      	str	r2, [sp, #4]
 80086e8:	9b01      	ldr	r3, [sp, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bf14      	ite	ne
 80086ee:	2102      	movne	r1, #2
 80086f0:	2101      	moveq	r1, #1
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	6121      	str	r1, [r4, #16]
 80086f6:	b1c5      	cbz	r5, 800872a <__d2b+0x96>
 80086f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086fc:	4405      	add	r5, r0
 80086fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008702:	603d      	str	r5, [r7, #0]
 8008704:	6030      	str	r0, [r6, #0]
 8008706:	4620      	mov	r0, r4
 8008708:	b002      	add	sp, #8
 800870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008712:	e7d6      	b.n	80086c2 <__d2b+0x2e>
 8008714:	6161      	str	r1, [r4, #20]
 8008716:	e7e7      	b.n	80086e8 <__d2b+0x54>
 8008718:	a801      	add	r0, sp, #4
 800871a:	f7ff fce7 	bl	80080ec <__lo0bits>
 800871e:	2101      	movs	r1, #1
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	6121      	str	r1, [r4, #16]
 8008724:	6163      	str	r3, [r4, #20]
 8008726:	3020      	adds	r0, #32
 8008728:	e7e5      	b.n	80086f6 <__d2b+0x62>
 800872a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800872e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008732:	6038      	str	r0, [r7, #0]
 8008734:	6918      	ldr	r0, [r3, #16]
 8008736:	f7ff fcb9 	bl	80080ac <__hi0bits>
 800873a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800873e:	6031      	str	r1, [r6, #0]
 8008740:	e7e1      	b.n	8008706 <__d2b+0x72>
 8008742:	bf00      	nop
 8008744:	08009d24 	.word	0x08009d24
 8008748:	08009db4 	.word	0x08009db4

0800874c <__ratio>:
 800874c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	4688      	mov	r8, r1
 8008752:	4669      	mov	r1, sp
 8008754:	4681      	mov	r9, r0
 8008756:	f7ff ff49 	bl	80085ec <__b2d>
 800875a:	460f      	mov	r7, r1
 800875c:	4604      	mov	r4, r0
 800875e:	460d      	mov	r5, r1
 8008760:	4640      	mov	r0, r8
 8008762:	a901      	add	r1, sp, #4
 8008764:	f7ff ff42 	bl	80085ec <__b2d>
 8008768:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800876c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008770:	468b      	mov	fp, r1
 8008772:	eba3 0c02 	sub.w	ip, r3, r2
 8008776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfd5      	itete	le
 8008784:	460a      	movle	r2, r1
 8008786:	462a      	movgt	r2, r5
 8008788:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800878c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008790:	bfd8      	it	le
 8008792:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008796:	465b      	mov	r3, fp
 8008798:	4602      	mov	r2, r0
 800879a:	4639      	mov	r1, r7
 800879c:	4620      	mov	r0, r4
 800879e:	f7f7 ffc5 	bl	800072c <__aeabi_ddiv>
 80087a2:	b003      	add	sp, #12
 80087a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087a8 <__copybits>:
 80087a8:	3901      	subs	r1, #1
 80087aa:	b570      	push	{r4, r5, r6, lr}
 80087ac:	1149      	asrs	r1, r1, #5
 80087ae:	6914      	ldr	r4, [r2, #16]
 80087b0:	3101      	adds	r1, #1
 80087b2:	f102 0314 	add.w	r3, r2, #20
 80087b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087be:	1f05      	subs	r5, r0, #4
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d30c      	bcc.n	80087de <__copybits+0x36>
 80087c4:	1aa3      	subs	r3, r4, r2
 80087c6:	3b11      	subs	r3, #17
 80087c8:	f023 0303 	bic.w	r3, r3, #3
 80087cc:	3211      	adds	r2, #17
 80087ce:	42a2      	cmp	r2, r4
 80087d0:	bf88      	it	hi
 80087d2:	2300      	movhi	r3, #0
 80087d4:	4418      	add	r0, r3
 80087d6:	2300      	movs	r3, #0
 80087d8:	4288      	cmp	r0, r1
 80087da:	d305      	bcc.n	80087e8 <__copybits+0x40>
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	f853 6b04 	ldr.w	r6, [r3], #4
 80087e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80087e6:	e7eb      	b.n	80087c0 <__copybits+0x18>
 80087e8:	f840 3b04 	str.w	r3, [r0], #4
 80087ec:	e7f4      	b.n	80087d8 <__copybits+0x30>

080087ee <__any_on>:
 80087ee:	f100 0214 	add.w	r2, r0, #20
 80087f2:	6900      	ldr	r0, [r0, #16]
 80087f4:	114b      	asrs	r3, r1, #5
 80087f6:	4298      	cmp	r0, r3
 80087f8:	b510      	push	{r4, lr}
 80087fa:	db11      	blt.n	8008820 <__any_on+0x32>
 80087fc:	dd0a      	ble.n	8008814 <__any_on+0x26>
 80087fe:	f011 011f 	ands.w	r1, r1, #31
 8008802:	d007      	beq.n	8008814 <__any_on+0x26>
 8008804:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008808:	fa24 f001 	lsr.w	r0, r4, r1
 800880c:	fa00 f101 	lsl.w	r1, r0, r1
 8008810:	428c      	cmp	r4, r1
 8008812:	d10b      	bne.n	800882c <__any_on+0x3e>
 8008814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008818:	4293      	cmp	r3, r2
 800881a:	d803      	bhi.n	8008824 <__any_on+0x36>
 800881c:	2000      	movs	r0, #0
 800881e:	bd10      	pop	{r4, pc}
 8008820:	4603      	mov	r3, r0
 8008822:	e7f7      	b.n	8008814 <__any_on+0x26>
 8008824:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008828:	2900      	cmp	r1, #0
 800882a:	d0f5      	beq.n	8008818 <__any_on+0x2a>
 800882c:	2001      	movs	r0, #1
 800882e:	e7f6      	b.n	800881e <__any_on+0x30>

08008830 <_calloc_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	fb02 f501 	mul.w	r5, r2, r1
 8008836:	4629      	mov	r1, r5
 8008838:	f000 f854 	bl	80088e4 <_malloc_r>
 800883c:	4604      	mov	r4, r0
 800883e:	b118      	cbz	r0, 8008848 <_calloc_r+0x18>
 8008840:	462a      	mov	r2, r5
 8008842:	2100      	movs	r1, #0
 8008844:	f7fc fbea 	bl	800501c <memset>
 8008848:	4620      	mov	r0, r4
 800884a:	bd38      	pop	{r3, r4, r5, pc}

0800884c <_free_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4605      	mov	r5, r0
 8008850:	2900      	cmp	r1, #0
 8008852:	d043      	beq.n	80088dc <_free_r+0x90>
 8008854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008858:	1f0c      	subs	r4, r1, #4
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfb8      	it	lt
 800885e:	18e4      	addlt	r4, r4, r3
 8008860:	f000 fa76 	bl	8008d50 <__malloc_lock>
 8008864:	4a1e      	ldr	r2, [pc, #120]	; (80088e0 <_free_r+0x94>)
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	4610      	mov	r0, r2
 800886a:	b933      	cbnz	r3, 800887a <_free_r+0x2e>
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	6014      	str	r4, [r2, #0]
 8008870:	4628      	mov	r0, r5
 8008872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008876:	f000 ba71 	b.w	8008d5c <__malloc_unlock>
 800887a:	42a3      	cmp	r3, r4
 800887c:	d90a      	bls.n	8008894 <_free_r+0x48>
 800887e:	6821      	ldr	r1, [r4, #0]
 8008880:	1862      	adds	r2, r4, r1
 8008882:	4293      	cmp	r3, r2
 8008884:	bf01      	itttt	eq
 8008886:	681a      	ldreq	r2, [r3, #0]
 8008888:	685b      	ldreq	r3, [r3, #4]
 800888a:	1852      	addeq	r2, r2, r1
 800888c:	6022      	streq	r2, [r4, #0]
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	6004      	str	r4, [r0, #0]
 8008892:	e7ed      	b.n	8008870 <_free_r+0x24>
 8008894:	461a      	mov	r2, r3
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	b10b      	cbz	r3, 800889e <_free_r+0x52>
 800889a:	42a3      	cmp	r3, r4
 800889c:	d9fa      	bls.n	8008894 <_free_r+0x48>
 800889e:	6811      	ldr	r1, [r2, #0]
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	42a0      	cmp	r0, r4
 80088a4:	d10b      	bne.n	80088be <_free_r+0x72>
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	4401      	add	r1, r0
 80088aa:	1850      	adds	r0, r2, r1
 80088ac:	4283      	cmp	r3, r0
 80088ae:	6011      	str	r1, [r2, #0]
 80088b0:	d1de      	bne.n	8008870 <_free_r+0x24>
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	4401      	add	r1, r0
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	6053      	str	r3, [r2, #4]
 80088bc:	e7d8      	b.n	8008870 <_free_r+0x24>
 80088be:	d902      	bls.n	80088c6 <_free_r+0x7a>
 80088c0:	230c      	movs	r3, #12
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	e7d4      	b.n	8008870 <_free_r+0x24>
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	1821      	adds	r1, r4, r0
 80088ca:	428b      	cmp	r3, r1
 80088cc:	bf01      	itttt	eq
 80088ce:	6819      	ldreq	r1, [r3, #0]
 80088d0:	685b      	ldreq	r3, [r3, #4]
 80088d2:	1809      	addeq	r1, r1, r0
 80088d4:	6021      	streq	r1, [r4, #0]
 80088d6:	6063      	str	r3, [r4, #4]
 80088d8:	6054      	str	r4, [r2, #4]
 80088da:	e7c9      	b.n	8008870 <_free_r+0x24>
 80088dc:	bd38      	pop	{r3, r4, r5, pc}
 80088de:	bf00      	nop
 80088e0:	2000068c 	.word	0x2000068c

080088e4 <_malloc_r>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	1ccd      	adds	r5, r1, #3
 80088e8:	f025 0503 	bic.w	r5, r5, #3
 80088ec:	3508      	adds	r5, #8
 80088ee:	2d0c      	cmp	r5, #12
 80088f0:	bf38      	it	cc
 80088f2:	250c      	movcc	r5, #12
 80088f4:	2d00      	cmp	r5, #0
 80088f6:	4606      	mov	r6, r0
 80088f8:	db01      	blt.n	80088fe <_malloc_r+0x1a>
 80088fa:	42a9      	cmp	r1, r5
 80088fc:	d903      	bls.n	8008906 <_malloc_r+0x22>
 80088fe:	230c      	movs	r3, #12
 8008900:	6033      	str	r3, [r6, #0]
 8008902:	2000      	movs	r0, #0
 8008904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008906:	f000 fa23 	bl	8008d50 <__malloc_lock>
 800890a:	4921      	ldr	r1, [pc, #132]	; (8008990 <_malloc_r+0xac>)
 800890c:	680a      	ldr	r2, [r1, #0]
 800890e:	4614      	mov	r4, r2
 8008910:	b99c      	cbnz	r4, 800893a <_malloc_r+0x56>
 8008912:	4f20      	ldr	r7, [pc, #128]	; (8008994 <_malloc_r+0xb0>)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	b923      	cbnz	r3, 8008922 <_malloc_r+0x3e>
 8008918:	4621      	mov	r1, r4
 800891a:	4630      	mov	r0, r6
 800891c:	f000 f99e 	bl	8008c5c <_sbrk_r>
 8008920:	6038      	str	r0, [r7, #0]
 8008922:	4629      	mov	r1, r5
 8008924:	4630      	mov	r0, r6
 8008926:	f000 f999 	bl	8008c5c <_sbrk_r>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d123      	bne.n	8008976 <_malloc_r+0x92>
 800892e:	230c      	movs	r3, #12
 8008930:	4630      	mov	r0, r6
 8008932:	6033      	str	r3, [r6, #0]
 8008934:	f000 fa12 	bl	8008d5c <__malloc_unlock>
 8008938:	e7e3      	b.n	8008902 <_malloc_r+0x1e>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	1b5b      	subs	r3, r3, r5
 800893e:	d417      	bmi.n	8008970 <_malloc_r+0x8c>
 8008940:	2b0b      	cmp	r3, #11
 8008942:	d903      	bls.n	800894c <_malloc_r+0x68>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	441c      	add	r4, r3
 8008948:	6025      	str	r5, [r4, #0]
 800894a:	e004      	b.n	8008956 <_malloc_r+0x72>
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	42a2      	cmp	r2, r4
 8008950:	bf0c      	ite	eq
 8008952:	600b      	streq	r3, [r1, #0]
 8008954:	6053      	strne	r3, [r2, #4]
 8008956:	4630      	mov	r0, r6
 8008958:	f000 fa00 	bl	8008d5c <__malloc_unlock>
 800895c:	f104 000b 	add.w	r0, r4, #11
 8008960:	1d23      	adds	r3, r4, #4
 8008962:	f020 0007 	bic.w	r0, r0, #7
 8008966:	1ac2      	subs	r2, r0, r3
 8008968:	d0cc      	beq.n	8008904 <_malloc_r+0x20>
 800896a:	1a1b      	subs	r3, r3, r0
 800896c:	50a3      	str	r3, [r4, r2]
 800896e:	e7c9      	b.n	8008904 <_malloc_r+0x20>
 8008970:	4622      	mov	r2, r4
 8008972:	6864      	ldr	r4, [r4, #4]
 8008974:	e7cc      	b.n	8008910 <_malloc_r+0x2c>
 8008976:	1cc4      	adds	r4, r0, #3
 8008978:	f024 0403 	bic.w	r4, r4, #3
 800897c:	42a0      	cmp	r0, r4
 800897e:	d0e3      	beq.n	8008948 <_malloc_r+0x64>
 8008980:	1a21      	subs	r1, r4, r0
 8008982:	4630      	mov	r0, r6
 8008984:	f000 f96a 	bl	8008c5c <_sbrk_r>
 8008988:	3001      	adds	r0, #1
 800898a:	d1dd      	bne.n	8008948 <_malloc_r+0x64>
 800898c:	e7cf      	b.n	800892e <_malloc_r+0x4a>
 800898e:	bf00      	nop
 8008990:	2000068c 	.word	0x2000068c
 8008994:	20000690 	.word	0x20000690

08008998 <__ssputs_r>:
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	688e      	ldr	r6, [r1, #8]
 800899e:	4682      	mov	sl, r0
 80089a0:	429e      	cmp	r6, r3
 80089a2:	460c      	mov	r4, r1
 80089a4:	4690      	mov	r8, r2
 80089a6:	461f      	mov	r7, r3
 80089a8:	d838      	bhi.n	8008a1c <__ssputs_r+0x84>
 80089aa:	898a      	ldrh	r2, [r1, #12]
 80089ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089b0:	d032      	beq.n	8008a18 <__ssputs_r+0x80>
 80089b2:	6825      	ldr	r5, [r4, #0]
 80089b4:	6909      	ldr	r1, [r1, #16]
 80089b6:	3301      	adds	r3, #1
 80089b8:	eba5 0901 	sub.w	r9, r5, r1
 80089bc:	6965      	ldr	r5, [r4, #20]
 80089be:	444b      	add	r3, r9
 80089c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089c8:	106d      	asrs	r5, r5, #1
 80089ca:	429d      	cmp	r5, r3
 80089cc:	bf38      	it	cc
 80089ce:	461d      	movcc	r5, r3
 80089d0:	0553      	lsls	r3, r2, #21
 80089d2:	d531      	bpl.n	8008a38 <__ssputs_r+0xa0>
 80089d4:	4629      	mov	r1, r5
 80089d6:	f7ff ff85 	bl	80088e4 <_malloc_r>
 80089da:	4606      	mov	r6, r0
 80089dc:	b950      	cbnz	r0, 80089f4 <__ssputs_r+0x5c>
 80089de:	230c      	movs	r3, #12
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	f8ca 3000 	str.w	r3, [sl]
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f4:	464a      	mov	r2, r9
 80089f6:	6921      	ldr	r1, [r4, #16]
 80089f8:	f7fc fb02 	bl	8005000 <memcpy>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a06:	81a3      	strh	r3, [r4, #12]
 8008a08:	6126      	str	r6, [r4, #16]
 8008a0a:	444e      	add	r6, r9
 8008a0c:	6026      	str	r6, [r4, #0]
 8008a0e:	463e      	mov	r6, r7
 8008a10:	6165      	str	r5, [r4, #20]
 8008a12:	eba5 0509 	sub.w	r5, r5, r9
 8008a16:	60a5      	str	r5, [r4, #8]
 8008a18:	42be      	cmp	r6, r7
 8008a1a:	d900      	bls.n	8008a1e <__ssputs_r+0x86>
 8008a1c:	463e      	mov	r6, r7
 8008a1e:	4632      	mov	r2, r6
 8008a20:	4641      	mov	r1, r8
 8008a22:	6820      	ldr	r0, [r4, #0]
 8008a24:	f000 f97a 	bl	8008d1c <memmove>
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	1b9b      	subs	r3, r3, r6
 8008a2e:	4432      	add	r2, r6
 8008a30:	2000      	movs	r0, #0
 8008a32:	60a3      	str	r3, [r4, #8]
 8008a34:	6022      	str	r2, [r4, #0]
 8008a36:	e7db      	b.n	80089f0 <__ssputs_r+0x58>
 8008a38:	462a      	mov	r2, r5
 8008a3a:	f000 f995 	bl	8008d68 <_realloc_r>
 8008a3e:	4606      	mov	r6, r0
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1e1      	bne.n	8008a08 <__ssputs_r+0x70>
 8008a44:	4650      	mov	r0, sl
 8008a46:	6921      	ldr	r1, [r4, #16]
 8008a48:	f7ff ff00 	bl	800884c <_free_r>
 8008a4c:	e7c7      	b.n	80089de <__ssputs_r+0x46>
	...

08008a50 <_svfiprintf_r>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	4698      	mov	r8, r3
 8008a56:	898b      	ldrh	r3, [r1, #12]
 8008a58:	4607      	mov	r7, r0
 8008a5a:	061b      	lsls	r3, r3, #24
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	4614      	mov	r4, r2
 8008a60:	b09d      	sub	sp, #116	; 0x74
 8008a62:	d50e      	bpl.n	8008a82 <_svfiprintf_r+0x32>
 8008a64:	690b      	ldr	r3, [r1, #16]
 8008a66:	b963      	cbnz	r3, 8008a82 <_svfiprintf_r+0x32>
 8008a68:	2140      	movs	r1, #64	; 0x40
 8008a6a:	f7ff ff3b 	bl	80088e4 <_malloc_r>
 8008a6e:	6028      	str	r0, [r5, #0]
 8008a70:	6128      	str	r0, [r5, #16]
 8008a72:	b920      	cbnz	r0, 8008a7e <_svfiprintf_r+0x2e>
 8008a74:	230c      	movs	r3, #12
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	e0d1      	b.n	8008c22 <_svfiprintf_r+0x1d2>
 8008a7e:	2340      	movs	r3, #64	; 0x40
 8008a80:	616b      	str	r3, [r5, #20]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9309      	str	r3, [sp, #36]	; 0x24
 8008a86:	2320      	movs	r3, #32
 8008a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a8c:	2330      	movs	r3, #48	; 0x30
 8008a8e:	f04f 0901 	mov.w	r9, #1
 8008a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c3c <_svfiprintf_r+0x1ec>
 8008a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a9e:	4623      	mov	r3, r4
 8008aa0:	469a      	mov	sl, r3
 8008aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa6:	b10a      	cbz	r2, 8008aac <_svfiprintf_r+0x5c>
 8008aa8:	2a25      	cmp	r2, #37	; 0x25
 8008aaa:	d1f9      	bne.n	8008aa0 <_svfiprintf_r+0x50>
 8008aac:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab0:	d00b      	beq.n	8008aca <_svfiprintf_r+0x7a>
 8008ab2:	465b      	mov	r3, fp
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f7ff ff6d 	bl	8008998 <__ssputs_r>
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f000 80aa 	beq.w	8008c18 <_svfiprintf_r+0x1c8>
 8008ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ac6:	445a      	add	r2, fp
 8008ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8008aca:	f89a 3000 	ldrb.w	r3, [sl]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 80a2 	beq.w	8008c18 <_svfiprintf_r+0x1c8>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ade:	f10a 0a01 	add.w	sl, sl, #1
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	9307      	str	r3, [sp, #28]
 8008ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aea:	931a      	str	r3, [sp, #104]	; 0x68
 8008aec:	4654      	mov	r4, sl
 8008aee:	2205      	movs	r2, #5
 8008af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af4:	4851      	ldr	r0, [pc, #324]	; (8008c3c <_svfiprintf_r+0x1ec>)
 8008af6:	f7ff f9d5 	bl	8007ea4 <memchr>
 8008afa:	9a04      	ldr	r2, [sp, #16]
 8008afc:	b9d8      	cbnz	r0, 8008b36 <_svfiprintf_r+0xe6>
 8008afe:	06d0      	lsls	r0, r2, #27
 8008b00:	bf44      	itt	mi
 8008b02:	2320      	movmi	r3, #32
 8008b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b08:	0711      	lsls	r1, r2, #28
 8008b0a:	bf44      	itt	mi
 8008b0c:	232b      	movmi	r3, #43	; 0x2b
 8008b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b12:	f89a 3000 	ldrb.w	r3, [sl]
 8008b16:	2b2a      	cmp	r3, #42	; 0x2a
 8008b18:	d015      	beq.n	8008b46 <_svfiprintf_r+0xf6>
 8008b1a:	4654      	mov	r4, sl
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f04f 0c0a 	mov.w	ip, #10
 8008b22:	9a07      	ldr	r2, [sp, #28]
 8008b24:	4621      	mov	r1, r4
 8008b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b2a:	3b30      	subs	r3, #48	; 0x30
 8008b2c:	2b09      	cmp	r3, #9
 8008b2e:	d94e      	bls.n	8008bce <_svfiprintf_r+0x17e>
 8008b30:	b1b0      	cbz	r0, 8008b60 <_svfiprintf_r+0x110>
 8008b32:	9207      	str	r2, [sp, #28]
 8008b34:	e014      	b.n	8008b60 <_svfiprintf_r+0x110>
 8008b36:	eba0 0308 	sub.w	r3, r0, r8
 8008b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	46a2      	mov	sl, r4
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	e7d2      	b.n	8008aec <_svfiprintf_r+0x9c>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	1d19      	adds	r1, r3, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	9103      	str	r1, [sp, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bfbb      	ittet	lt
 8008b52:	425b      	neglt	r3, r3
 8008b54:	f042 0202 	orrlt.w	r2, r2, #2
 8008b58:	9307      	strge	r3, [sp, #28]
 8008b5a:	9307      	strlt	r3, [sp, #28]
 8008b5c:	bfb8      	it	lt
 8008b5e:	9204      	strlt	r2, [sp, #16]
 8008b60:	7823      	ldrb	r3, [r4, #0]
 8008b62:	2b2e      	cmp	r3, #46	; 0x2e
 8008b64:	d10c      	bne.n	8008b80 <_svfiprintf_r+0x130>
 8008b66:	7863      	ldrb	r3, [r4, #1]
 8008b68:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6a:	d135      	bne.n	8008bd8 <_svfiprintf_r+0x188>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	3402      	adds	r4, #2
 8008b70:	1d1a      	adds	r2, r3, #4
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	9203      	str	r2, [sp, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b7e:	9305      	str	r3, [sp, #20]
 8008b80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c4c <_svfiprintf_r+0x1fc>
 8008b84:	2203      	movs	r2, #3
 8008b86:	4650      	mov	r0, sl
 8008b88:	7821      	ldrb	r1, [r4, #0]
 8008b8a:	f7ff f98b 	bl	8007ea4 <memchr>
 8008b8e:	b140      	cbz	r0, 8008ba2 <_svfiprintf_r+0x152>
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	eba0 000a 	sub.w	r0, r0, sl
 8008b96:	fa03 f000 	lsl.w	r0, r3, r0
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	3401      	adds	r4, #1
 8008b9e:	4303      	orrs	r3, r0
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba6:	2206      	movs	r2, #6
 8008ba8:	4825      	ldr	r0, [pc, #148]	; (8008c40 <_svfiprintf_r+0x1f0>)
 8008baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bae:	f7ff f979 	bl	8007ea4 <memchr>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d038      	beq.n	8008c28 <_svfiprintf_r+0x1d8>
 8008bb6:	4b23      	ldr	r3, [pc, #140]	; (8008c44 <_svfiprintf_r+0x1f4>)
 8008bb8:	bb1b      	cbnz	r3, 8008c02 <_svfiprintf_r+0x1b2>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	3307      	adds	r3, #7
 8008bbe:	f023 0307 	bic.w	r3, r3, #7
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	4433      	add	r3, r6
 8008bca:	9309      	str	r3, [sp, #36]	; 0x24
 8008bcc:	e767      	b.n	8008a9e <_svfiprintf_r+0x4e>
 8008bce:	460c      	mov	r4, r1
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd6:	e7a5      	b.n	8008b24 <_svfiprintf_r+0xd4>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f04f 0c0a 	mov.w	ip, #10
 8008bde:	4619      	mov	r1, r3
 8008be0:	3401      	adds	r4, #1
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	4620      	mov	r0, r4
 8008be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bea:	3a30      	subs	r2, #48	; 0x30
 8008bec:	2a09      	cmp	r2, #9
 8008bee:	d903      	bls.n	8008bf8 <_svfiprintf_r+0x1a8>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0c5      	beq.n	8008b80 <_svfiprintf_r+0x130>
 8008bf4:	9105      	str	r1, [sp, #20]
 8008bf6:	e7c3      	b.n	8008b80 <_svfiprintf_r+0x130>
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c00:	e7f0      	b.n	8008be4 <_svfiprintf_r+0x194>
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4638      	mov	r0, r7
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <_svfiprintf_r+0x1f8>)
 8008c0c:	a904      	add	r1, sp, #16
 8008c0e:	f7fc faab 	bl	8005168 <_printf_float>
 8008c12:	1c42      	adds	r2, r0, #1
 8008c14:	4606      	mov	r6, r0
 8008c16:	d1d6      	bne.n	8008bc6 <_svfiprintf_r+0x176>
 8008c18:	89ab      	ldrh	r3, [r5, #12]
 8008c1a:	065b      	lsls	r3, r3, #25
 8008c1c:	f53f af2c 	bmi.w	8008a78 <_svfiprintf_r+0x28>
 8008c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c22:	b01d      	add	sp, #116	; 0x74
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	ab03      	add	r3, sp, #12
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	4638      	mov	r0, r7
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <_svfiprintf_r+0x1f8>)
 8008c32:	a904      	add	r1, sp, #16
 8008c34:	f7fc fd34 	bl	80056a0 <_printf_i>
 8008c38:	e7eb      	b.n	8008c12 <_svfiprintf_r+0x1c2>
 8008c3a:	bf00      	nop
 8008c3c:	08009f14 	.word	0x08009f14
 8008c40:	08009f1e 	.word	0x08009f1e
 8008c44:	08005169 	.word	0x08005169
 8008c48:	08008999 	.word	0x08008999
 8008c4c:	08009f1a 	.word	0x08009f1a

08008c50 <nan>:
 8008c50:	2000      	movs	r0, #0
 8008c52:	4901      	ldr	r1, [pc, #4]	; (8008c58 <nan+0x8>)
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	7ff80000 	.word	0x7ff80000

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4d05      	ldr	r5, [pc, #20]	; (8008c78 <_sbrk_r+0x1c>)
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7f8 ff8e 	bl	8001b88 <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	200007d8 	.word	0x200007d8

08008c7c <strncmp>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	b16a      	cbz	r2, 8008c9c <strncmp+0x20>
 8008c80:	3901      	subs	r1, #1
 8008c82:	1884      	adds	r4, r0, r2
 8008c84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d103      	bne.n	8008c98 <strncmp+0x1c>
 8008c90:	42a0      	cmp	r0, r4
 8008c92:	d001      	beq.n	8008c98 <strncmp+0x1c>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1f5      	bne.n	8008c84 <strncmp+0x8>
 8008c98:	1a98      	subs	r0, r3, r2
 8008c9a:	bd10      	pop	{r4, pc}
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	e7fc      	b.n	8008c9a <strncmp+0x1e>

08008ca0 <__ascii_wctomb>:
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	b141      	cbz	r1, 8008cb8 <__ascii_wctomb+0x18>
 8008ca6:	2aff      	cmp	r2, #255	; 0xff
 8008ca8:	d904      	bls.n	8008cb4 <__ascii_wctomb+0x14>
 8008caa:	228a      	movs	r2, #138	; 0x8a
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	4770      	bx	lr
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	700a      	strb	r2, [r1, #0]
 8008cb8:	4770      	bx	lr
	...

08008cbc <__assert_func>:
 8008cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <__assert_func+0x2c>)
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68d8      	ldr	r0, [r3, #12]
 8008cca:	b14c      	cbz	r4, 8008ce0 <__assert_func+0x24>
 8008ccc:	4b07      	ldr	r3, [pc, #28]	; (8008cec <__assert_func+0x30>)
 8008cce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cd2:	9100      	str	r1, [sp, #0]
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	4906      	ldr	r1, [pc, #24]	; (8008cf0 <__assert_func+0x34>)
 8008cd8:	f000 f80e 	bl	8008cf8 <fiprintf>
 8008cdc:	f000 fa82 	bl	80091e4 <abort>
 8008ce0:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <__assert_func+0x38>)
 8008ce2:	461c      	mov	r4, r3
 8008ce4:	e7f3      	b.n	8008cce <__assert_func+0x12>
 8008ce6:	bf00      	nop
 8008ce8:	20000020 	.word	0x20000020
 8008cec:	08009f25 	.word	0x08009f25
 8008cf0:	08009f32 	.word	0x08009f32
 8008cf4:	08009f60 	.word	0x08009f60

08008cf8 <fiprintf>:
 8008cf8:	b40e      	push	{r1, r2, r3}
 8008cfa:	b503      	push	{r0, r1, lr}
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	ab03      	add	r3, sp, #12
 8008d00:	4805      	ldr	r0, [pc, #20]	; (8008d18 <fiprintf+0x20>)
 8008d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d06:	6800      	ldr	r0, [r0, #0]
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	f000 f87b 	bl	8008e04 <_vfiprintf_r>
 8008d0e:	b002      	add	sp, #8
 8008d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d14:	b003      	add	sp, #12
 8008d16:	4770      	bx	lr
 8008d18:	20000020 	.word	0x20000020

08008d1c <memmove>:
 8008d1c:	4288      	cmp	r0, r1
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	eb01 0402 	add.w	r4, r1, r2
 8008d24:	d902      	bls.n	8008d2c <memmove+0x10>
 8008d26:	4284      	cmp	r4, r0
 8008d28:	4623      	mov	r3, r4
 8008d2a:	d807      	bhi.n	8008d3c <memmove+0x20>
 8008d2c:	1e43      	subs	r3, r0, #1
 8008d2e:	42a1      	cmp	r1, r4
 8008d30:	d008      	beq.n	8008d44 <memmove+0x28>
 8008d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d3a:	e7f8      	b.n	8008d2e <memmove+0x12>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4402      	add	r2, r0
 8008d40:	428a      	cmp	r2, r1
 8008d42:	d100      	bne.n	8008d46 <memmove+0x2a>
 8008d44:	bd10      	pop	{r4, pc}
 8008d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d4e:	e7f7      	b.n	8008d40 <memmove+0x24>

08008d50 <__malloc_lock>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__malloc_lock+0x8>)
 8008d52:	f000 bc07 	b.w	8009564 <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	200007e0 	.word	0x200007e0

08008d5c <__malloc_unlock>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <__malloc_unlock+0x8>)
 8008d5e:	f000 bc02 	b.w	8009566 <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	200007e0 	.word	0x200007e0

08008d68 <_realloc_r>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	460e      	mov	r6, r1
 8008d70:	b921      	cbnz	r1, 8008d7c <_realloc_r+0x14>
 8008d72:	4611      	mov	r1, r2
 8008d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d78:	f7ff bdb4 	b.w	80088e4 <_malloc_r>
 8008d7c:	b922      	cbnz	r2, 8008d88 <_realloc_r+0x20>
 8008d7e:	f7ff fd65 	bl	800884c <_free_r>
 8008d82:	4625      	mov	r5, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d88:	f000 fc52 	bl	8009630 <_malloc_usable_size_r>
 8008d8c:	42a0      	cmp	r0, r4
 8008d8e:	d20f      	bcs.n	8008db0 <_realloc_r+0x48>
 8008d90:	4621      	mov	r1, r4
 8008d92:	4638      	mov	r0, r7
 8008d94:	f7ff fda6 	bl	80088e4 <_malloc_r>
 8008d98:	4605      	mov	r5, r0
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d0f2      	beq.n	8008d84 <_realloc_r+0x1c>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4622      	mov	r2, r4
 8008da2:	f7fc f92d 	bl	8005000 <memcpy>
 8008da6:	4631      	mov	r1, r6
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7ff fd4f 	bl	800884c <_free_r>
 8008dae:	e7e9      	b.n	8008d84 <_realloc_r+0x1c>
 8008db0:	4635      	mov	r5, r6
 8008db2:	e7e7      	b.n	8008d84 <_realloc_r+0x1c>

08008db4 <__sfputc_r>:
 8008db4:	6893      	ldr	r3, [r2, #8]
 8008db6:	b410      	push	{r4}
 8008db8:	3b01      	subs	r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	6093      	str	r3, [r2, #8]
 8008dbe:	da07      	bge.n	8008dd0 <__sfputc_r+0x1c>
 8008dc0:	6994      	ldr	r4, [r2, #24]
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	db01      	blt.n	8008dca <__sfputc_r+0x16>
 8008dc6:	290a      	cmp	r1, #10
 8008dc8:	d102      	bne.n	8008dd0 <__sfputc_r+0x1c>
 8008dca:	bc10      	pop	{r4}
 8008dcc:	f000 b94a 	b.w	8009064 <__swbuf_r>
 8008dd0:	6813      	ldr	r3, [r2, #0]
 8008dd2:	1c58      	adds	r0, r3, #1
 8008dd4:	6010      	str	r0, [r2, #0]
 8008dd6:	7019      	strb	r1, [r3, #0]
 8008dd8:	4608      	mov	r0, r1
 8008dda:	bc10      	pop	{r4}
 8008ddc:	4770      	bx	lr

08008dde <__sfputs_r>:
 8008dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de0:	4606      	mov	r6, r0
 8008de2:	460f      	mov	r7, r1
 8008de4:	4614      	mov	r4, r2
 8008de6:	18d5      	adds	r5, r2, r3
 8008de8:	42ac      	cmp	r4, r5
 8008dea:	d101      	bne.n	8008df0 <__sfputs_r+0x12>
 8008dec:	2000      	movs	r0, #0
 8008dee:	e007      	b.n	8008e00 <__sfputs_r+0x22>
 8008df0:	463a      	mov	r2, r7
 8008df2:	4630      	mov	r0, r6
 8008df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df8:	f7ff ffdc 	bl	8008db4 <__sfputc_r>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d1f3      	bne.n	8008de8 <__sfputs_r+0xa>
 8008e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e04 <_vfiprintf_r>:
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	460d      	mov	r5, r1
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	4698      	mov	r8, r3
 8008e0e:	4606      	mov	r6, r0
 8008e10:	b09d      	sub	sp, #116	; 0x74
 8008e12:	b118      	cbz	r0, 8008e1c <_vfiprintf_r+0x18>
 8008e14:	6983      	ldr	r3, [r0, #24]
 8008e16:	b90b      	cbnz	r3, 8008e1c <_vfiprintf_r+0x18>
 8008e18:	f000 fb06 	bl	8009428 <__sinit>
 8008e1c:	4b89      	ldr	r3, [pc, #548]	; (8009044 <_vfiprintf_r+0x240>)
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	d11b      	bne.n	8008e5a <_vfiprintf_r+0x56>
 8008e22:	6875      	ldr	r5, [r6, #4]
 8008e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e26:	07d9      	lsls	r1, r3, #31
 8008e28:	d405      	bmi.n	8008e36 <_vfiprintf_r+0x32>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	059a      	lsls	r2, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_vfiprintf_r+0x32>
 8008e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e32:	f000 fb97 	bl	8009564 <__retarget_lock_acquire_recursive>
 8008e36:	89ab      	ldrh	r3, [r5, #12]
 8008e38:	071b      	lsls	r3, r3, #28
 8008e3a:	d501      	bpl.n	8008e40 <_vfiprintf_r+0x3c>
 8008e3c:	692b      	ldr	r3, [r5, #16]
 8008e3e:	b9eb      	cbnz	r3, 8008e7c <_vfiprintf_r+0x78>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 f960 	bl	8009108 <__swsetup_r>
 8008e48:	b1c0      	cbz	r0, 8008e7c <_vfiprintf_r+0x78>
 8008e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e4c:	07dc      	lsls	r4, r3, #31
 8008e4e:	d50e      	bpl.n	8008e6e <_vfiprintf_r+0x6a>
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	b01d      	add	sp, #116	; 0x74
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	4b7b      	ldr	r3, [pc, #492]	; (8009048 <_vfiprintf_r+0x244>)
 8008e5c:	429d      	cmp	r5, r3
 8008e5e:	d101      	bne.n	8008e64 <_vfiprintf_r+0x60>
 8008e60:	68b5      	ldr	r5, [r6, #8]
 8008e62:	e7df      	b.n	8008e24 <_vfiprintf_r+0x20>
 8008e64:	4b79      	ldr	r3, [pc, #484]	; (800904c <_vfiprintf_r+0x248>)
 8008e66:	429d      	cmp	r5, r3
 8008e68:	bf08      	it	eq
 8008e6a:	68f5      	ldreq	r5, [r6, #12]
 8008e6c:	e7da      	b.n	8008e24 <_vfiprintf_r+0x20>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	0598      	lsls	r0, r3, #22
 8008e72:	d4ed      	bmi.n	8008e50 <_vfiprintf_r+0x4c>
 8008e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e76:	f000 fb76 	bl	8009566 <__retarget_lock_release_recursive>
 8008e7a:	e7e9      	b.n	8008e50 <_vfiprintf_r+0x4c>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e80:	2320      	movs	r3, #32
 8008e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e86:	2330      	movs	r3, #48	; 0x30
 8008e88:	f04f 0901 	mov.w	r9, #1
 8008e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009050 <_vfiprintf_r+0x24c>
 8008e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e98:	4623      	mov	r3, r4
 8008e9a:	469a      	mov	sl, r3
 8008e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea0:	b10a      	cbz	r2, 8008ea6 <_vfiprintf_r+0xa2>
 8008ea2:	2a25      	cmp	r2, #37	; 0x25
 8008ea4:	d1f9      	bne.n	8008e9a <_vfiprintf_r+0x96>
 8008ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8008eaa:	d00b      	beq.n	8008ec4 <_vfiprintf_r+0xc0>
 8008eac:	465b      	mov	r3, fp
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff ff93 	bl	8008dde <__sfputs_r>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	f000 80aa 	beq.w	8009012 <_vfiprintf_r+0x20e>
 8008ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec0:	445a      	add	r2, fp
 8008ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80a2 	beq.w	8009012 <_vfiprintf_r+0x20e>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed8:	f10a 0a01 	add.w	sl, sl, #1
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	9307      	str	r3, [sp, #28]
 8008ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ee6:	4654      	mov	r4, sl
 8008ee8:	2205      	movs	r2, #5
 8008eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eee:	4858      	ldr	r0, [pc, #352]	; (8009050 <_vfiprintf_r+0x24c>)
 8008ef0:	f7fe ffd8 	bl	8007ea4 <memchr>
 8008ef4:	9a04      	ldr	r2, [sp, #16]
 8008ef6:	b9d8      	cbnz	r0, 8008f30 <_vfiprintf_r+0x12c>
 8008ef8:	06d1      	lsls	r1, r2, #27
 8008efa:	bf44      	itt	mi
 8008efc:	2320      	movmi	r3, #32
 8008efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f02:	0713      	lsls	r3, r2, #28
 8008f04:	bf44      	itt	mi
 8008f06:	232b      	movmi	r3, #43	; 0x2b
 8008f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f10:	2b2a      	cmp	r3, #42	; 0x2a
 8008f12:	d015      	beq.n	8008f40 <_vfiprintf_r+0x13c>
 8008f14:	4654      	mov	r4, sl
 8008f16:	2000      	movs	r0, #0
 8008f18:	f04f 0c0a 	mov.w	ip, #10
 8008f1c:	9a07      	ldr	r2, [sp, #28]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f24:	3b30      	subs	r3, #48	; 0x30
 8008f26:	2b09      	cmp	r3, #9
 8008f28:	d94e      	bls.n	8008fc8 <_vfiprintf_r+0x1c4>
 8008f2a:	b1b0      	cbz	r0, 8008f5a <_vfiprintf_r+0x156>
 8008f2c:	9207      	str	r2, [sp, #28]
 8008f2e:	e014      	b.n	8008f5a <_vfiprintf_r+0x156>
 8008f30:	eba0 0308 	sub.w	r3, r0, r8
 8008f34:	fa09 f303 	lsl.w	r3, r9, r3
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	46a2      	mov	sl, r4
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	e7d2      	b.n	8008ee6 <_vfiprintf_r+0xe2>
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	1d19      	adds	r1, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	9103      	str	r1, [sp, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bfbb      	ittet	lt
 8008f4c:	425b      	neglt	r3, r3
 8008f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f52:	9307      	strge	r3, [sp, #28]
 8008f54:	9307      	strlt	r3, [sp, #28]
 8008f56:	bfb8      	it	lt
 8008f58:	9204      	strlt	r2, [sp, #16]
 8008f5a:	7823      	ldrb	r3, [r4, #0]
 8008f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f5e:	d10c      	bne.n	8008f7a <_vfiprintf_r+0x176>
 8008f60:	7863      	ldrb	r3, [r4, #1]
 8008f62:	2b2a      	cmp	r3, #42	; 0x2a
 8008f64:	d135      	bne.n	8008fd2 <_vfiprintf_r+0x1ce>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	3402      	adds	r4, #2
 8008f6a:	1d1a      	adds	r2, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	9203      	str	r2, [sp, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bfb8      	it	lt
 8008f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009060 <_vfiprintf_r+0x25c>
 8008f7e:	2203      	movs	r2, #3
 8008f80:	4650      	mov	r0, sl
 8008f82:	7821      	ldrb	r1, [r4, #0]
 8008f84:	f7fe ff8e 	bl	8007ea4 <memchr>
 8008f88:	b140      	cbz	r0, 8008f9c <_vfiprintf_r+0x198>
 8008f8a:	2340      	movs	r3, #64	; 0x40
 8008f8c:	eba0 000a 	sub.w	r0, r0, sl
 8008f90:	fa03 f000 	lsl.w	r0, r3, r0
 8008f94:	9b04      	ldr	r3, [sp, #16]
 8008f96:	3401      	adds	r4, #1
 8008f98:	4303      	orrs	r3, r0
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa0:	2206      	movs	r2, #6
 8008fa2:	482c      	ldr	r0, [pc, #176]	; (8009054 <_vfiprintf_r+0x250>)
 8008fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fa8:	f7fe ff7c 	bl	8007ea4 <memchr>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d03f      	beq.n	8009030 <_vfiprintf_r+0x22c>
 8008fb0:	4b29      	ldr	r3, [pc, #164]	; (8009058 <_vfiprintf_r+0x254>)
 8008fb2:	bb1b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x1f8>
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	f023 0307 	bic.w	r3, r3, #7
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	9303      	str	r3, [sp, #12]
 8008fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc2:	443b      	add	r3, r7
 8008fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc6:	e767      	b.n	8008e98 <_vfiprintf_r+0x94>
 8008fc8:	460c      	mov	r4, r1
 8008fca:	2001      	movs	r0, #1
 8008fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd0:	e7a5      	b.n	8008f1e <_vfiprintf_r+0x11a>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f04f 0c0a 	mov.w	ip, #10
 8008fd8:	4619      	mov	r1, r3
 8008fda:	3401      	adds	r4, #1
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe4:	3a30      	subs	r2, #48	; 0x30
 8008fe6:	2a09      	cmp	r2, #9
 8008fe8:	d903      	bls.n	8008ff2 <_vfiprintf_r+0x1ee>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0c5      	beq.n	8008f7a <_vfiprintf_r+0x176>
 8008fee:	9105      	str	r1, [sp, #20]
 8008ff0:	e7c3      	b.n	8008f7a <_vfiprintf_r+0x176>
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffa:	e7f0      	b.n	8008fde <_vfiprintf_r+0x1da>
 8008ffc:	ab03      	add	r3, sp, #12
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	462a      	mov	r2, r5
 8009002:	4630      	mov	r0, r6
 8009004:	4b15      	ldr	r3, [pc, #84]	; (800905c <_vfiprintf_r+0x258>)
 8009006:	a904      	add	r1, sp, #16
 8009008:	f7fc f8ae 	bl	8005168 <_printf_float>
 800900c:	4607      	mov	r7, r0
 800900e:	1c78      	adds	r0, r7, #1
 8009010:	d1d6      	bne.n	8008fc0 <_vfiprintf_r+0x1bc>
 8009012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009014:	07d9      	lsls	r1, r3, #31
 8009016:	d405      	bmi.n	8009024 <_vfiprintf_r+0x220>
 8009018:	89ab      	ldrh	r3, [r5, #12]
 800901a:	059a      	lsls	r2, r3, #22
 800901c:	d402      	bmi.n	8009024 <_vfiprintf_r+0x220>
 800901e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009020:	f000 faa1 	bl	8009566 <__retarget_lock_release_recursive>
 8009024:	89ab      	ldrh	r3, [r5, #12]
 8009026:	065b      	lsls	r3, r3, #25
 8009028:	f53f af12 	bmi.w	8008e50 <_vfiprintf_r+0x4c>
 800902c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902e:	e711      	b.n	8008e54 <_vfiprintf_r+0x50>
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4630      	mov	r0, r6
 8009038:	4b08      	ldr	r3, [pc, #32]	; (800905c <_vfiprintf_r+0x258>)
 800903a:	a904      	add	r1, sp, #16
 800903c:	f7fc fb30 	bl	80056a0 <_printf_i>
 8009040:	e7e4      	b.n	800900c <_vfiprintf_r+0x208>
 8009042:	bf00      	nop
 8009044:	08009f84 	.word	0x08009f84
 8009048:	08009fa4 	.word	0x08009fa4
 800904c:	08009f64 	.word	0x08009f64
 8009050:	08009f14 	.word	0x08009f14
 8009054:	08009f1e 	.word	0x08009f1e
 8009058:	08005169 	.word	0x08005169
 800905c:	08008ddf 	.word	0x08008ddf
 8009060:	08009f1a 	.word	0x08009f1a

08009064 <__swbuf_r>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	460e      	mov	r6, r1
 8009068:	4614      	mov	r4, r2
 800906a:	4605      	mov	r5, r0
 800906c:	b118      	cbz	r0, 8009076 <__swbuf_r+0x12>
 800906e:	6983      	ldr	r3, [r0, #24]
 8009070:	b90b      	cbnz	r3, 8009076 <__swbuf_r+0x12>
 8009072:	f000 f9d9 	bl	8009428 <__sinit>
 8009076:	4b21      	ldr	r3, [pc, #132]	; (80090fc <__swbuf_r+0x98>)
 8009078:	429c      	cmp	r4, r3
 800907a:	d12b      	bne.n	80090d4 <__swbuf_r+0x70>
 800907c:	686c      	ldr	r4, [r5, #4]
 800907e:	69a3      	ldr	r3, [r4, #24]
 8009080:	60a3      	str	r3, [r4, #8]
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	071a      	lsls	r2, r3, #28
 8009086:	d52f      	bpl.n	80090e8 <__swbuf_r+0x84>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	b36b      	cbz	r3, 80090e8 <__swbuf_r+0x84>
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	6820      	ldr	r0, [r4, #0]
 8009090:	b2f6      	uxtb	r6, r6
 8009092:	1ac0      	subs	r0, r0, r3
 8009094:	6963      	ldr	r3, [r4, #20]
 8009096:	4637      	mov	r7, r6
 8009098:	4283      	cmp	r3, r0
 800909a:	dc04      	bgt.n	80090a6 <__swbuf_r+0x42>
 800909c:	4621      	mov	r1, r4
 800909e:	4628      	mov	r0, r5
 80090a0:	f000 f92e 	bl	8009300 <_fflush_r>
 80090a4:	bb30      	cbnz	r0, 80090f4 <__swbuf_r+0x90>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	3001      	adds	r0, #1
 80090aa:	3b01      	subs	r3, #1
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	6022      	str	r2, [r4, #0]
 80090b4:	701e      	strb	r6, [r3, #0]
 80090b6:	6963      	ldr	r3, [r4, #20]
 80090b8:	4283      	cmp	r3, r0
 80090ba:	d004      	beq.n	80090c6 <__swbuf_r+0x62>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	07db      	lsls	r3, r3, #31
 80090c0:	d506      	bpl.n	80090d0 <__swbuf_r+0x6c>
 80090c2:	2e0a      	cmp	r6, #10
 80090c4:	d104      	bne.n	80090d0 <__swbuf_r+0x6c>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f919 	bl	8009300 <_fflush_r>
 80090ce:	b988      	cbnz	r0, 80090f4 <__swbuf_r+0x90>
 80090d0:	4638      	mov	r0, r7
 80090d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d4:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <__swbuf_r+0x9c>)
 80090d6:	429c      	cmp	r4, r3
 80090d8:	d101      	bne.n	80090de <__swbuf_r+0x7a>
 80090da:	68ac      	ldr	r4, [r5, #8]
 80090dc:	e7cf      	b.n	800907e <__swbuf_r+0x1a>
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <__swbuf_r+0xa0>)
 80090e0:	429c      	cmp	r4, r3
 80090e2:	bf08      	it	eq
 80090e4:	68ec      	ldreq	r4, [r5, #12]
 80090e6:	e7ca      	b.n	800907e <__swbuf_r+0x1a>
 80090e8:	4621      	mov	r1, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 f80c 	bl	8009108 <__swsetup_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0cb      	beq.n	800908c <__swbuf_r+0x28>
 80090f4:	f04f 37ff 	mov.w	r7, #4294967295
 80090f8:	e7ea      	b.n	80090d0 <__swbuf_r+0x6c>
 80090fa:	bf00      	nop
 80090fc:	08009f84 	.word	0x08009f84
 8009100:	08009fa4 	.word	0x08009fa4
 8009104:	08009f64 	.word	0x08009f64

08009108 <__swsetup_r>:
 8009108:	4b32      	ldr	r3, [pc, #200]	; (80091d4 <__swsetup_r+0xcc>)
 800910a:	b570      	push	{r4, r5, r6, lr}
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	4606      	mov	r6, r0
 8009110:	460c      	mov	r4, r1
 8009112:	b125      	cbz	r5, 800911e <__swsetup_r+0x16>
 8009114:	69ab      	ldr	r3, [r5, #24]
 8009116:	b913      	cbnz	r3, 800911e <__swsetup_r+0x16>
 8009118:	4628      	mov	r0, r5
 800911a:	f000 f985 	bl	8009428 <__sinit>
 800911e:	4b2e      	ldr	r3, [pc, #184]	; (80091d8 <__swsetup_r+0xd0>)
 8009120:	429c      	cmp	r4, r3
 8009122:	d10f      	bne.n	8009144 <__swsetup_r+0x3c>
 8009124:	686c      	ldr	r4, [r5, #4]
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912c:	0719      	lsls	r1, r3, #28
 800912e:	d42c      	bmi.n	800918a <__swsetup_r+0x82>
 8009130:	06dd      	lsls	r5, r3, #27
 8009132:	d411      	bmi.n	8009158 <__swsetup_r+0x50>
 8009134:	2309      	movs	r3, #9
 8009136:	6033      	str	r3, [r6, #0]
 8009138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	e03e      	b.n	80091c2 <__swsetup_r+0xba>
 8009144:	4b25      	ldr	r3, [pc, #148]	; (80091dc <__swsetup_r+0xd4>)
 8009146:	429c      	cmp	r4, r3
 8009148:	d101      	bne.n	800914e <__swsetup_r+0x46>
 800914a:	68ac      	ldr	r4, [r5, #8]
 800914c:	e7eb      	b.n	8009126 <__swsetup_r+0x1e>
 800914e:	4b24      	ldr	r3, [pc, #144]	; (80091e0 <__swsetup_r+0xd8>)
 8009150:	429c      	cmp	r4, r3
 8009152:	bf08      	it	eq
 8009154:	68ec      	ldreq	r4, [r5, #12]
 8009156:	e7e6      	b.n	8009126 <__swsetup_r+0x1e>
 8009158:	0758      	lsls	r0, r3, #29
 800915a:	d512      	bpl.n	8009182 <__swsetup_r+0x7a>
 800915c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915e:	b141      	cbz	r1, 8009172 <__swsetup_r+0x6a>
 8009160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009164:	4299      	cmp	r1, r3
 8009166:	d002      	beq.n	800916e <__swsetup_r+0x66>
 8009168:	4630      	mov	r0, r6
 800916a:	f7ff fb6f 	bl	800884c <_free_r>
 800916e:	2300      	movs	r3, #0
 8009170:	6363      	str	r3, [r4, #52]	; 0x34
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	2300      	movs	r3, #0
 800917c:	6063      	str	r3, [r4, #4]
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f043 0308 	orr.w	r3, r3, #8
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	b94b      	cbnz	r3, 80091a2 <__swsetup_r+0x9a>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009198:	d003      	beq.n	80091a2 <__swsetup_r+0x9a>
 800919a:	4621      	mov	r1, r4
 800919c:	4630      	mov	r0, r6
 800919e:	f000 fa07 	bl	80095b0 <__smakebuf_r>
 80091a2:	89a0      	ldrh	r0, [r4, #12]
 80091a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a8:	f010 0301 	ands.w	r3, r0, #1
 80091ac:	d00a      	beq.n	80091c4 <__swsetup_r+0xbc>
 80091ae:	2300      	movs	r3, #0
 80091b0:	60a3      	str	r3, [r4, #8]
 80091b2:	6963      	ldr	r3, [r4, #20]
 80091b4:	425b      	negs	r3, r3
 80091b6:	61a3      	str	r3, [r4, #24]
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	b943      	cbnz	r3, 80091ce <__swsetup_r+0xc6>
 80091bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091c0:	d1ba      	bne.n	8009138 <__swsetup_r+0x30>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	0781      	lsls	r1, r0, #30
 80091c6:	bf58      	it	pl
 80091c8:	6963      	ldrpl	r3, [r4, #20]
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	e7f4      	b.n	80091b8 <__swsetup_r+0xb0>
 80091ce:	2000      	movs	r0, #0
 80091d0:	e7f7      	b.n	80091c2 <__swsetup_r+0xba>
 80091d2:	bf00      	nop
 80091d4:	20000020 	.word	0x20000020
 80091d8:	08009f84 	.word	0x08009f84
 80091dc:	08009fa4 	.word	0x08009fa4
 80091e0:	08009f64 	.word	0x08009f64

080091e4 <abort>:
 80091e4:	2006      	movs	r0, #6
 80091e6:	b508      	push	{r3, lr}
 80091e8:	f000 fa52 	bl	8009690 <raise>
 80091ec:	2001      	movs	r0, #1
 80091ee:	f7f8 fc57 	bl	8001aa0 <_exit>
	...

080091f4 <__sflush_r>:
 80091f4:	898a      	ldrh	r2, [r1, #12]
 80091f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	4605      	mov	r5, r0
 80091fc:	0710      	lsls	r0, r2, #28
 80091fe:	460c      	mov	r4, r1
 8009200:	d458      	bmi.n	80092b4 <__sflush_r+0xc0>
 8009202:	684b      	ldr	r3, [r1, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dc05      	bgt.n	8009214 <__sflush_r+0x20>
 8009208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	dc02      	bgt.n	8009214 <__sflush_r+0x20>
 800920e:	2000      	movs	r0, #0
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009216:	2e00      	cmp	r6, #0
 8009218:	d0f9      	beq.n	800920e <__sflush_r+0x1a>
 800921a:	2300      	movs	r3, #0
 800921c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009220:	682f      	ldr	r7, [r5, #0]
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	d032      	beq.n	800928c <__sflush_r+0x98>
 8009226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	075a      	lsls	r2, r3, #29
 800922c:	d505      	bpl.n	800923a <__sflush_r+0x46>
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	1ac0      	subs	r0, r0, r3
 8009232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009234:	b10b      	cbz	r3, 800923a <__sflush_r+0x46>
 8009236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009238:	1ac0      	subs	r0, r0, r3
 800923a:	2300      	movs	r3, #0
 800923c:	4602      	mov	r2, r0
 800923e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009240:	4628      	mov	r0, r5
 8009242:	6a21      	ldr	r1, [r4, #32]
 8009244:	47b0      	blx	r6
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	d106      	bne.n	800925a <__sflush_r+0x66>
 800924c:	6829      	ldr	r1, [r5, #0]
 800924e:	291d      	cmp	r1, #29
 8009250:	d82c      	bhi.n	80092ac <__sflush_r+0xb8>
 8009252:	4a2a      	ldr	r2, [pc, #168]	; (80092fc <__sflush_r+0x108>)
 8009254:	40ca      	lsrs	r2, r1
 8009256:	07d6      	lsls	r6, r2, #31
 8009258:	d528      	bpl.n	80092ac <__sflush_r+0xb8>
 800925a:	2200      	movs	r2, #0
 800925c:	6062      	str	r2, [r4, #4]
 800925e:	6922      	ldr	r2, [r4, #16]
 8009260:	04d9      	lsls	r1, r3, #19
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	d504      	bpl.n	8009270 <__sflush_r+0x7c>
 8009266:	1c42      	adds	r2, r0, #1
 8009268:	d101      	bne.n	800926e <__sflush_r+0x7a>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	b903      	cbnz	r3, 8009270 <__sflush_r+0x7c>
 800926e:	6560      	str	r0, [r4, #84]	; 0x54
 8009270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009272:	602f      	str	r7, [r5, #0]
 8009274:	2900      	cmp	r1, #0
 8009276:	d0ca      	beq.n	800920e <__sflush_r+0x1a>
 8009278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800927c:	4299      	cmp	r1, r3
 800927e:	d002      	beq.n	8009286 <__sflush_r+0x92>
 8009280:	4628      	mov	r0, r5
 8009282:	f7ff fae3 	bl	800884c <_free_r>
 8009286:	2000      	movs	r0, #0
 8009288:	6360      	str	r0, [r4, #52]	; 0x34
 800928a:	e7c1      	b.n	8009210 <__sflush_r+0x1c>
 800928c:	6a21      	ldr	r1, [r4, #32]
 800928e:	2301      	movs	r3, #1
 8009290:	4628      	mov	r0, r5
 8009292:	47b0      	blx	r6
 8009294:	1c41      	adds	r1, r0, #1
 8009296:	d1c7      	bne.n	8009228 <__sflush_r+0x34>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0c4      	beq.n	8009228 <__sflush_r+0x34>
 800929e:	2b1d      	cmp	r3, #29
 80092a0:	d001      	beq.n	80092a6 <__sflush_r+0xb2>
 80092a2:	2b16      	cmp	r3, #22
 80092a4:	d101      	bne.n	80092aa <__sflush_r+0xb6>
 80092a6:	602f      	str	r7, [r5, #0]
 80092a8:	e7b1      	b.n	800920e <__sflush_r+0x1a>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	e7ad      	b.n	8009210 <__sflush_r+0x1c>
 80092b4:	690f      	ldr	r7, [r1, #16]
 80092b6:	2f00      	cmp	r7, #0
 80092b8:	d0a9      	beq.n	800920e <__sflush_r+0x1a>
 80092ba:	0793      	lsls	r3, r2, #30
 80092bc:	bf18      	it	ne
 80092be:	2300      	movne	r3, #0
 80092c0:	680e      	ldr	r6, [r1, #0]
 80092c2:	bf08      	it	eq
 80092c4:	694b      	ldreq	r3, [r1, #20]
 80092c6:	eba6 0807 	sub.w	r8, r6, r7
 80092ca:	600f      	str	r7, [r1, #0]
 80092cc:	608b      	str	r3, [r1, #8]
 80092ce:	f1b8 0f00 	cmp.w	r8, #0
 80092d2:	dd9c      	ble.n	800920e <__sflush_r+0x1a>
 80092d4:	4643      	mov	r3, r8
 80092d6:	463a      	mov	r2, r7
 80092d8:	4628      	mov	r0, r5
 80092da:	6a21      	ldr	r1, [r4, #32]
 80092dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092de:	47b0      	blx	r6
 80092e0:	2800      	cmp	r0, #0
 80092e2:	dc06      	bgt.n	80092f2 <__sflush_r+0xfe>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	e78e      	b.n	8009210 <__sflush_r+0x1c>
 80092f2:	4407      	add	r7, r0
 80092f4:	eba8 0800 	sub.w	r8, r8, r0
 80092f8:	e7e9      	b.n	80092ce <__sflush_r+0xda>
 80092fa:	bf00      	nop
 80092fc:	20400001 	.word	0x20400001

08009300 <_fflush_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	690b      	ldr	r3, [r1, #16]
 8009304:	4605      	mov	r5, r0
 8009306:	460c      	mov	r4, r1
 8009308:	b913      	cbnz	r3, 8009310 <_fflush_r+0x10>
 800930a:	2500      	movs	r5, #0
 800930c:	4628      	mov	r0, r5
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	b118      	cbz	r0, 800931a <_fflush_r+0x1a>
 8009312:	6983      	ldr	r3, [r0, #24]
 8009314:	b90b      	cbnz	r3, 800931a <_fflush_r+0x1a>
 8009316:	f000 f887 	bl	8009428 <__sinit>
 800931a:	4b14      	ldr	r3, [pc, #80]	; (800936c <_fflush_r+0x6c>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d11b      	bne.n	8009358 <_fflush_r+0x58>
 8009320:	686c      	ldr	r4, [r5, #4]
 8009322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0ef      	beq.n	800930a <_fflush_r+0xa>
 800932a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800932c:	07d0      	lsls	r0, r2, #31
 800932e:	d404      	bmi.n	800933a <_fflush_r+0x3a>
 8009330:	0599      	lsls	r1, r3, #22
 8009332:	d402      	bmi.n	800933a <_fflush_r+0x3a>
 8009334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009336:	f000 f915 	bl	8009564 <__retarget_lock_acquire_recursive>
 800933a:	4628      	mov	r0, r5
 800933c:	4621      	mov	r1, r4
 800933e:	f7ff ff59 	bl	80091f4 <__sflush_r>
 8009342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009344:	4605      	mov	r5, r0
 8009346:	07da      	lsls	r2, r3, #31
 8009348:	d4e0      	bmi.n	800930c <_fflush_r+0xc>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	059b      	lsls	r3, r3, #22
 800934e:	d4dd      	bmi.n	800930c <_fflush_r+0xc>
 8009350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009352:	f000 f908 	bl	8009566 <__retarget_lock_release_recursive>
 8009356:	e7d9      	b.n	800930c <_fflush_r+0xc>
 8009358:	4b05      	ldr	r3, [pc, #20]	; (8009370 <_fflush_r+0x70>)
 800935a:	429c      	cmp	r4, r3
 800935c:	d101      	bne.n	8009362 <_fflush_r+0x62>
 800935e:	68ac      	ldr	r4, [r5, #8]
 8009360:	e7df      	b.n	8009322 <_fflush_r+0x22>
 8009362:	4b04      	ldr	r3, [pc, #16]	; (8009374 <_fflush_r+0x74>)
 8009364:	429c      	cmp	r4, r3
 8009366:	bf08      	it	eq
 8009368:	68ec      	ldreq	r4, [r5, #12]
 800936a:	e7da      	b.n	8009322 <_fflush_r+0x22>
 800936c:	08009f84 	.word	0x08009f84
 8009370:	08009fa4 	.word	0x08009fa4
 8009374:	08009f64 	.word	0x08009f64

08009378 <std>:
 8009378:	2300      	movs	r3, #0
 800937a:	b510      	push	{r4, lr}
 800937c:	4604      	mov	r4, r0
 800937e:	e9c0 3300 	strd	r3, r3, [r0]
 8009382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009386:	6083      	str	r3, [r0, #8]
 8009388:	8181      	strh	r1, [r0, #12]
 800938a:	6643      	str	r3, [r0, #100]	; 0x64
 800938c:	81c2      	strh	r2, [r0, #14]
 800938e:	6183      	str	r3, [r0, #24]
 8009390:	4619      	mov	r1, r3
 8009392:	2208      	movs	r2, #8
 8009394:	305c      	adds	r0, #92	; 0x5c
 8009396:	f7fb fe41 	bl	800501c <memset>
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <std+0x38>)
 800939c:	6224      	str	r4, [r4, #32]
 800939e:	6263      	str	r3, [r4, #36]	; 0x24
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <std+0x3c>)
 80093a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <std+0x40>)
 80093a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093a8:	4b04      	ldr	r3, [pc, #16]	; (80093bc <std+0x44>)
 80093aa:	6323      	str	r3, [r4, #48]	; 0x30
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	bf00      	nop
 80093b0:	080096c9 	.word	0x080096c9
 80093b4:	080096eb 	.word	0x080096eb
 80093b8:	08009723 	.word	0x08009723
 80093bc:	08009747 	.word	0x08009747

080093c0 <_cleanup_r>:
 80093c0:	4901      	ldr	r1, [pc, #4]	; (80093c8 <_cleanup_r+0x8>)
 80093c2:	f000 b8af 	b.w	8009524 <_fwalk_reent>
 80093c6:	bf00      	nop
 80093c8:	08009301 	.word	0x08009301

080093cc <__sfmoreglue>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	2568      	movs	r5, #104	; 0x68
 80093d0:	1e4a      	subs	r2, r1, #1
 80093d2:	4355      	muls	r5, r2
 80093d4:	460e      	mov	r6, r1
 80093d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093da:	f7ff fa83 	bl	80088e4 <_malloc_r>
 80093de:	4604      	mov	r4, r0
 80093e0:	b140      	cbz	r0, 80093f4 <__sfmoreglue+0x28>
 80093e2:	2100      	movs	r1, #0
 80093e4:	e9c0 1600 	strd	r1, r6, [r0]
 80093e8:	300c      	adds	r0, #12
 80093ea:	60a0      	str	r0, [r4, #8]
 80093ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093f0:	f7fb fe14 	bl	800501c <memset>
 80093f4:	4620      	mov	r0, r4
 80093f6:	bd70      	pop	{r4, r5, r6, pc}

080093f8 <__sfp_lock_acquire>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__sfp_lock_acquire+0x8>)
 80093fa:	f000 b8b3 	b.w	8009564 <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	200007e4 	.word	0x200007e4

08009404 <__sfp_lock_release>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__sfp_lock_release+0x8>)
 8009406:	f000 b8ae 	b.w	8009566 <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	200007e4 	.word	0x200007e4

08009410 <__sinit_lock_acquire>:
 8009410:	4801      	ldr	r0, [pc, #4]	; (8009418 <__sinit_lock_acquire+0x8>)
 8009412:	f000 b8a7 	b.w	8009564 <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	200007df 	.word	0x200007df

0800941c <__sinit_lock_release>:
 800941c:	4801      	ldr	r0, [pc, #4]	; (8009424 <__sinit_lock_release+0x8>)
 800941e:	f000 b8a2 	b.w	8009566 <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	200007df 	.word	0x200007df

08009428 <__sinit>:
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	f7ff fff0 	bl	8009410 <__sinit_lock_acquire>
 8009430:	69a3      	ldr	r3, [r4, #24]
 8009432:	b11b      	cbz	r3, 800943c <__sinit+0x14>
 8009434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009438:	f7ff bff0 	b.w	800941c <__sinit_lock_release>
 800943c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009440:	6523      	str	r3, [r4, #80]	; 0x50
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <__sinit+0x68>)
 8009444:	4a13      	ldr	r2, [pc, #76]	; (8009494 <__sinit+0x6c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	62a2      	str	r2, [r4, #40]	; 0x28
 800944a:	42a3      	cmp	r3, r4
 800944c:	bf08      	it	eq
 800944e:	2301      	moveq	r3, #1
 8009450:	4620      	mov	r0, r4
 8009452:	bf08      	it	eq
 8009454:	61a3      	streq	r3, [r4, #24]
 8009456:	f000 f81f 	bl	8009498 <__sfp>
 800945a:	6060      	str	r0, [r4, #4]
 800945c:	4620      	mov	r0, r4
 800945e:	f000 f81b 	bl	8009498 <__sfp>
 8009462:	60a0      	str	r0, [r4, #8]
 8009464:	4620      	mov	r0, r4
 8009466:	f000 f817 	bl	8009498 <__sfp>
 800946a:	2200      	movs	r2, #0
 800946c:	2104      	movs	r1, #4
 800946e:	60e0      	str	r0, [r4, #12]
 8009470:	6860      	ldr	r0, [r4, #4]
 8009472:	f7ff ff81 	bl	8009378 <std>
 8009476:	2201      	movs	r2, #1
 8009478:	2109      	movs	r1, #9
 800947a:	68a0      	ldr	r0, [r4, #8]
 800947c:	f7ff ff7c 	bl	8009378 <std>
 8009480:	2202      	movs	r2, #2
 8009482:	2112      	movs	r1, #18
 8009484:	68e0      	ldr	r0, [r4, #12]
 8009486:	f7ff ff77 	bl	8009378 <std>
 800948a:	2301      	movs	r3, #1
 800948c:	61a3      	str	r3, [r4, #24]
 800948e:	e7d1      	b.n	8009434 <__sinit+0xc>
 8009490:	08009b0c 	.word	0x08009b0c
 8009494:	080093c1 	.word	0x080093c1

08009498 <__sfp>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	4607      	mov	r7, r0
 800949c:	f7ff ffac 	bl	80093f8 <__sfp_lock_acquire>
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <__sfp+0x84>)
 80094a2:	681e      	ldr	r6, [r3, #0]
 80094a4:	69b3      	ldr	r3, [r6, #24]
 80094a6:	b913      	cbnz	r3, 80094ae <__sfp+0x16>
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff ffbd 	bl	8009428 <__sinit>
 80094ae:	3648      	adds	r6, #72	; 0x48
 80094b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	d503      	bpl.n	80094c0 <__sfp+0x28>
 80094b8:	6833      	ldr	r3, [r6, #0]
 80094ba:	b30b      	cbz	r3, 8009500 <__sfp+0x68>
 80094bc:	6836      	ldr	r6, [r6, #0]
 80094be:	e7f7      	b.n	80094b0 <__sfp+0x18>
 80094c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094c4:	b9d5      	cbnz	r5, 80094fc <__sfp+0x64>
 80094c6:	4b16      	ldr	r3, [pc, #88]	; (8009520 <__sfp+0x88>)
 80094c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094cc:	60e3      	str	r3, [r4, #12]
 80094ce:	6665      	str	r5, [r4, #100]	; 0x64
 80094d0:	f000 f847 	bl	8009562 <__retarget_lock_init_recursive>
 80094d4:	f7ff ff96 	bl	8009404 <__sfp_lock_release>
 80094d8:	2208      	movs	r2, #8
 80094da:	4629      	mov	r1, r5
 80094dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094e4:	6025      	str	r5, [r4, #0]
 80094e6:	61a5      	str	r5, [r4, #24]
 80094e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094ec:	f7fb fd96 	bl	800501c <memset>
 80094f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094f8:	4620      	mov	r0, r4
 80094fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fc:	3468      	adds	r4, #104	; 0x68
 80094fe:	e7d9      	b.n	80094b4 <__sfp+0x1c>
 8009500:	2104      	movs	r1, #4
 8009502:	4638      	mov	r0, r7
 8009504:	f7ff ff62 	bl	80093cc <__sfmoreglue>
 8009508:	4604      	mov	r4, r0
 800950a:	6030      	str	r0, [r6, #0]
 800950c:	2800      	cmp	r0, #0
 800950e:	d1d5      	bne.n	80094bc <__sfp+0x24>
 8009510:	f7ff ff78 	bl	8009404 <__sfp_lock_release>
 8009514:	230c      	movs	r3, #12
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	e7ee      	b.n	80094f8 <__sfp+0x60>
 800951a:	bf00      	nop
 800951c:	08009b0c 	.word	0x08009b0c
 8009520:	ffff0001 	.word	0xffff0001

08009524 <_fwalk_reent>:
 8009524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009528:	4606      	mov	r6, r0
 800952a:	4688      	mov	r8, r1
 800952c:	2700      	movs	r7, #0
 800952e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009536:	f1b9 0901 	subs.w	r9, r9, #1
 800953a:	d505      	bpl.n	8009548 <_fwalk_reent+0x24>
 800953c:	6824      	ldr	r4, [r4, #0]
 800953e:	2c00      	cmp	r4, #0
 8009540:	d1f7      	bne.n	8009532 <_fwalk_reent+0xe>
 8009542:	4638      	mov	r0, r7
 8009544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009548:	89ab      	ldrh	r3, [r5, #12]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d907      	bls.n	800955e <_fwalk_reent+0x3a>
 800954e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009552:	3301      	adds	r3, #1
 8009554:	d003      	beq.n	800955e <_fwalk_reent+0x3a>
 8009556:	4629      	mov	r1, r5
 8009558:	4630      	mov	r0, r6
 800955a:	47c0      	blx	r8
 800955c:	4307      	orrs	r7, r0
 800955e:	3568      	adds	r5, #104	; 0x68
 8009560:	e7e9      	b.n	8009536 <_fwalk_reent+0x12>

08009562 <__retarget_lock_init_recursive>:
 8009562:	4770      	bx	lr

08009564 <__retarget_lock_acquire_recursive>:
 8009564:	4770      	bx	lr

08009566 <__retarget_lock_release_recursive>:
 8009566:	4770      	bx	lr

08009568 <__swhatbuf_r>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	460e      	mov	r6, r1
 800956c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009570:	4614      	mov	r4, r2
 8009572:	2900      	cmp	r1, #0
 8009574:	461d      	mov	r5, r3
 8009576:	b096      	sub	sp, #88	; 0x58
 8009578:	da07      	bge.n	800958a <__swhatbuf_r+0x22>
 800957a:	2300      	movs	r3, #0
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	89b3      	ldrh	r3, [r6, #12]
 8009580:	061a      	lsls	r2, r3, #24
 8009582:	d410      	bmi.n	80095a6 <__swhatbuf_r+0x3e>
 8009584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009588:	e00e      	b.n	80095a8 <__swhatbuf_r+0x40>
 800958a:	466a      	mov	r2, sp
 800958c:	f000 f902 	bl	8009794 <_fstat_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	dbf2      	blt.n	800957a <__swhatbuf_r+0x12>
 8009594:	9a01      	ldr	r2, [sp, #4]
 8009596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800959a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800959e:	425a      	negs	r2, r3
 80095a0:	415a      	adcs	r2, r3
 80095a2:	602a      	str	r2, [r5, #0]
 80095a4:	e7ee      	b.n	8009584 <__swhatbuf_r+0x1c>
 80095a6:	2340      	movs	r3, #64	; 0x40
 80095a8:	2000      	movs	r0, #0
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	b016      	add	sp, #88	; 0x58
 80095ae:	bd70      	pop	{r4, r5, r6, pc}

080095b0 <__smakebuf_r>:
 80095b0:	898b      	ldrh	r3, [r1, #12]
 80095b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095b4:	079d      	lsls	r5, r3, #30
 80095b6:	4606      	mov	r6, r0
 80095b8:	460c      	mov	r4, r1
 80095ba:	d507      	bpl.n	80095cc <__smakebuf_r+0x1c>
 80095bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	2301      	movs	r3, #1
 80095c6:	6163      	str	r3, [r4, #20]
 80095c8:	b002      	add	sp, #8
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	466a      	mov	r2, sp
 80095ce:	ab01      	add	r3, sp, #4
 80095d0:	f7ff ffca 	bl	8009568 <__swhatbuf_r>
 80095d4:	9900      	ldr	r1, [sp, #0]
 80095d6:	4605      	mov	r5, r0
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff f983 	bl	80088e4 <_malloc_r>
 80095de:	b948      	cbnz	r0, 80095f4 <__smakebuf_r+0x44>
 80095e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e4:	059a      	lsls	r2, r3, #22
 80095e6:	d4ef      	bmi.n	80095c8 <__smakebuf_r+0x18>
 80095e8:	f023 0303 	bic.w	r3, r3, #3
 80095ec:	f043 0302 	orr.w	r3, r3, #2
 80095f0:	81a3      	strh	r3, [r4, #12]
 80095f2:	e7e3      	b.n	80095bc <__smakebuf_r+0xc>
 80095f4:	4b0d      	ldr	r3, [pc, #52]	; (800962c <__smakebuf_r+0x7c>)
 80095f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	6020      	str	r0, [r4, #0]
 80095fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009600:	81a3      	strh	r3, [r4, #12]
 8009602:	9b00      	ldr	r3, [sp, #0]
 8009604:	6120      	str	r0, [r4, #16]
 8009606:	6163      	str	r3, [r4, #20]
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	b15b      	cbz	r3, 8009624 <__smakebuf_r+0x74>
 800960c:	4630      	mov	r0, r6
 800960e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009612:	f000 f8d1 	bl	80097b8 <_isatty_r>
 8009616:	b128      	cbz	r0, 8009624 <__smakebuf_r+0x74>
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f023 0303 	bic.w	r3, r3, #3
 800961e:	f043 0301 	orr.w	r3, r3, #1
 8009622:	81a3      	strh	r3, [r4, #12]
 8009624:	89a0      	ldrh	r0, [r4, #12]
 8009626:	4305      	orrs	r5, r0
 8009628:	81a5      	strh	r5, [r4, #12]
 800962a:	e7cd      	b.n	80095c8 <__smakebuf_r+0x18>
 800962c:	080093c1 	.word	0x080093c1

08009630 <_malloc_usable_size_r>:
 8009630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009634:	1f18      	subs	r0, r3, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	bfbc      	itt	lt
 800963a:	580b      	ldrlt	r3, [r1, r0]
 800963c:	18c0      	addlt	r0, r0, r3
 800963e:	4770      	bx	lr

08009640 <_raise_r>:
 8009640:	291f      	cmp	r1, #31
 8009642:	b538      	push	{r3, r4, r5, lr}
 8009644:	4604      	mov	r4, r0
 8009646:	460d      	mov	r5, r1
 8009648:	d904      	bls.n	8009654 <_raise_r+0x14>
 800964a:	2316      	movs	r3, #22
 800964c:	6003      	str	r3, [r0, #0]
 800964e:	f04f 30ff 	mov.w	r0, #4294967295
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009656:	b112      	cbz	r2, 800965e <_raise_r+0x1e>
 8009658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800965c:	b94b      	cbnz	r3, 8009672 <_raise_r+0x32>
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f830 	bl	80096c4 <_getpid_r>
 8009664:	462a      	mov	r2, r5
 8009666:	4601      	mov	r1, r0
 8009668:	4620      	mov	r0, r4
 800966a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800966e:	f000 b817 	b.w	80096a0 <_kill_r>
 8009672:	2b01      	cmp	r3, #1
 8009674:	d00a      	beq.n	800968c <_raise_r+0x4c>
 8009676:	1c59      	adds	r1, r3, #1
 8009678:	d103      	bne.n	8009682 <_raise_r+0x42>
 800967a:	2316      	movs	r3, #22
 800967c:	6003      	str	r3, [r0, #0]
 800967e:	2001      	movs	r0, #1
 8009680:	e7e7      	b.n	8009652 <_raise_r+0x12>
 8009682:	2400      	movs	r4, #0
 8009684:	4628      	mov	r0, r5
 8009686:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800968a:	4798      	blx	r3
 800968c:	2000      	movs	r0, #0
 800968e:	e7e0      	b.n	8009652 <_raise_r+0x12>

08009690 <raise>:
 8009690:	4b02      	ldr	r3, [pc, #8]	; (800969c <raise+0xc>)
 8009692:	4601      	mov	r1, r0
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	f7ff bfd3 	b.w	8009640 <_raise_r>
 800969a:	bf00      	nop
 800969c:	20000020 	.word	0x20000020

080096a0 <_kill_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	2300      	movs	r3, #0
 80096a4:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_kill_r+0x20>)
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	f7f8 f9e7 	bl	8001a80 <_kill>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d102      	bne.n	80096bc <_kill_r+0x1c>
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	b103      	cbz	r3, 80096bc <_kill_r+0x1c>
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop
 80096c0:	200007d8 	.word	0x200007d8

080096c4 <_getpid_r>:
 80096c4:	f7f8 b9d5 	b.w	8001a72 <_getpid>

080096c8 <__sread>:
 80096c8:	b510      	push	{r4, lr}
 80096ca:	460c      	mov	r4, r1
 80096cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d0:	f000 f894 	bl	80097fc <_read_r>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	bfab      	itete	ge
 80096d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096da:	89a3      	ldrhlt	r3, [r4, #12]
 80096dc:	181b      	addge	r3, r3, r0
 80096de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096e2:	bfac      	ite	ge
 80096e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80096e6:	81a3      	strhlt	r3, [r4, #12]
 80096e8:	bd10      	pop	{r4, pc}

080096ea <__swrite>:
 80096ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ee:	461f      	mov	r7, r3
 80096f0:	898b      	ldrh	r3, [r1, #12]
 80096f2:	4605      	mov	r5, r0
 80096f4:	05db      	lsls	r3, r3, #23
 80096f6:	460c      	mov	r4, r1
 80096f8:	4616      	mov	r6, r2
 80096fa:	d505      	bpl.n	8009708 <__swrite+0x1e>
 80096fc:	2302      	movs	r3, #2
 80096fe:	2200      	movs	r2, #0
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	f000 f868 	bl	80097d8 <_lseek_r>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	4632      	mov	r2, r6
 800970c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	4628      	mov	r0, r5
 8009714:	463b      	mov	r3, r7
 8009716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800971a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	f000 b817 	b.w	8009750 <_write_r>

08009722 <__sseek>:
 8009722:	b510      	push	{r4, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800972a:	f000 f855 	bl	80097d8 <_lseek_r>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	bf15      	itete	ne
 8009734:	6560      	strne	r0, [r4, #84]	; 0x54
 8009736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800973a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800973e:	81a3      	strheq	r3, [r4, #12]
 8009740:	bf18      	it	ne
 8009742:	81a3      	strhne	r3, [r4, #12]
 8009744:	bd10      	pop	{r4, pc}

08009746 <__sclose>:
 8009746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974a:	f000 b813 	b.w	8009774 <_close_r>
	...

08009750 <_write_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	4611      	mov	r1, r2
 8009758:	2200      	movs	r2, #0
 800975a:	4d05      	ldr	r5, [pc, #20]	; (8009770 <_write_r+0x20>)
 800975c:	602a      	str	r2, [r5, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7f8 f9c5 	bl	8001aee <_write>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_write_r+0x1e>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_write_r+0x1e>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	200007d8 	.word	0x200007d8

08009774 <_close_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	2300      	movs	r3, #0
 8009778:	4d05      	ldr	r5, [pc, #20]	; (8009790 <_close_r+0x1c>)
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f8 f9d1 	bl	8001b26 <_close>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_close_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_close_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	200007d8 	.word	0x200007d8

08009794 <_fstat_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	2300      	movs	r3, #0
 8009798:	4d06      	ldr	r5, [pc, #24]	; (80097b4 <_fstat_r+0x20>)
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	f7f8 f9cb 	bl	8001b3c <_fstat>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d102      	bne.n	80097b0 <_fstat_r+0x1c>
 80097aa:	682b      	ldr	r3, [r5, #0]
 80097ac:	b103      	cbz	r3, 80097b0 <_fstat_r+0x1c>
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	bf00      	nop
 80097b4:	200007d8 	.word	0x200007d8

080097b8 <_isatty_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	2300      	movs	r3, #0
 80097bc:	4d05      	ldr	r5, [pc, #20]	; (80097d4 <_isatty_r+0x1c>)
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7f8 f9c9 	bl	8001b5a <_isatty>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_isatty_r+0x1a>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_isatty_r+0x1a>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	200007d8 	.word	0x200007d8

080097d8 <_lseek_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	2200      	movs	r2, #0
 80097e2:	4d05      	ldr	r5, [pc, #20]	; (80097f8 <_lseek_r+0x20>)
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f8 f9c1 	bl	8001b6e <_lseek>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_lseek_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_lseek_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200007d8 	.word	0x200007d8

080097fc <_read_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	4611      	mov	r1, r2
 8009804:	2200      	movs	r2, #0
 8009806:	4d05      	ldr	r5, [pc, #20]	; (800981c <_read_r+0x20>)
 8009808:	602a      	str	r2, [r5, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	f7f8 f952 	bl	8001ab4 <_read>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_read_r+0x1e>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_read_r+0x1e>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200007d8 	.word	0x200007d8

08009820 <_init>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr

0800982c <_fini>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr
