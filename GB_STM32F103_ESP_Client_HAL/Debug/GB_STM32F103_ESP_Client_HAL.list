
GB_STM32F103_ESP_Client_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800308c  0800308c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800308c  0800308c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800308c  0800308c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000070  08003104  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08003104  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000926b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa0  00000000  00000000  00029304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002b4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173a4  00000000  00000000  0002bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f72  00000000  00000000  00042f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a65  00000000  00000000  0004ae76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fdc  00000000  00000000  000cd930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b08 	.word	0x08002b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002b08 	.word	0x08002b08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	2b00      	cmp	r3, #0
 800016c:	db0b      	blt.n	8000186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 021f 	and.w	r2, r3, #31
 8000174:	4906      	ldr	r1, [pc, #24]	; (8000190 <__NVIC_EnableIRQ+0x34>)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	2001      	movs	r0, #1
 800017e:	fa00 f202 	lsl.w	r2, r0, r2
 8000182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	e000e100 	.word	0xe000e100

08000194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	db0a      	blt.n	80001be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	490c      	ldr	r1, [pc, #48]	; (80001e0 <__NVIC_SetPriority+0x4c>)
 80001ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b2:	0112      	lsls	r2, r2, #4
 80001b4:	b2d2      	uxtb	r2, r2
 80001b6:	440b      	add	r3, r1
 80001b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001bc:	e00a      	b.n	80001d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4908      	ldr	r1, [pc, #32]	; (80001e4 <__NVIC_SetPriority+0x50>)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f003 030f 	and.w	r3, r3, #15
 80001ca:	3b04      	subs	r3, #4
 80001cc:	0112      	lsls	r2, r2, #4
 80001ce:	b2d2      	uxtb	r2, r2
 80001d0:	440b      	add	r3, r1
 80001d2:	761a      	strb	r2, [r3, #24]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fa4f 	bl	8000690 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f83d 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 f8d3 	bl	80003a0 <MX_GPIO_Init>
  //Terminal
  MX_USART1_UART_Init();
 80001fa:	f000 f87d 	bl	80002f8 <MX_USART1_UART_Init>

  //ESP8266
  MX_USART2_UART_Init();
 80001fe:	f000 f8a5 	bl	800034c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable RXNE interrupts on USART2 SIDE
 	USART2->CR1 |= USART_CR1_RXNEIE;
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <main+0x74>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <main+0x74>)
 8000208:	f043 0320 	orr.w	r3, r3, #32
 800020c:	60d3      	str	r3, [r2, #12]
  __NVIC_EnableIRQ(USART2_IRQn);
 800020e:	2026      	movs	r0, #38	; 0x26
 8000210:	f7ff ffa4 	bl	800015c <__NVIC_EnableIRQ>
  __NVIC_SetPriority (USART2_IRQn, 1);
 8000214:	2101      	movs	r1, #1
 8000216:	2026      	movs	r0, #38	; 0x26
 8000218:	f7ff ffbc 	bl	8000194 <__NVIC_SetPriority>

  HAL_UART_Transmit(&huart1,(uint8_t *)"****ESP8266 as client******",27, 100);
 800021c:	2364      	movs	r3, #100	; 0x64
 800021e:	221b      	movs	r2, #27
 8000220:	490f      	ldr	r1, [pc, #60]	; (8000260 <main+0x78>)
 8000222:	4810      	ldr	r0, [pc, #64]	; (8000264 <main+0x7c>)
 8000224:	f001 f9b3 	bl	800158e <HAL_UART_Transmit>

  //Initialise ESP8266 module
  GB_esp8266_initialise_client();
 8000228:	f001 ffb8 	bl	800219c <GB_esp8266_initialise_client>
  uint8_t gb_t = 90;
 800022c:	235a      	movs	r3, #90	; 0x5a
 800022e:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  GB_esp8266_connectTCPserver(gb_url,80);
 8000230:	2150      	movs	r1, #80	; 0x50
 8000232:	480d      	ldr	r0, [pc, #52]	; (8000268 <main+0x80>)
 8000234:	f001 fb16 	bl	8001864 <GB_esp8266_connectTCPserver>
	  GB_esp8266_cipsendint(gb_t,gb_urlpath);
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	490c      	ldr	r1, [pc, #48]	; (800026c <main+0x84>)
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fb63 	bl	8001908 <GB_esp8266_cipsendint>
	  GB_esp8266_tcpgetcommandint(gb_urlpath,gb_t);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4619      	mov	r1, r3
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <main+0x84>)
 8000248:	f001 fb84 	bl	8001954 <GB_esp8266_tcpgetcommandint>
	  gb_t++;
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	3301      	adds	r3, #1
 8000250:	71fb      	strb	r3, [r7, #7]

  	  HAL_Delay(1000);
 8000252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000256:	f000 fa7d 	bl	8000754 <HAL_Delay>
	  GB_esp8266_connectTCPserver(gb_url,80);
 800025a:	e7e9      	b.n	8000230 <main+0x48>
 800025c:	40004400 	.word	0x40004400
 8000260:	08002b20 	.word	0x08002b20
 8000264:	200000a4 	.word	0x200000a4
 8000268:	08002fdc 	.word	0x08002fdc
 800026c:	08002f78 	.word	0x08002f78

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 ffca 	bl	8002218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	2302      	movs	r3, #2
 80002a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fd01 	bl	8000cc0 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c4:	f000 f88e 	bl	80003e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2101      	movs	r1, #1
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 ff6d 	bl	80011c0 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002ec:	f000 f87a 	bl	80003e4 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3740      	adds	r7, #64	; 0x40
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_USART1_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000330:	f001 f8e0 	bl	80014f4 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f853 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000a4 	.word	0x200000a4
 8000348:	40013800 	.word	0x40013800

0800034c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <MX_USART2_UART_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800035c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_USART2_UART_Init+0x4c>)
 8000384:	f001 f8b6 	bl	80014f4 <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f829 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000e8 	.word	0x200000e8
 800039c:	40004400 	.word	0x40004400

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003ac:	f043 0320 	orr.w	r3, r3, #32
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0320 	and.w	r3, r3, #32
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0304 	and.w	r3, r3, #4
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0318 	add.w	r3, r7, #24
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a3f      	ldr	r2, [pc, #252]	; (800056c <HAL_UART_MspInit+0x118>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d13a      	bne.n	80004ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000474:	4b3e      	ldr	r3, [pc, #248]	; (8000570 <HAL_UART_MspInit+0x11c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a3d      	ldr	r2, [pc, #244]	; (8000570 <HAL_UART_MspInit+0x11c>)
 800047a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b3b      	ldr	r3, [pc, #236]	; (8000570 <HAL_UART_MspInit+0x11c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b38      	ldr	r3, [pc, #224]	; (8000570 <HAL_UART_MspInit+0x11c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a37      	ldr	r2, [pc, #220]	; (8000570 <HAL_UART_MspInit+0x11c>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b35      	ldr	r3, [pc, #212]	; (8000570 <HAL_UART_MspInit+0x11c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	613b      	str	r3, [r7, #16]
 80004a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ae:	2303      	movs	r3, #3
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	4619      	mov	r1, r3
 80004b8:	482e      	ldr	r0, [pc, #184]	; (8000574 <HAL_UART_MspInit+0x120>)
 80004ba:	f000 fa7d 	bl	80009b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4619      	mov	r1, r3
 80004d2:	4828      	ldr	r0, [pc, #160]	; (8000574 <HAL_UART_MspInit+0x120>)
 80004d4:	f000 fa70 	bl	80009b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2101      	movs	r1, #1
 80004dc:	2025      	movs	r0, #37	; 0x25
 80004de:	f000 fa34 	bl	800094a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004e2:	2025      	movs	r0, #37	; 0x25
 80004e4:	f000 fa4d 	bl	8000982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004e8:	e03c      	b.n	8000564 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a22      	ldr	r2, [pc, #136]	; (8000578 <HAL_UART_MspInit+0x124>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d137      	bne.n	8000564 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <HAL_UART_MspInit+0x11c>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <HAL_UART_MspInit+0x11c>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <HAL_UART_MspInit+0x11c>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_UART_MspInit+0x11c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <HAL_UART_MspInit+0x11c>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_UART_MspInit+0x11c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000524:	2304      	movs	r3, #4
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4619      	mov	r1, r3
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <HAL_UART_MspInit+0x120>)
 8000538:	f000 fa3e 	bl	80009b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800053c:	2308      	movs	r3, #8
 800053e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <HAL_UART_MspInit+0x120>)
 8000550:	f000 fa32 	bl	80009b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2026      	movs	r0, #38	; 0x26
 800055a:	f000 f9f6 	bl	800094a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800055e:	2026      	movs	r0, #38	; 0x26
 8000560:	f000 fa0f 	bl	8000982 <HAL_NVIC_EnableIRQ>
}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40013800 	.word	0x40013800
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800
 8000578:	40004400 	.word	0x40004400

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <NMI_Handler+0x4>

08000582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <HardFault_Handler+0x4>

08000588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <MemManage_Handler+0x4>

0800058e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <UsageFault_Handler+0x4>

0800059a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c2:	f000 f8ab 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <_sbrk+0x5c>)
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <_sbrk+0x60>)
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_sbrk+0x64>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <_sbrk+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d207      	bcs.n	800060c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005fc:	f001 fde2 	bl	80021c4 <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e009      	b.n	8000620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <_sbrk+0x64>)
 800061c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20005000 	.word	0x20005000
 800062c:	00000400 	.word	0x00000400
 8000630:	2000008c 	.word	0x2000008c
 8000634:	200003a8 	.word	0x200003a8

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	; (800067c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	; (8000688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066a:	f7ff ffe5 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066e:	f001 fdaf 	bl	80021d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fdb9 	bl	80001e8 <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000680:	08003094 	.word	0x08003094
  ldr r2, =_sbss
 8000684:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000688:	200003a4 	.word	0x200003a4

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f947 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fea0 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f95f 	bl	800099e <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f927 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	2000012c 	.word	0x2000012c

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	2000012c 	.word	0x2000012c

08000754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff fff0 	bl	8000740 <HAL_GetTick>
 8000760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800076c:	d005      	beq.n	800077a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_Delay+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077a:	bf00      	nop
 800077c:	f7ff ffe0 	bl	8000740 <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8f7      	bhi.n	800077c <HAL_Delay+0x28>
  {
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriorityGrouping>:
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_EnableIRQ>:
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0b      	blt.n	800082a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <__NVIC_EnableIRQ+0x34>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff90 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff2d 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff42 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff90 	bl	800088c <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5f 	bl	8000838 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff35 	bl	8000800 <__NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ffa2 	bl	80008f0 <SysTick_Config>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b08b      	sub	sp, #44	; 0x2c
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ca:	e169      	b.n	8000ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009cc:	2201      	movs	r2, #1
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	f040 8158 	bne.w	8000c9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a9a      	ldr	r2, [pc, #616]	; (8000c58 <HAL_GPIO_Init+0x2a0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d05e      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 80009f4:	4a98      	ldr	r2, [pc, #608]	; (8000c58 <HAL_GPIO_Init+0x2a0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d875      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 80009fa:	4a98      	ldr	r2, [pc, #608]	; (8000c5c <HAL_GPIO_Init+0x2a4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d058      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a00:	4a96      	ldr	r2, [pc, #600]	; (8000c5c <HAL_GPIO_Init+0x2a4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d86f      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a06:	4a96      	ldr	r2, [pc, #600]	; (8000c60 <HAL_GPIO_Init+0x2a8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d052      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a0c:	4a94      	ldr	r2, [pc, #592]	; (8000c60 <HAL_GPIO_Init+0x2a8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d869      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a12:	4a94      	ldr	r2, [pc, #592]	; (8000c64 <HAL_GPIO_Init+0x2ac>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d04c      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a18:	4a92      	ldr	r2, [pc, #584]	; (8000c64 <HAL_GPIO_Init+0x2ac>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d863      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a1e:	4a92      	ldr	r2, [pc, #584]	; (8000c68 <HAL_GPIO_Init+0x2b0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d046      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a24:	4a90      	ldr	r2, [pc, #576]	; (8000c68 <HAL_GPIO_Init+0x2b0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d85d      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a2a:	2b12      	cmp	r3, #18
 8000a2c:	d82a      	bhi.n	8000a84 <HAL_GPIO_Init+0xcc>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d859      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <HAL_GPIO_Init+0x80>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000ab3 	.word	0x08000ab3
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a9f 	.word	0x08000a9f
 8000a44:	08000ae1 	.word	0x08000ae1
 8000a48:	08000ae7 	.word	0x08000ae7
 8000a4c:	08000ae7 	.word	0x08000ae7
 8000a50:	08000ae7 	.word	0x08000ae7
 8000a54:	08000ae7 	.word	0x08000ae7
 8000a58:	08000ae7 	.word	0x08000ae7
 8000a5c:	08000ae7 	.word	0x08000ae7
 8000a60:	08000ae7 	.word	0x08000ae7
 8000a64:	08000ae7 	.word	0x08000ae7
 8000a68:	08000ae7 	.word	0x08000ae7
 8000a6c:	08000ae7 	.word	0x08000ae7
 8000a70:	08000ae7 	.word	0x08000ae7
 8000a74:	08000ae7 	.word	0x08000ae7
 8000a78:	08000ae7 	.word	0x08000ae7
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aa9 	.word	0x08000aa9
 8000a84:	4a79      	ldr	r2, [pc, #484]	; (8000c6c <HAL_GPIO_Init+0x2b4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8a:	e02c      	b.n	8000ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e029      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e024      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e01f      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	330c      	adds	r3, #12
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e01a      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aba:	2304      	movs	r3, #4
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e013      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	611a      	str	r2, [r3, #16]
          break;
 8000ad2:	e009      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	615a      	str	r2, [r3, #20]
          break;
 8000ade:	e003      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e000      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          break;
 8000ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2bff      	cmp	r3, #255	; 0xff
 8000aec:	d801      	bhi.n	8000af2 <HAL_GPIO_Init+0x13a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	e001      	b.n	8000af6 <HAL_GPIO_Init+0x13e>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3304      	adds	r3, #4
 8000af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2bff      	cmp	r3, #255	; 0xff
 8000afc:	d802      	bhi.n	8000b04 <HAL_GPIO_Init+0x14c>
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	e002      	b.n	8000b0a <HAL_GPIO_Init+0x152>
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	3b08      	subs	r3, #8
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	210f      	movs	r1, #15
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	6a39      	ldr	r1, [r7, #32]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	431a      	orrs	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 80b1 	beq.w	8000c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b38:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a4c      	ldr	r2, [pc, #304]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b50:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_GPIO_Init+0x2bc>)
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	3302      	adds	r3, #2
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	220f      	movs	r2, #15
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a40      	ldr	r2, [pc, #256]	; (8000c78 <HAL_GPIO_Init+0x2c0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d013      	beq.n	8000ba4 <HAL_GPIO_Init+0x1ec>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3e      	ldr	r2, [pc, #248]	; (8000c80 <HAL_GPIO_Init+0x2c8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1e4>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <HAL_GPIO_Init+0x2cc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1e0>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	e004      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba8:	f002 0203 	and.w	r2, r2, #3
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	4093      	lsls	r3, r2
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb6:	492f      	ldr	r1, [pc, #188]	; (8000c74 <HAL_GPIO_Init+0x2bc>)
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d006      	beq.n	8000bde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	492c      	ldr	r1, [pc, #176]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	600b      	str	r3, [r1, #0]
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	4928      	ldr	r1, [pc, #160]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	4922      	ldr	r1, [pc, #136]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	491e      	ldr	r1, [pc, #120]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	4918      	ldr	r1, [pc, #96]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4914      	ldr	r1, [pc, #80]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d021      	beq.n	8000c8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	490e      	ldr	r1, [pc, #56]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60cb      	str	r3, [r1, #12]
 8000c54:	e021      	b.n	8000c9a <HAL_GPIO_Init+0x2e2>
 8000c56:	bf00      	nop
 8000c58:	10320000 	.word	0x10320000
 8000c5c:	10310000 	.word	0x10310000
 8000c60:	10220000 	.word	0x10220000
 8000c64:	10210000 	.word	0x10210000
 8000c68:	10120000 	.word	0x10120000
 8000c6c:	10110000 	.word	0x10110000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40011400 	.word	0x40011400
 8000c88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_GPIO_Init+0x304>)
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	4909      	ldr	r1, [pc, #36]	; (8000cbc <HAL_GPIO_Init+0x304>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f47f ae8e 	bne.w	80009cc <HAL_GPIO_Init+0x14>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	372c      	adds	r7, #44	; 0x2c
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e26c      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8087 	beq.w	8000dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b92      	ldr	r3, [pc, #584]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d00c      	beq.n	8000d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cec:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d112      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
 8000cf8:	4b8c      	ldr	r3, [pc, #560]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d04:	d10b      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d06c      	beq.n	8000dec <HAL_RCC_OscConfig+0x12c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d168      	bne.n	8000dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e246      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x76>
 8000d28:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7f      	ldr	r2, [pc, #508]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e02e      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a7a      	ldr	r2, [pc, #488]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b78      	ldr	r3, [pc, #480]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a77      	ldr	r2, [pc, #476]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e01d      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0xbc>
 8000d62:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a71      	ldr	r2, [pc, #452]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6e      	ldr	r2, [pc, #440]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a67      	ldr	r2, [pc, #412]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fcd0 	bl	8000740 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fccc 	bl	8000740 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e1fa      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0xe4>
 8000dc2:	e014      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fcbc 	bl	8000740 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fcb8 	bl	8000740 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1e6      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x10c>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d063      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d11c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
 8000e12:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e1ba      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4939      	ldr	r1, [pc, #228]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e03a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fc71 	bl	8000740 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc6d 	bl	8000740 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e19b      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4927      	ldr	r1, [pc, #156]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fc50 	bl	8000740 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc4c 	bl	8000740 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e17a      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03a      	beq.n	8000f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc30 	bl	8000740 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fc2c 	bl	8000740 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e15a      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fad8 	bl	80014b8 <RCC_Delay>
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fc16 	bl	8000740 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f16:	e00f      	b.n	8000f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc12 	bl	8000740 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d908      	bls.n	8000f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e140      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42420000 	.word	0x42420000
 8000f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b9e      	ldr	r3, [pc, #632]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e9      	bne.n	8000f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a6 	beq.w	800109e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b97      	ldr	r3, [pc, #604]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10d      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b94      	ldr	r3, [pc, #592]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a93      	ldr	r2, [pc, #588]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b91      	ldr	r3, [pc, #580]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b8e      	ldr	r3, [pc, #568]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a8a      	ldr	r2, [pc, #552]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fbd3 	bl	8000740 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9e:	f7ff fbcf 	bl	8000740 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	; 0x64
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e0fd      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4b81      	ldr	r3, [pc, #516]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x312>
 8000fc4:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a7a      	ldr	r2, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e02d      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x334>
 8000fda:	4b76      	ldr	r3, [pc, #472]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a75      	ldr	r2, [pc, #468]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a72      	ldr	r2, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	e01c      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x356>
 8000ffc:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a6c      	ldr	r2, [pc, #432]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a69      	ldr	r2, [pc, #420]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	e00b      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8001016:	4b67      	ldr	r3, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a63      	ldr	r2, [pc, #396]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb83 	bl	8000740 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb7f 	bl	8000740 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0ab      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ee      	beq.n	800103e <HAL_RCC_OscConfig+0x37e>
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb6d 	bl	8000740 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fb69 	bl	8000740 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	; 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e095      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ee      	bne.n	800106a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d105      	bne.n	800109e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8081 	beq.w	80011aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d061      	beq.n	8001178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d146      	bne.n	800114a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010bc:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_OscConfig+0x4fc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb3d 	bl	8000740 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fb39 	bl	8000740 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e067      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	492d      	ldr	r1, [pc, #180]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a19      	ldr	r1, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	430b      	orrs	r3, r1
 8001116:	4927      	ldr	r1, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_RCC_OscConfig+0x4fc>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fb0d 	bl	8000740 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fb09 	bl	8000740 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e037      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x46a>
 8001148:	e02f      	b.n	80011aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_RCC_OscConfig+0x4fc>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff faf6 	bl	8000740 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff faf2 	bl	8000740 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e020      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x498>
 8001176:	e018      	b.n	80011aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40007000 	.word	0x40007000
 80011bc:	42420060 	.word	0x42420060

080011c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0d0      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d910      	bls.n	8001204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 0207 	bic.w	r2, r3, #7
 80011ea:	4965      	ldr	r1, [pc, #404]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0b8      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800121c:	4b59      	ldr	r3, [pc, #356]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800123e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	494d      	ldr	r1, [pc, #308]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d040      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d115      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e07f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e073      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06b      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129e:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f023 0203 	bic.w	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4936      	ldr	r1, [pc, #216]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b0:	f7ff fa46 	bl	8000740 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fa42 	bl	8000740 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e053      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 020c 	and.w	r2, r3, #12
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	429a      	cmp	r2, r3
 80012de:	d1eb      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e0:	4b27      	ldr	r3, [pc, #156]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d210      	bcs.n	8001310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	4922      	ldr	r1, [pc, #136]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e032      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4916      	ldr	r1, [pc, #88]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	490e      	ldr	r1, [pc, #56]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134e:	f000 f821 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 8001352:	4602      	mov	r2, r0
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	490a      	ldr	r1, [pc, #40]	; (8001388 <HAL_RCC_ClockConfig+0x1c8>)
 8001360:	5ccb      	ldrb	r3, [r1, r3]
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1cc>)
 8001368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1d0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f9a4 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000
 8001384:	40021000 	.word	0x40021000
 8001388:	08003040 	.word	0x08003040
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001394:	b490      	push	{r4, r7}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_RCC_GetSysClockFreq+0xb0>)
 800139c:	1d3c      	adds	r4, r7, #4
 800139e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013a4:	f240 2301 	movw	r3, #513	; 0x201
 80013a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0x40>
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d003      	beq.n	80013da <HAL_RCC_GetSysClockFreq+0x46>
 80013d2:	e02d      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013d6:	623b      	str	r3, [r7, #32]
      break;
 80013d8:	e02d      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013e6:	4413      	add	r3, r2
 80013e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	0c5b      	lsrs	r3, r3, #17
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001406:	4413      	add	r3, r2
 8001408:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800140c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001412:	fb02 f203 	mul.w	r2, r2, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	e004      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	623b      	str	r3, [r7, #32]
      break;
 800142e:	e002      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001432:	623b      	str	r3, [r7, #32]
      break;
 8001434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001436:	6a3b      	ldr	r3, [r7, #32]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bc90      	pop	{r4, r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08002b3c 	.word	0x08002b3c
 8001448:	40021000 	.word	0x40021000
 800144c:	007a1200 	.word	0x007a1200
 8001450:	003d0900 	.word	0x003d0900

08001454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_RCC_GetHCLKFreq+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff2 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	; (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	08003050 	.word	0x08003050

08001490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001494:	f7ff ffde 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	0adb      	lsrs	r3, r3, #11
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4903      	ldr	r1, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08003050 	.word	0x08003050

080014b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <RCC_Delay+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <RCC_Delay+0x38>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a5b      	lsrs	r3, r3, #9
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d4:	bf00      	nop
  }
  while (Delay --);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	60fa      	str	r2, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <RCC_Delay+0x1c>
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e03f      	b.n	8001586 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe ff9a 	bl	8000454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	; 0x24
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f905 	bl	8001748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800154c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800155c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800156c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b08a      	sub	sp, #40	; 0x28
 8001592:	af02      	add	r7, sp, #8
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4613      	mov	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	d17c      	bne.n	80016a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <HAL_UART_Transmit+0x2c>
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e075      	b.n	80016aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_UART_Transmit+0x3e>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e06e      	b.n	80016aa <HAL_UART_Transmit+0x11c>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2221      	movs	r2, #33	; 0x21
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015e2:	f7ff f8ad 	bl	8000740 <HAL_GetTick>
 80015e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fc:	d108      	bne.n	8001610 <HAL_UART_Transmit+0x82>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d104      	bne.n	8001610 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	e003      	b.n	8001618 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001620:	e02a      	b.n	8001678 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f840 	bl	80016b2 <UART_WaitOnFlagUntilTimeout>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e036      	b.n	80016aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10b      	bne.n	800165a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001650:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	3302      	adds	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	e007      	b.n	800166a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	3301      	adds	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800167c:	b29b      	uxth	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1cf      	bne.n	8001622 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2200      	movs	r2, #0
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f810 	bl	80016b2 <UART_WaitOnFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e006      	b.n	80016aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016a8:	2302      	movs	r3, #2
  }
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016c2:	e02c      	b.n	800171e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ca:	d028      	beq.n	800171e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80016d2:	f7ff f835 	bl	8000740 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d21d      	bcs.n	800171e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2220      	movs	r2, #32
 8001706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e00f      	b.n	800173e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4013      	ands	r3, r2
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	429a      	cmp	r2, r3
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	429a      	cmp	r2, r3
 800173a:	d0c3      	beq.n	80016c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001782:	f023 030c 	bic.w	r3, r3, #12
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	430b      	orrs	r3, r1
 800178e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2c      	ldr	r2, [pc, #176]	; (800185c <UART_SetConfig+0x114>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d103      	bne.n	80017b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017b0:	f7ff fe6e 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	e002      	b.n	80017be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80017b8:	f7ff fe56 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 80017bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009a      	lsls	r2, r3, #2
 80017c8:	441a      	add	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <UART_SetConfig+0x118>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	0119      	lsls	r1, r3, #4
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009a      	lsls	r2, r3, #2
 80017e8:	441a      	add	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <UART_SetConfig+0x118>)
 80017f6:	fba3 0302 	umull	r0, r3, r3, r2
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	fb00 f303 	mul.w	r3, r0, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	3332      	adds	r3, #50	; 0x32
 8001808:	4a15      	ldr	r2, [pc, #84]	; (8001860 <UART_SetConfig+0x118>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001814:	4419      	add	r1, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009a      	lsls	r2, r3, #2
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fbb2 f2f3 	udiv	r2, r2, r3
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <UART_SetConfig+0x118>)
 800182e:	fba3 0302 	umull	r0, r3, r3, r2
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2064      	movs	r0, #100	; 0x64
 8001836:	fb00 f303 	mul.w	r3, r0, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	3332      	adds	r3, #50	; 0x32
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <UART_SetConfig+0x118>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	f003 020f 	and.w	r2, r3, #15
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	440a      	add	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013800 	.word	0x40013800
 8001860:	51eb851f 	.word	0x51eb851f

08001864 <GB_esp8266_connectTCPserver>:
//		//esp8266_rst();
//	}

		//AT+CIPSTART
		void GB_esp8266_connectTCPserver(const char * gb_url,int gb_port)
		{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09c      	sub	sp, #112	; 0x70
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
			char gb_buff[100];
			sprintf(gb_buff,"AT+CIPSTART=\"TCP\",\"%s\",%u\r\n",gb_url,gb_port);
 800186e:	f107 0008 	add.w	r0, r7, #8
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	490f      	ldr	r1, [pc, #60]	; (80018b4 <GB_esp8266_connectTCPserver+0x50>)
 8001878:	f000 fcd6 	bl	8002228 <siprintf>
			GB_send_command(gb_buff);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f8d7 	bl	8001a34 <GB_send_command>
			int gb_rsp = GB_RFR_UART2("OK", 2000);
 8001886:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <GB_esp8266_connectTCPserver+0x54>)
 800188c:	f000 f970 	bl	8001b70 <GB_RFR_UART2>
 8001890:	66f8      	str	r0, [r7, #108]	; 0x6c
			if(gb_rsp==1) GB_printString1("\n Successfully connected to server \n");
 8001892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001894:	2b01      	cmp	r3, #1
 8001896:	d102      	bne.n	800189e <GB_esp8266_connectTCPserver+0x3a>
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <GB_esp8266_connectTCPserver+0x58>)
 800189a:	f000 f8df 	bl	8001a5c <GB_printString1>
			if(gb_rsp==0) GB_printString1("\n Already connected to server \n");
 800189e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <GB_esp8266_connectTCPserver+0x46>
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <GB_esp8266_connectTCPserver+0x5c>)
 80018a6:	f000 f8d9 	bl	8001a5c <GB_printString1>
		}
 80018aa:	bf00      	nop
 80018ac:	3770      	adds	r7, #112	; 0x70
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08002b4c 	.word	0x08002b4c
 80018b8:	08002b68 	.word	0x08002b68
 80018bc:	08002b6c 	.word	0x08002b6c
 80018c0:	08002b94 	.word	0x08002b94

080018c4 <GB_esp8266_commandint>:
			//printString0("\n");
			return (char *) gb_get_command;
		}
		//FOR CALCULATING LENGTH OF GET COMMAND
		const char * GB_esp8266_commandint(const char * gb_urlpath, int gb_val)
		{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
			//char get_command[100];
			memset(gb_get_command, '\0',sizeof(gb_get_command));
 80018ce:	2264      	movs	r2, #100	; 0x64
 80018d0:	2100      	movs	r1, #0
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <GB_esp8266_commandint+0x38>)
 80018d4:	f000 fca0 	bl	8002218 <memset>
			sprintf(gb_get_command,"GET %s=%u\r\n",gb_urlpath,gb_val);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4908      	ldr	r1, [pc, #32]	; (8001900 <GB_esp8266_commandint+0x3c>)
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <GB_esp8266_commandint+0x38>)
 80018e0:	f000 fca2 	bl	8002228 <siprintf>
			GB_printString1(gb_get_command);
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <GB_esp8266_commandint+0x38>)
 80018e6:	f000 f8b9 	bl	8001a5c <GB_printString1>
			GB_printString1("\n");
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <GB_esp8266_commandint+0x40>)
 80018ec:	f000 f8b6 	bl	8001a5c <GB_printString1>
			return (char * )gb_get_command;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <GB_esp8266_commandint+0x38>)
		}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000130 	.word	0x20000130
 8001900:	08002bc0 	.word	0x08002bc0
 8001904:	08002bcc 	.word	0x08002bcc

08001908 <GB_esp8266_cipsendint>:
			GB_printString1("\n");
			return (char * )gb_get_command;
		}
		//AT+CIPSEND
		void GB_esp8266_cipsendint(int  gb_val, const char *  gb_urlpath)
		{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]

			char  gb_send[15];
			int  gb_get_command_length = strlen(GB_esp8266_commandint( gb_urlpath, gb_val));
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7ff ffd5 	bl	80018c4 <GB_esp8266_commandint>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fc15 	bl	800014c <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	61fb      	str	r3, [r7, #28]
			//decimel0(strlen(esp8266_command(urlpath,senseval)));
			//printString0("\n");
			//printString0(esp8266_command(urlpath));
			//printString0("\n");
			sprintf( gb_send,"AT+CIPSEND=%u\r\n", gb_get_command_length);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <GB_esp8266_cipsendint+0x44>)
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fc7a 	bl	8002228 <siprintf>
			GB_send_command( gb_send);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f87b 	bl	8001a34 <GB_send_command>
			//printString0(send);
			//int  gb_rsp = GB_RFR_UART2(">",2000);
			//if (rsp==1) printString0(RX_DATA_UART1);
			GB_printString1( gb_RX_DATA_UART2);
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <GB_esp8266_cipsendint+0x48>)
 8001940:	f000 f88c 	bl	8001a5c <GB_printString1>

		}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	08002bdc 	.word	0x08002bdc
 8001950:	20000194 	.word	0x20000194

08001954 <GB_esp8266_tcpgetcommandint>:
			GB_printString1("\n");
			HAL_Delay(100);
			GB_printString1(gb_RX_DATA_UART2);
		}//GET COMMAND
		void GB_esp8266_tcpgetcommandint(const char * gb_urlpath, int gb_val)   //when field has to be updated like updating the sendor value.
		{    char gb_buff[100];
 8001954:	b580      	push	{r7, lr}
 8001956:	b09c      	sub	sp, #112	; 0x70
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
			memset(gb_buff, '\0',sizeof(gb_buff));
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2264      	movs	r2, #100	; 0x64
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fc56 	bl	8002218 <memset>
			sprintf(gb_buff,"GET %s=%u\r\n",gb_urlpath,gb_val);
 800196c:	f107 000c 	add.w	r0, r7, #12
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	490f      	ldr	r1, [pc, #60]	; (80019b4 <GB_esp8266_tcpgetcommandint+0x60>)
 8001976:	f000 fc57 	bl	8002228 <siprintf>
			GB_printString1(gb_buff);
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f86c 	bl	8001a5c <GB_printString1>
			GB_send_command(gb_buff);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f853 	bl	8001a34 <GB_send_command>
			GB_RFR_UART2("CLOSE", 2000);
 800198e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <GB_esp8266_tcpgetcommandint+0x64>)
 8001994:	f000 f8ec 	bl	8001b70 <GB_RFR_UART2>
			GB_printString1("\n");
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <GB_esp8266_tcpgetcommandint+0x68>)
 800199a:	f000 f85f 	bl	8001a5c <GB_printString1>
			HAL_Delay(100);
 800199e:	2064      	movs	r0, #100	; 0x64
 80019a0:	f7fe fed8 	bl	8000754 <HAL_Delay>
			GB_printString1(gb_RX_DATA_UART2);
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <GB_esp8266_tcpgetcommandint+0x6c>)
 80019a6:	f000 f859 	bl	8001a5c <GB_printString1>
		}//GET COMMAND
 80019aa:	bf00      	nop
 80019ac:	3770      	adds	r7, #112	; 0x70
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08002bc0 	.word	0x08002bc0
 80019b8:	08002bec 	.word	0x08002bec
 80019bc:	08002bcc 	.word	0x08002bcc
 80019c0:	20000194 	.word	0x20000194

080019c4 <__NVIC_GetActive>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0e      	blt.n	80019f4 <__NVIC_GetActive+0x30>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <__NVIC_GetActive+0x3c>)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	3380      	adds	r3, #128	; 0x80
 80019e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	e000      	b.n	80019f6 <__NVIC_GetActive+0x32>
    return(0U);
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <size_of_command>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;


uint16_t size_of_command( const char* gb_string)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint16_t counter=0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	81fb      	strh	r3, [r7, #14]
	while(*gb_string)
 8001a10:	e005      	b.n	8001a1e <size_of_command+0x1a>
	{
		counter = counter+1;
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	3301      	adds	r3, #1
 8001a16:	81fb      	strh	r3, [r7, #14]
		*gb_string++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
	while(*gb_string)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f5      	bne.n	8001a12 <size_of_command+0xe>
	}
	return counter;
 8001a26:	89fb      	ldrh	r3, [r7, #14]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <GB_send_command>:
void GB_send_command(const char * gb_command)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2,(uint8_t *)gb_command,cnt, 100);

	HAL_UART_Transmit(&huart2,(uint8_t *)gb_command,size_of_command(gb_command), 100);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe1 	bl	8001a04 <size_of_command>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	2364      	movs	r3, #100	; 0x64
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <GB_send_command+0x24>)
 8001a4c:	f7ff fd9f 	bl	800158e <HAL_UART_Transmit>
//	GB_printString2(gb_command);
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200000e8 	.word	0x200000e8

08001a5c <GB_printString1>:
void GB_printString1(const char *gb_myString)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)gb_myString,size_of_command(gb_myString), 100);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffcd 	bl	8001a04 <size_of_command>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <GB_printString1+0x24>)
 8001a74:	f7ff fd8b 	bl	800158e <HAL_UART_Transmit>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200000a4 	.word	0x200000a4

08001a84 <USART2_IRQHandler>:
_Bool gb_RX_Buffer_Overflow_UART2; // This flag is set on USART Receiver // buffer overflow
uint8_t gb_rx_byte_UART2;
char gb_RX_DATA_UART2[gb_RX_BUFFER_SIZE_UART2];

void USART2_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

		 if((__NVIC_GetActive(USART2_IRQn)) == 1)
 8001a88:	2026      	movs	r0, #38	; 0x26
 8001a8a:	f7ff ff9b 	bl	80019c4 <__NVIC_GetActive>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d121      	bne.n	8001ad8 <USART2_IRQHandler+0x54>
		    //check if we are here because of RXNE interrupt
		         if (USART2->SR & USART_SR_RXNE) //if RX is not empty
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <USART2_IRQHandler+0x58>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d01b      	beq.n	8001ad8 <USART2_IRQHandler+0x54>
		                {
		        	 gb_rx_byte_UART2 = USART2->DR; //fetch the data received
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <USART2_IRQHandler+0x58>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <USART2_IRQHandler+0x5c>)
 8001aa8:	701a      	strb	r2, [r3, #0]
		                      gb_Rx_Buffer_UART2[gb_RX_Wr_Index_UART2]= gb_rx_byte_UART2;   /* put received char in buffer */
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <USART2_IRQHandler+0x60>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <USART2_IRQHandler+0x5c>)
 8001ab2:	7819      	ldrb	r1, [r3, #0]
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <USART2_IRQHandler+0x64>)
 8001ab6:	5499      	strb	r1, [r3, r2]
		  		              if(++gb_RX_Wr_Index_UART2 > gb_RX_BUFFER_SIZE_UART2)
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <USART2_IRQHandler+0x60>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <USART2_IRQHandler+0x60>)
 8001ac2:	701a      	strb	r2, [r3, #0]
		  		              gb_RX_Wr_Index_UART2 = 0;
		  		              if(++gb_RX_Counter_UART2 > gb_RX_BUFFER_SIZE_UART2) /* keep a character count */
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <USART2_IRQHandler+0x68>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <USART2_IRQHandler+0x68>)
 8001ace:	701a      	strb	r2, [r3, #0]
		  		                   {
		  			                    /* overflow check.. */
		  			                    gb_RX_Counter_UART2 = gb_RX_BUFFER_SIZE_UART2; /* if too many chars came */
		  			                  //  gb_RX_Buffer_Overflow_UART2 = 1;            /* in before they could be used */
		  			                }                                          /* that could cause an error!! */
		  			          gb_RX_No_of_byte_UART2=gb_RX_Counter_UART2;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <USART2_IRQHandler+0x68>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <USART2_IRQHandler+0x6c>)
 8001ad6:	701a      	strb	r2, [r3, #0]

		                 }
	  /* USER CODE END USART2_IRQn 0 */
	  /* USER CODE BEGIN USART2_IRQn 1 */
	  /* USER CODE END USART2_IRQn 1 */
	}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	20000393 	.word	0x20000393
 8001ae4:	20000090 	.word	0x20000090
 8001ae8:	20000294 	.word	0x20000294
 8001aec:	20000092 	.word	0x20000092
 8001af0:	20000093 	.word	0x20000093

08001af4 <GB_getchar_UART2>:
/***********Niche Ring Buffer Functions *****/
/****reading from Interrupted Ring Buffer*/
char  GB_getchar_UART2()             // <--->   Serial.read()
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
	char gb_c;
	gb_c = gb_Rx_Buffer_UART2[gb_RX_Rd_Index_UART2]; /* get one from the buffer..*/
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <GB_getchar_UART2+0x40>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <GB_getchar_UART2+0x44>)
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	71fb      	strb	r3, [r7, #7]
	if(++gb_RX_Rd_Index_UART2 > gb_RX_BUFFER_SIZE_UART2) /* wrap the pointer */
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <GB_getchar_UART2+0x40>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <GB_getchar_UART2+0x40>)
 8001b10:	701a      	strb	r2, [r3, #0]
	gb_RX_Rd_Index_UART2 = 0;
	if(gb_RX_Counter_UART2)
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <GB_getchar_UART2+0x48>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <GB_getchar_UART2+0x32>
	gb_RX_Counter_UART2--; /* keep a count (buffer size) */
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <GB_getchar_UART2+0x48>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <GB_getchar_UART2+0x48>)
 8001b24:	701a      	strb	r2, [r3, #0]
	//GB_UART_TxChar1(gb_c);
	return gb_c ;//return char *
 8001b26:	79fb      	ldrb	r3, [r7, #7]
	//printString0("n \n ");
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000091 	.word	0x20000091
 8001b38:	20000294 	.word	0x20000294
 8001b3c:	20000092 	.word	0x20000092

08001b40 <GB_search_buffer>:
		gb_x++;
	}
	GB_printString1(gb_RX_DATA_UART2);
}
char* GB_search_buffer(const char* gb_search)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	char* gb_p;
	int gb_bufferlen = strlen((const char * )gb_RX_DATA_UART2);
 8001b48:	4808      	ldr	r0, [pc, #32]	; (8001b6c <GB_search_buffer+0x2c>)
 8001b4a:	f7fe faff 	bl	800014c <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60bb      	str	r3, [r7, #8]
	if(gb_bufferlen < gb_RX_BUFFER_SIZE_UART2)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2bfe      	cmp	r3, #254	; 0xfe
 8001b56:	dc04      	bgt.n	8001b62 <GB_search_buffer+0x22>
	gb_p= strstr ((const char *)gb_RX_DATA_UART2,gb_search);
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <GB_search_buffer+0x2c>)
 8001b5c:	f000 fba4 	bl	80022a8 <strstr>
 8001b60:	60f8      	str	r0, [r7, #12]
	return (gb_p);
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000194 	.word	0x20000194

08001b70 <GB_RFR_UART2>:

/* @brief variable to store the number of characters received*/
uint8_t gb_received =0;
int GB_RFR_UART2(const char * gb_rsp,unsigned int gb_timeout)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	uint32_t gb_timeIn = HAL_GetTick();
 8001b7a:	f7fe fde1 	bl	8000740 <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]
	gb_received = 0;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <GB_RFR_UART2+0x80>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	2100      	movs	r1, #0
 8001b8a:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <GB_RFR_UART2+0x84>)
 8001b8c:	f000 fb44 	bl	8002218 <memset>
	while (HAL_GetTick() - gb_timeIn < gb_timeout) // While we haven't timed out
 8001b90:	e01a      	b.n	8001bc8 <GB_RFR_UART2+0x58>
	{
		if(gb_RX_Counter_UART2)
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <GB_RFR_UART2+0x88>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <GB_RFR_UART2+0x58>
		{
			gb_RX_DATA_UART2[gb_received]= GB_getchar_UART2();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <GB_RFR_UART2+0x80>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461c      	mov	r4, r3
 8001ba0:	f7ff ffa8 	bl	8001af4 <GB_getchar_UART2>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <GB_RFR_UART2+0x84>)
 8001baa:	551a      	strb	r2, [r3, r4]
			gb_received++;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <GB_RFR_UART2+0x80>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <GB_RFR_UART2+0x80>)
 8001bb6:	701a      	strb	r2, [r3, #0]
			if(GB_search_buffer(gb_rsp)) return 1;
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffc1 	bl	8001b40 <GB_search_buffer>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <GB_RFR_UART2+0x58>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e00e      	b.n	8001be6 <GB_RFR_UART2+0x76>
	while (HAL_GetTick() - gb_timeIn < gb_timeout) // While we haven't timed out
 8001bc8:	f7fe fdba 	bl	8000740 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8dc      	bhi.n	8001b92 <GB_RFR_UART2+0x22>
		}
	}
	if (gb_received > 0) // If we received any characters
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <GB_RFR_UART2+0x80>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <GB_RFR_UART2+0x74>
	return 0; // Return unkown response error code
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <GB_RFR_UART2+0x76>
	else // If we haven't received any characters
	return 2; // Return the timeout error code
 8001be4:	2302      	movs	r3, #2

}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000094 	.word	0x20000094
 8001bf4:	20000194 	.word	0x20000194
 8001bf8:	20000092 	.word	0x20000092

08001bfc <GB_esp8266_getmode>:
int gb_CWMODE=0;
void GB_esp8266_getmode()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
	GB_send_command("AT+CWMODE?\r\n");
 8001c02:	481d      	ldr	r0, [pc, #116]	; (8001c78 <GB_esp8266_getmode+0x7c>)
 8001c04:	f7ff ff16 	bl	8001a34 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 8001c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c0c:	481b      	ldr	r0, [pc, #108]	; (8001c7c <GB_esp8266_getmode+0x80>)
 8001c0e:	f7ff ffaf 	bl	8001b70 <GB_RFR_UART2>
 8001c12:	60f8      	str	r0, [r7, #12]
	if(gb_rsp==1)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d124      	bne.n	8001c64 <GB_esp8266_getmode+0x68>
	{
		char * gb_p = strchr(gb_RX_DATA_UART2, ':');
 8001c1a:	213a      	movs	r1, #58	; 0x3a
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <GB_esp8266_getmode+0x84>)
 8001c1e:	f000 fb23 	bl	8002268 <strchr>
 8001c22:	60b8      	str	r0, [r7, #8]
		if(gb_p!=NULL)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d022      	beq.n	8001c70 <GB_esp8266_getmode+0x74>
		{
			char gb_mode = *(gb_p+1);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	71fb      	strb	r3, [r7, #7]
			gb_CWMODE= gb_mode-48;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	3b30      	subs	r3, #48	; 0x30
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <GB_esp8266_getmode+0x88>)
 8001c36:	6013      	str	r3, [r2, #0]
			if(gb_CWMODE==1) GB_printString1("Station mode selected\n");
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <GB_esp8266_getmode+0x88>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d102      	bne.n	8001c46 <GB_esp8266_getmode+0x4a>
 8001c40:	4811      	ldr	r0, [pc, #68]	; (8001c88 <GB_esp8266_getmode+0x8c>)
 8001c42:	f7ff ff0b 	bl	8001a5c <GB_printString1>
			if(gb_CWMODE==2) GB_printString1("SoftAP mode selected\n");
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <GB_esp8266_getmode+0x88>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d102      	bne.n	8001c54 <GB_esp8266_getmode+0x58>
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <GB_esp8266_getmode+0x90>)
 8001c50:	f7ff ff04 	bl	8001a5c <GB_printString1>
			if(gb_CWMODE==3) GB_printString1("SoftAP+Station mode selected\n");
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <GB_esp8266_getmode+0x88>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d109      	bne.n	8001c70 <GB_esp8266_getmode+0x74>
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <GB_esp8266_getmode+0x94>)
 8001c5e:	f7ff fefd 	bl	8001a5c <GB_printString1>
		//esp8266_rst();
		GB_printString1(gb_RX_DATA_UART2);
	}

	//GB_printString1(gb_RX_DATA_UART2);
}
 8001c62:	e005      	b.n	8001c70 <GB_esp8266_getmode+0x74>
		GB_printString1("Error in receiving response (check the command) or timeout has happened\n");
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <GB_esp8266_getmode+0x98>)
 8001c66:	f7ff fef9 	bl	8001a5c <GB_printString1>
		GB_printString1(gb_RX_DATA_UART2);
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <GB_esp8266_getmode+0x84>)
 8001c6c:	f7ff fef6 	bl	8001a5c <GB_printString1>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08002c1c 	.word	0x08002c1c
 8001c7c:	08002c2c 	.word	0x08002c2c
 8001c80:	20000194 	.word	0x20000194
 8001c84:	20000098 	.word	0x20000098
 8001c88:	08002c30 	.word	0x08002c30
 8001c8c:	08002c48 	.word	0x08002c48
 8001c90:	08002c60 	.word	0x08002c60
 8001c94:	08002c80 	.word	0x08002c80

08001c98 <GB_esp8266_connectiontype>:
void GB_esp8266_connectiontype()
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
	GB_send_command("AT+CIPMUX?\r\n");
 8001c9e:	4818      	ldr	r0, [pc, #96]	; (8001d00 <GB_esp8266_connectiontype+0x68>)
 8001ca0:	f7ff fec8 	bl	8001a34 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 8001ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ca8:	4816      	ldr	r0, [pc, #88]	; (8001d04 <GB_esp8266_connectiontype+0x6c>)
 8001caa:	f7ff ff61 	bl	8001b70 <GB_RFR_UART2>
 8001cae:	60f8      	str	r0, [r7, #12]
	if(gb_rsp==1)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d11a      	bne.n	8001cec <GB_esp8266_connectiontype+0x54>
	{
		// printString0("command is successfully send\n");
		char * gb_p = strchr(gb_RX_DATA_UART2, ':');
 8001cb6:	213a      	movs	r1, #58	; 0x3a
 8001cb8:	4813      	ldr	r0, [pc, #76]	; (8001d08 <GB_esp8266_connectiontype+0x70>)
 8001cba:	f000 fad5 	bl	8002268 <strchr>
 8001cbe:	60b8      	str	r0, [r7, #8]
		if(gb_p!=NULL)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d018      	beq.n	8001cf8 <GB_esp8266_connectiontype+0x60>
		{
			char gb_mode = *(gb_p+1);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	71fb      	strb	r3, [r7, #7]
			int gb_num = gb_mode-48;
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	3b30      	subs	r3, #48	; 0x30
 8001cd0:	603b      	str	r3, [r7, #0]
			if(gb_num==0) GB_printString1("Single connection - configured as client\n");
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <GB_esp8266_connectiontype+0x46>
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <GB_esp8266_connectiontype+0x74>)
 8001cda:	f7ff febf 	bl	8001a5c <GB_printString1>
			if(gb_num==1) GB_printString1("multiple connection - configured as server\n");
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d109      	bne.n	8001cf8 <GB_esp8266_connectiontype+0x60>
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <GB_esp8266_connectiontype+0x78>)
 8001ce6:	f7ff feb9 	bl	8001a5c <GB_printString1>
	{
		GB_printString1("Error in receiving response (check the command) or timeout has happened\n");
		GB_printString1(gb_RX_DATA_UART2);
	}
//	GB_printString1(gb_RX_DATA_UART2);
}
 8001cea:	e005      	b.n	8001cf8 <GB_esp8266_connectiontype+0x60>
		GB_printString1("Error in receiving response (check the command) or timeout has happened\n");
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <GB_esp8266_connectiontype+0x7c>)
 8001cee:	f7ff feb5 	bl	8001a5c <GB_printString1>
		GB_printString1(gb_RX_DATA_UART2);
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <GB_esp8266_connectiontype+0x70>)
 8001cf4:	f7ff feb2 	bl	8001a5c <GB_printString1>
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08002ccc 	.word	0x08002ccc
 8001d04:	08002c2c 	.word	0x08002c2c
 8001d08:	20000194 	.word	0x20000194
 8001d0c:	08002cdc 	.word	0x08002cdc
 8001d10:	08002d08 	.word	0x08002d08
 8001d14:	08002c80 	.word	0x08002c80

08001d18 <GB_esp8266_getAP>:
void GB_esp8266_getAP()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
	char gb_ssid[20];
	GB_send_command("AT+CWJAP?\r\n");
 8001d1e:	4820      	ldr	r0, [pc, #128]	; (8001da0 <GB_esp8266_getAP+0x88>)
 8001d20:	f7ff fe88 	bl	8001a34 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 2000);
 8001d24:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d28:	481e      	ldr	r0, [pc, #120]	; (8001da4 <GB_esp8266_getAP+0x8c>)
 8001d2a:	f7ff ff21 	bl	8001b70 <GB_RFR_UART2>
 8001d2e:	61f8      	str	r0, [r7, #28]
	if(gb_rsp==1)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12d      	bne.n	8001d92 <GB_esp8266_getAP+0x7a>
	{

		if (strstr(gb_RX_DATA_UART2, "No AP") != NULL)   GB_printString1("No AP is connected\n");
 8001d36:	491c      	ldr	r1, [pc, #112]	; (8001da8 <GB_esp8266_getAP+0x90>)
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <GB_esp8266_getAP+0x94>)
 8001d3a:	f000 fab5 	bl	80022a8 <strstr>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <GB_esp8266_getAP+0x32>
 8001d44:	481a      	ldr	r0, [pc, #104]	; (8001db0 <GB_esp8266_getAP+0x98>)
 8001d46:	f7ff fe89 	bl	8001a5c <GB_printString1>
		char * gb_p = strstr(gb_RX_DATA_UART2,"+CWJAP:");
 8001d4a:	491a      	ldr	r1, [pc, #104]	; (8001db4 <GB_esp8266_getAP+0x9c>)
 8001d4c:	4817      	ldr	r0, [pc, #92]	; (8001dac <GB_esp8266_getAP+0x94>)
 8001d4e:	f000 faab 	bl	80022a8 <strstr>
 8001d52:	61b8      	str	r0, [r7, #24]
		if(gb_p!=NULL)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01e      	beq.n	8001d98 <GB_esp8266_getAP+0x80>
		{
			gb_p +=  strlen("+CWJAP") +2;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	61bb      	str	r3, [r7, #24]
			char * gb_q=strchr(gb_p,'"');
 8001d60:	2122      	movs	r1, #34	; 0x22
 8001d62:	69b8      	ldr	r0, [r7, #24]
 8001d64:	f000 fa80 	bl	8002268 <strchr>
 8001d68:	6178      	str	r0, [r7, #20]
			strncpy(gb_ssid,gb_p,gb_q-gb_p);
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	463b      	mov	r3, r7
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fa83 	bl	8002282 <strncpy>
			GB_printString1("Connected to Wifi:");
 8001d7c:	480e      	ldr	r0, [pc, #56]	; (8001db8 <GB_esp8266_getAP+0xa0>)
 8001d7e:	f7ff fe6d 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_ssid);
 8001d82:	463b      	mov	r3, r7
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe69 	bl	8001a5c <GB_printString1>
			GB_printString1("\n");
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <GB_esp8266_getAP+0xa4>)
 8001d8c:	f7ff fe66 	bl	8001a5c <GB_printString1>
	{
		//printString0("Error in receiving response (check the command ) or timeout has happened\n");
		GB_printString1(gb_RX_DATA_UART2);
	}

}
 8001d90:	e002      	b.n	8001d98 <GB_esp8266_getAP+0x80>
		GB_printString1(gb_RX_DATA_UART2);
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <GB_esp8266_getAP+0x94>)
 8001d94:	f7ff fe62 	bl	8001a5c <GB_printString1>
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	08002d34 	.word	0x08002d34
 8001da4:	08002c2c 	.word	0x08002c2c
 8001da8:	08002d40 	.word	0x08002d40
 8001dac:	20000194 	.word	0x20000194
 8001db0:	08002d48 	.word	0x08002d48
 8001db4:	08002d5c 	.word	0x08002d5c
 8001db8:	08002d64 	.word	0x08002d64
 8001dbc:	08002c18 	.word	0x08002c18

08001dc0 <GB_esp8266_setAP>:
void GB_esp8266_setAP(const char * gb_ssid, const char * gb_pass)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b090      	sub	sp, #64	; 0x40
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	char gb_setAP[40];
	sprintf(gb_setAP,"AT+CWJAP=\"%s\",\"%s\"\r\n",gb_ssid,gb_pass);
 8001dca:	f107 0008 	add.w	r0, r7, #8
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4929      	ldr	r1, [pc, #164]	; (8001e78 <GB_esp8266_setAP+0xb8>)
 8001dd4:	f000 fa28 	bl	8002228 <siprintf>


	GB_send_command(gb_setAP);
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fe29 	bl	8001a34 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK",16000);
 8001de2:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001de6:	4825      	ldr	r0, [pc, #148]	; (8001e7c <GB_esp8266_setAP+0xbc>)
 8001de8:	f7ff fec2 	bl	8001b70 <GB_RFR_UART2>
 8001dec:	63f8      	str	r0, [r7, #60]	; 0x3c


	if(gb_rsp==1)
 8001dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d109      	bne.n	8001e08 <GB_esp8266_setAP+0x48>
	{

		GB_printString1("WiFi is  connected to :");
 8001df4:	4822      	ldr	r0, [pc, #136]	; (8001e80 <GB_esp8266_setAP+0xc0>)
 8001df6:	f7ff fe31 	bl	8001a5c <GB_printString1>
		GB_printString1(gb_ssid);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fe2e 	bl	8001a5c <GB_printString1>
		GB_printString1("\n");
 8001e00:	4820      	ldr	r0, [pc, #128]	; (8001e84 <GB_esp8266_setAP+0xc4>)
 8001e02:	f7ff fe2b 	bl	8001a5c <GB_printString1>
			if(gb_num==2) GB_printString1("Wrong password \n");
			if(gb_num==3) GB_printString1("cannot find the target AP\n");
			if(gb_num==4) GB_printString1("connection failed \n");
		}
	}
}
 8001e06:	e033      	b.n	8001e70 <GB_esp8266_setAP+0xb0>
		GB_printString1("Error in connecting to :");
 8001e08:	481f      	ldr	r0, [pc, #124]	; (8001e88 <GB_esp8266_setAP+0xc8>)
 8001e0a:	f7ff fe27 	bl	8001a5c <GB_printString1>
		GB_printString1(gb_ssid);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe24 	bl	8001a5c <GB_printString1>
		GB_printString1("\n");
 8001e14:	481b      	ldr	r0, [pc, #108]	; (8001e84 <GB_esp8266_setAP+0xc4>)
 8001e16:	f7ff fe21 	bl	8001a5c <GB_printString1>
		char * gb_p = strstr(gb_RX_DATA_UART2,"+CWJAP:");
 8001e1a:	491c      	ldr	r1, [pc, #112]	; (8001e8c <GB_esp8266_setAP+0xcc>)
 8001e1c:	481c      	ldr	r0, [pc, #112]	; (8001e90 <GB_esp8266_setAP+0xd0>)
 8001e1e:	f000 fa43 	bl	80022a8 <strstr>
 8001e22:	63b8      	str	r0, [r7, #56]	; 0x38
		if(gb_p!=NULL)
 8001e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d022      	beq.n	8001e70 <GB_esp8266_setAP+0xb0>
			gb_p+= strlen("+CWJAP:");
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	3307      	adds	r3, #7
 8001e2e:	63bb      	str	r3, [r7, #56]	; 0x38
			char gb_error_code = *gb_p;
 8001e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			int gb_num = gb_error_code-48;
 8001e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e3c:	3b30      	subs	r3, #48	; 0x30
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
			if(gb_num==1) GB_printString1("Connection timeout \n");
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <GB_esp8266_setAP+0x8c>
 8001e46:	4813      	ldr	r0, [pc, #76]	; (8001e94 <GB_esp8266_setAP+0xd4>)
 8001e48:	f7ff fe08 	bl	8001a5c <GB_printString1>
			if(gb_num==2) GB_printString1("Wrong password \n");
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d102      	bne.n	8001e58 <GB_esp8266_setAP+0x98>
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <GB_esp8266_setAP+0xd8>)
 8001e54:	f7ff fe02 	bl	8001a5c <GB_printString1>
			if(gb_num==3) GB_printString1("cannot find the target AP\n");
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d102      	bne.n	8001e64 <GB_esp8266_setAP+0xa4>
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <GB_esp8266_setAP+0xdc>)
 8001e60:	f7ff fdfc 	bl	8001a5c <GB_printString1>
			if(gb_num==4) GB_printString1("connection failed \n");
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d102      	bne.n	8001e70 <GB_esp8266_setAP+0xb0>
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <GB_esp8266_setAP+0xe0>)
 8001e6c:	f7ff fdf6 	bl	8001a5c <GB_printString1>
}
 8001e70:	bf00      	nop
 8001e72:	3740      	adds	r7, #64	; 0x40
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	08002d78 	.word	0x08002d78
 8001e7c:	08002c2c 	.word	0x08002c2c
 8001e80:	08002d90 	.word	0x08002d90
 8001e84:	08002c18 	.word	0x08002c18
 8001e88:	08002da8 	.word	0x08002da8
 8001e8c:	08002d5c 	.word	0x08002d5c
 8001e90:	20000194 	.word	0x20000194
 8001e94:	08002dc4 	.word	0x08002dc4
 8001e98:	08002ddc 	.word	0x08002ddc
 8001e9c:	08002df0 	.word	0x08002df0
 8001ea0:	08002e0c 	.word	0x08002e0c

08001ea4 <GB_esp8266_IPadress>:
//	int gb_rsp = GB_RFR_UART2("WIFI DISCONNECT",1000);
//	if(gb_rsp==1) GB_printString1("WIFI is  disconnected  \n");
//	if(gb_rsp==0) GB_printString1("WIFI is already disconnected \n");
//}
void GB_esp8266_IPadress()
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0a6      	sub	sp, #152	; 0x98
 8001ea8:	af00      	add	r7, sp, #0

	GB_send_command("AT+CIFSR\r\n");
 8001eaa:	48ac      	ldr	r0, [pc, #688]	; (800215c <GB_esp8266_IPadress+0x2b8>)
 8001eac:	f7ff fdc2 	bl	8001a34 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK",1000);
 8001eb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb4:	48aa      	ldr	r0, [pc, #680]	; (8002160 <GB_esp8266_IPadress+0x2bc>)
 8001eb6:	f7ff fe5b 	bl	8001b70 <GB_RFR_UART2>
 8001eba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	char gb_staip[20],gb_stamac[20],gb_apip[20],gb_apmac[20];
	memset(gb_staip, '\0',sizeof(gb_staip));
 8001ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec2:	2214      	movs	r2, #20
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f9a6 	bl	8002218 <memset>
	memset(gb_stamac, '\0',sizeof(gb_stamac));
 8001ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed0:	2214      	movs	r2, #20
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f99f 	bl	8002218 <memset>
	memset(gb_apip, '\0',sizeof(gb_apip));
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	2214      	movs	r2, #20
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f998 	bl	8002218 <memset>
	memset(gb_apmac, '\0',sizeof(gb_apmac));
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2214      	movs	r2, #20
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f992 	bl	8002218 <memset>
	while(gb_rsp==1)
 8001ef4:	e128      	b.n	8002148 <GB_esp8266_IPadress+0x2a4>
	{
		GB_printString1("IP address is :\n");
 8001ef6:	489b      	ldr	r0, [pc, #620]	; (8002164 <GB_esp8266_IPadress+0x2c0>)
 8001ef8:	f7ff fdb0 	bl	8001a5c <GB_printString1>
		if(gb_CWMODE==1)    //if station mode is selected
 8001efc:	4b9a      	ldr	r3, [pc, #616]	; (8002168 <GB_esp8266_IPadress+0x2c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d13e      	bne.n	8001f82 <GB_esp8266_IPadress+0xde>
		{
			//Station IP
			char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:STAIP");
 8001f04:	4999      	ldr	r1, [pc, #612]	; (800216c <GB_esp8266_IPadress+0x2c8>)
 8001f06:	489a      	ldr	r0, [pc, #616]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 8001f08:	f000 f9ce 	bl	80022a8 <strstr>
 8001f0c:	6638      	str	r0, [r7, #96]	; 0x60
			gb_p += strlen("+CWJAP:STAIP")+2;
 8001f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f10:	330e      	adds	r3, #14
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60
			char * gb_q=strchr(gb_p,'"');
 8001f14:	2122      	movs	r1, #34	; 0x22
 8001f16:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001f18:	f000 f9a6 	bl	8002268 <strchr>
 8001f1c:	65f8      	str	r0, [r7, #92]	; 0x5c
			strncpy(gb_staip,gb_p,gb_q-gb_p);
 8001f1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f9a8 	bl	8002282 <strncpy>
			GB_printString1("IP address of Station is :");
 8001f32:	4890      	ldr	r0, [pc, #576]	; (8002174 <GB_esp8266_IPadress+0x2d0>)
 8001f34:	f7ff fd92 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_staip);
 8001f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fd8d 	bl	8001a5c <GB_printString1>

			// Station MAC
			char * gb_r = strstr(gb_RX_DATA_UART2,"+CIFSR:STAMAC");
 8001f42:	498d      	ldr	r1, [pc, #564]	; (8002178 <GB_esp8266_IPadress+0x2d4>)
 8001f44:	488a      	ldr	r0, [pc, #552]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 8001f46:	f000 f9af 	bl	80022a8 <strstr>
 8001f4a:	65b8      	str	r0, [r7, #88]	; 0x58
			gb_r += strlen("+CIFSR:STAMAC")+2;
 8001f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4e:	330f      	adds	r3, #15
 8001f50:	65bb      	str	r3, [r7, #88]	; 0x58
			char * gb_s =strchr(gb_r,'"');
 8001f52:	2122      	movs	r1, #34	; 0x22
 8001f54:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f56:	f000 f987 	bl	8002268 <strchr>
 8001f5a:	6578      	str	r0, [r7, #84]	; 0x54
			strncpy(gb_stamac,gb_r,gb_s-gb_r);
 8001f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f989 	bl	8002282 <strncpy>
			GB_printString1("\n Mac address of Station is :");
 8001f70:	4882      	ldr	r0, [pc, #520]	; (800217c <GB_esp8266_IPadress+0x2d8>)
 8001f72:	f7ff fd73 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_stamac);
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fd6e 	bl	8001a5c <GB_printString1>
			break;
 8001f80:	e0e8      	b.n	8002154 <GB_esp8266_IPadress+0x2b0>
		}
		if(gb_CWMODE==2)
 8001f82:	4b79      	ldr	r3, [pc, #484]	; (8002168 <GB_esp8266_IPadress+0x2c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d13c      	bne.n	8002004 <GB_esp8266_IPadress+0x160>
		{
			// Soft AP IP
			char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:APIP");
 8001f8a:	497d      	ldr	r1, [pc, #500]	; (8002180 <GB_esp8266_IPadress+0x2dc>)
 8001f8c:	4878      	ldr	r0, [pc, #480]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 8001f8e:	f000 f98b 	bl	80022a8 <strstr>
 8001f92:	6738      	str	r0, [r7, #112]	; 0x70
			gb_p += strlen("+CIFSR:APIP")+2;
 8001f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f96:	330d      	adds	r3, #13
 8001f98:	673b      	str	r3, [r7, #112]	; 0x70
			char * gb_q=strchr(gb_p,'"');
 8001f9a:	2122      	movs	r1, #34	; 0x22
 8001f9c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f9e:	f000 f963 	bl	8002268 <strchr>
 8001fa2:	66f8      	str	r0, [r7, #108]	; 0x6c
			strncpy(gb_apip,gb_p,gb_q-gb_p);
 8001fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f965 	bl	8002282 <strncpy>
			GB_printString1("IP address of SoftAP is :");
 8001fb8:	4872      	ldr	r0, [pc, #456]	; (8002184 <GB_esp8266_IPadress+0x2e0>)
 8001fba:	f7ff fd4f 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_apip);
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fd4a 	bl	8001a5c <GB_printString1>

			// Soft AP MAC
			char * gb_r = strstr(gb_RX_DATA_UART2,"+CIFSR:APMAC");
 8001fc8:	496f      	ldr	r1, [pc, #444]	; (8002188 <GB_esp8266_IPadress+0x2e4>)
 8001fca:	4869      	ldr	r0, [pc, #420]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 8001fcc:	f000 f96c 	bl	80022a8 <strstr>
 8001fd0:	66b8      	str	r0, [r7, #104]	; 0x68
			gb_r += strlen("+CIFSR:APMAC")+2;
 8001fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd4:	330e      	adds	r3, #14
 8001fd6:	66bb      	str	r3, [r7, #104]	; 0x68
			char * gb_s =strchr(gb_r,'"');
 8001fd8:	2122      	movs	r1, #34	; 0x22
 8001fda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001fdc:	f000 f944 	bl	8002268 <strchr>
 8001fe0:	6678      	str	r0, [r7, #100]	; 0x64
			strncpy(gb_apmac,gb_r,gb_s-gb_r);
 8001fe2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f947 	bl	8002282 <strncpy>
			GB_printString1("\n Mac address of SoftAP is :");
 8001ff4:	4865      	ldr	r0, [pc, #404]	; (800218c <GB_esp8266_IPadress+0x2e8>)
 8001ff6:	f7ff fd31 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_apmac);
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd2d 	bl	8001a5c <GB_printString1>
			break;
 8002002:	e0a7      	b.n	8002154 <GB_esp8266_IPadress+0x2b0>
		}
		if(gb_CWMODE==3)
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <GB_esp8266_IPadress+0x2c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	f040 809d 	bne.w	8002148 <GB_esp8266_IPadress+0x2a4>
		{
			//Station IP
			char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:STAIP");
 800200e:	4957      	ldr	r1, [pc, #348]	; (800216c <GB_esp8266_IPadress+0x2c8>)
 8002010:	4857      	ldr	r0, [pc, #348]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 8002012:	f000 f949 	bl	80022a8 <strstr>
 8002016:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			gb_p += strlen("+CWJAP:STAIP")+2;
 800201a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800201e:	330e      	adds	r3, #14
 8002020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			char * gb_q=strchr(gb_p,'"');
 8002024:	2122      	movs	r1, #34	; 0x22
 8002026:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800202a:	f000 f91d 	bl	8002268 <strchr>
 800202e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			strncpy(gb_staip,gb_p,gb_q-gb_p);
 8002032:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	461a      	mov	r2, r3
 800203e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f91b 	bl	8002282 <strncpy>
			GB_printString1("IP address of Station is :");
 800204c:	4849      	ldr	r0, [pc, #292]	; (8002174 <GB_esp8266_IPadress+0x2d0>)
 800204e:	f7ff fd05 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_staip);
 8002052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fd00 	bl	8001a5c <GB_printString1>
			GB_printString1("\n");
 800205c:	484c      	ldr	r0, [pc, #304]	; (8002190 <GB_esp8266_IPadress+0x2ec>)
 800205e:	f7ff fcfd 	bl	8001a5c <GB_printString1>

			// Station MAC
			char * gb_r = strstr(gb_RX_DATA_UART2,"+CIFSR:STAMAC");
 8002062:	4945      	ldr	r1, [pc, #276]	; (8002178 <GB_esp8266_IPadress+0x2d4>)
 8002064:	4842      	ldr	r0, [pc, #264]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 8002066:	f000 f91f 	bl	80022a8 <strstr>
 800206a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			gb_r += strlen("+CIFSR:STAMAC")+2;
 800206e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002072:	330f      	adds	r3, #15
 8002074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			char * gb_s =strchr(gb_r,'"');
 8002078:	2122      	movs	r1, #34	; 0x22
 800207a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800207e:	f000 f8f3 	bl	8002268 <strchr>
 8002082:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			strncpy(gb_stamac,gb_r,gb_s-gb_r);
 8002086:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800208a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	461a      	mov	r2, r3
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f8f1 	bl	8002282 <strncpy>
			GB_printString1("Mac address of Station is :");
 80020a0:	483c      	ldr	r0, [pc, #240]	; (8002194 <GB_esp8266_IPadress+0x2f0>)
 80020a2:	f7ff fcdb 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_stamac);
 80020a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fcd6 	bl	8001a5c <GB_printString1>
			GB_printString1("\n");
 80020b0:	4837      	ldr	r0, [pc, #220]	; (8002190 <GB_esp8266_IPadress+0x2ec>)
 80020b2:	f7ff fcd3 	bl	8001a5c <GB_printString1>


			// Soft AP IP
			char * gb_a = strstr(gb_RX_DATA_UART2,"+CIFSR:APIP");
 80020b6:	4932      	ldr	r1, [pc, #200]	; (8002180 <GB_esp8266_IPadress+0x2dc>)
 80020b8:	482d      	ldr	r0, [pc, #180]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 80020ba:	f000 f8f5 	bl	80022a8 <strstr>
 80020be:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			gb_a += strlen("+CIFSR:APIP")+2;
 80020c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020c6:	330d      	adds	r3, #13
 80020c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			char * gb_b=strchr(gb_a,'"');
 80020cc:	2122      	movs	r1, #34	; 0x22
 80020ce:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80020d2:	f000 f8c9 	bl	8002268 <strchr>
 80020d6:	67f8      	str	r0, [r7, #124]	; 0x7c
			strncpy(gb_apip,gb_a,gb_b-gb_a);
 80020d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80020da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	f107 0318 	add.w	r3, r7, #24
 80020e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f8c9 	bl	8002282 <strncpy>
			GB_printString1("IP address of SoftAP is :");
 80020f0:	4824      	ldr	r0, [pc, #144]	; (8002184 <GB_esp8266_IPadress+0x2e0>)
 80020f2:	f7ff fcb3 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_apip);
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fcae 	bl	8001a5c <GB_printString1>
			GB_printString1("\n");
 8002100:	4823      	ldr	r0, [pc, #140]	; (8002190 <GB_esp8266_IPadress+0x2ec>)
 8002102:	f7ff fcab 	bl	8001a5c <GB_printString1>


			// Soft AP MAC
			char * gb_c = strstr(gb_RX_DATA_UART2,"+CIFSR:APMAC");
 8002106:	4920      	ldr	r1, [pc, #128]	; (8002188 <GB_esp8266_IPadress+0x2e4>)
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <GB_esp8266_IPadress+0x2cc>)
 800210a:	f000 f8cd 	bl	80022a8 <strstr>
 800210e:	67b8      	str	r0, [r7, #120]	; 0x78
			gb_c += strlen("+CIFSR:APMAC")+2;
 8002110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002112:	330e      	adds	r3, #14
 8002114:	67bb      	str	r3, [r7, #120]	; 0x78
			char * gb_d =strchr(gb_c,'"');
 8002116:	2122      	movs	r1, #34	; 0x22
 8002118:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800211a:	f000 f8a5 	bl	8002268 <strchr>
 800211e:	6778      	str	r0, [r7, #116]	; 0x74
			strncpy(gb_apmac,gb_c,gb_d-gb_c);
 8002120:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	461a      	mov	r2, r3
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f8a8 	bl	8002282 <strncpy>
			GB_printString1("Mac address of SoftAP is :");
 8002132:	4819      	ldr	r0, [pc, #100]	; (8002198 <GB_esp8266_IPadress+0x2f4>)
 8002134:	f7ff fc92 	bl	8001a5c <GB_printString1>
			GB_printString1(gb_apmac);
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fc8e 	bl	8001a5c <GB_printString1>
			GB_printString1("\n");
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <GB_esp8266_IPadress+0x2ec>)
 8002142:	f7ff fc8b 	bl	8001a5c <GB_printString1>
			break;
 8002146:	e005      	b.n	8002154 <GB_esp8266_IPadress+0x2b0>
	while(gb_rsp==1)
 8002148:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800214c:	2b01      	cmp	r3, #1
 800214e:	f43f aed2 	beq.w	8001ef6 <GB_esp8266_IPadress+0x52>
		}
	}
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3798      	adds	r7, #152	; 0x98
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	08002e20 	.word	0x08002e20
 8002160:	08002c2c 	.word	0x08002c2c
 8002164:	08002e2c 	.word	0x08002e2c
 8002168:	20000098 	.word	0x20000098
 800216c:	08002e40 	.word	0x08002e40
 8002170:	20000194 	.word	0x20000194
 8002174:	08002e50 	.word	0x08002e50
 8002178:	08002e6c 	.word	0x08002e6c
 800217c:	08002e7c 	.word	0x08002e7c
 8002180:	08002e9c 	.word	0x08002e9c
 8002184:	08002ea8 	.word	0x08002ea8
 8002188:	08002ec4 	.word	0x08002ec4
 800218c:	08002ed4 	.word	0x08002ed4
 8002190:	08002c18 	.word	0x08002c18
 8002194:	08002ef4 	.word	0x08002ef4
 8002198:	08002f10 	.word	0x08002f10

0800219c <GB_esp8266_initialise_client>:
	int gb_rsp = GB_RFR_UART2("OK",4000);
	if(gb_rsp==1) GB_printString1(gb_RX_DATA_UART2);
}

void GB_esp8266_initialise_client()
	{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

		GB_esp8266_getmode();
 80021a0:	f7ff fd2c 	bl	8001bfc <GB_esp8266_getmode>
		GB_esp8266_connectiontype();
 80021a4:	f7ff fd78 	bl	8001c98 <GB_esp8266_connectiontype>
		GB_esp8266_getAP();
 80021a8:	f7ff fdb6 	bl	8001d18 <GB_esp8266_getAP>
	GB_esp8266_setAP("kunal2.4ghz","Mansi5481");
 80021ac:	4903      	ldr	r1, [pc, #12]	; (80021bc <GB_esp8266_initialise_client+0x20>)
 80021ae:	4804      	ldr	r0, [pc, #16]	; (80021c0 <GB_esp8266_initialise_client+0x24>)
 80021b0:	f7ff fe06 	bl	8001dc0 <GB_esp8266_setAP>
//		GB_printString1("\nSETAP Command\n");
		//esp8266_setAP("JioFiber 2.4ghz","Mansi5481");
		// esp8266_setAP("KG","12345678");
		//esp8266_disconnect();
//	GB_esp8266_listAP();
	GB_esp8266_IPadress();
 80021b4:	f7ff fe76 	bl	8001ea4 <GB_esp8266_IPadress>
		//esp8266_rst();
	}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	08002f60 	.word	0x08002f60
 80021c0:	08002f6c 	.word	0x08002f6c

080021c4 <__errno>:
 80021c4:	4b01      	ldr	r3, [pc, #4]	; (80021cc <__errno+0x8>)
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	2000000c 	.word	0x2000000c

080021d0 <__libc_init_array>:
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	2600      	movs	r6, #0
 80021d4:	4d0c      	ldr	r5, [pc, #48]	; (8002208 <__libc_init_array+0x38>)
 80021d6:	4c0d      	ldr	r4, [pc, #52]	; (800220c <__libc_init_array+0x3c>)
 80021d8:	1b64      	subs	r4, r4, r5
 80021da:	10a4      	asrs	r4, r4, #2
 80021dc:	42a6      	cmp	r6, r4
 80021de:	d109      	bne.n	80021f4 <__libc_init_array+0x24>
 80021e0:	f000 fc92 	bl	8002b08 <_init>
 80021e4:	2600      	movs	r6, #0
 80021e6:	4d0a      	ldr	r5, [pc, #40]	; (8002210 <__libc_init_array+0x40>)
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <__libc_init_array+0x44>)
 80021ea:	1b64      	subs	r4, r4, r5
 80021ec:	10a4      	asrs	r4, r4, #2
 80021ee:	42a6      	cmp	r6, r4
 80021f0:	d105      	bne.n	80021fe <__libc_init_array+0x2e>
 80021f2:	bd70      	pop	{r4, r5, r6, pc}
 80021f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f8:	4798      	blx	r3
 80021fa:	3601      	adds	r6, #1
 80021fc:	e7ee      	b.n	80021dc <__libc_init_array+0xc>
 80021fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002202:	4798      	blx	r3
 8002204:	3601      	adds	r6, #1
 8002206:	e7f2      	b.n	80021ee <__libc_init_array+0x1e>
 8002208:	0800308c 	.word	0x0800308c
 800220c:	0800308c 	.word	0x0800308c
 8002210:	0800308c 	.word	0x0800308c
 8002214:	08003090 	.word	0x08003090

08002218 <memset>:
 8002218:	4603      	mov	r3, r0
 800221a:	4402      	add	r2, r0
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <memset+0xa>
 8002220:	4770      	bx	lr
 8002222:	f803 1b01 	strb.w	r1, [r3], #1
 8002226:	e7f9      	b.n	800221c <memset+0x4>

08002228 <siprintf>:
 8002228:	b40e      	push	{r1, r2, r3}
 800222a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800222e:	b500      	push	{lr}
 8002230:	b09c      	sub	sp, #112	; 0x70
 8002232:	ab1d      	add	r3, sp, #116	; 0x74
 8002234:	9002      	str	r0, [sp, #8]
 8002236:	9006      	str	r0, [sp, #24]
 8002238:	9107      	str	r1, [sp, #28]
 800223a:	9104      	str	r1, [sp, #16]
 800223c:	4808      	ldr	r0, [pc, #32]	; (8002260 <siprintf+0x38>)
 800223e:	4909      	ldr	r1, [pc, #36]	; (8002264 <siprintf+0x3c>)
 8002240:	f853 2b04 	ldr.w	r2, [r3], #4
 8002244:	9105      	str	r1, [sp, #20]
 8002246:	6800      	ldr	r0, [r0, #0]
 8002248:	a902      	add	r1, sp, #8
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f000 f89e 	bl	800238c <_svfiprintf_r>
 8002250:	2200      	movs	r2, #0
 8002252:	9b02      	ldr	r3, [sp, #8]
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	b01c      	add	sp, #112	; 0x70
 8002258:	f85d eb04 	ldr.w	lr, [sp], #4
 800225c:	b003      	add	sp, #12
 800225e:	4770      	bx	lr
 8002260:	2000000c 	.word	0x2000000c
 8002264:	ffff0208 	.word	0xffff0208

08002268 <strchr>:
 8002268:	4603      	mov	r3, r0
 800226a:	b2c9      	uxtb	r1, r1
 800226c:	4618      	mov	r0, r3
 800226e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002272:	b112      	cbz	r2, 800227a <strchr+0x12>
 8002274:	428a      	cmp	r2, r1
 8002276:	d1f9      	bne.n	800226c <strchr+0x4>
 8002278:	4770      	bx	lr
 800227a:	2900      	cmp	r1, #0
 800227c:	bf18      	it	ne
 800227e:	2000      	movne	r0, #0
 8002280:	4770      	bx	lr

08002282 <strncpy>:
 8002282:	4603      	mov	r3, r0
 8002284:	b510      	push	{r4, lr}
 8002286:	3901      	subs	r1, #1
 8002288:	b132      	cbz	r2, 8002298 <strncpy+0x16>
 800228a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800228e:	3a01      	subs	r2, #1
 8002290:	f803 4b01 	strb.w	r4, [r3], #1
 8002294:	2c00      	cmp	r4, #0
 8002296:	d1f7      	bne.n	8002288 <strncpy+0x6>
 8002298:	2100      	movs	r1, #0
 800229a:	441a      	add	r2, r3
 800229c:	4293      	cmp	r3, r2
 800229e:	d100      	bne.n	80022a2 <strncpy+0x20>
 80022a0:	bd10      	pop	{r4, pc}
 80022a2:	f803 1b01 	strb.w	r1, [r3], #1
 80022a6:	e7f9      	b.n	800229c <strncpy+0x1a>

080022a8 <strstr>:
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	780c      	ldrb	r4, [r1, #0]
 80022ac:	b164      	cbz	r4, 80022c8 <strstr+0x20>
 80022ae:	4603      	mov	r3, r0
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	1c5e      	adds	r6, r3, #1
 80022b6:	b90a      	cbnz	r2, 80022bc <strstr+0x14>
 80022b8:	4610      	mov	r0, r2
 80022ba:	e005      	b.n	80022c8 <strstr+0x20>
 80022bc:	4294      	cmp	r4, r2
 80022be:	d108      	bne.n	80022d2 <strstr+0x2a>
 80022c0:	460d      	mov	r5, r1
 80022c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80022c6:	b902      	cbnz	r2, 80022ca <strstr+0x22>
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80022ce:	4297      	cmp	r7, r2
 80022d0:	d0f7      	beq.n	80022c2 <strstr+0x1a>
 80022d2:	4633      	mov	r3, r6
 80022d4:	e7ec      	b.n	80022b0 <strstr+0x8>

080022d6 <__ssputs_r>:
 80022d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022da:	688e      	ldr	r6, [r1, #8]
 80022dc:	4682      	mov	sl, r0
 80022de:	429e      	cmp	r6, r3
 80022e0:	460c      	mov	r4, r1
 80022e2:	4690      	mov	r8, r2
 80022e4:	461f      	mov	r7, r3
 80022e6:	d838      	bhi.n	800235a <__ssputs_r+0x84>
 80022e8:	898a      	ldrh	r2, [r1, #12]
 80022ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022ee:	d032      	beq.n	8002356 <__ssputs_r+0x80>
 80022f0:	6825      	ldr	r5, [r4, #0]
 80022f2:	6909      	ldr	r1, [r1, #16]
 80022f4:	3301      	adds	r3, #1
 80022f6:	eba5 0901 	sub.w	r9, r5, r1
 80022fa:	6965      	ldr	r5, [r4, #20]
 80022fc:	444b      	add	r3, r9
 80022fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002302:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002306:	106d      	asrs	r5, r5, #1
 8002308:	429d      	cmp	r5, r3
 800230a:	bf38      	it	cc
 800230c:	461d      	movcc	r5, r3
 800230e:	0553      	lsls	r3, r2, #21
 8002310:	d531      	bpl.n	8002376 <__ssputs_r+0xa0>
 8002312:	4629      	mov	r1, r5
 8002314:	f000 fb52 	bl	80029bc <_malloc_r>
 8002318:	4606      	mov	r6, r0
 800231a:	b950      	cbnz	r0, 8002332 <__ssputs_r+0x5c>
 800231c:	230c      	movs	r3, #12
 800231e:	f04f 30ff 	mov.w	r0, #4294967295
 8002322:	f8ca 3000 	str.w	r3, [sl]
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002332:	464a      	mov	r2, r9
 8002334:	6921      	ldr	r1, [r4, #16]
 8002336:	f000 facd 	bl	80028d4 <memcpy>
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	81a3      	strh	r3, [r4, #12]
 8002346:	6126      	str	r6, [r4, #16]
 8002348:	444e      	add	r6, r9
 800234a:	6026      	str	r6, [r4, #0]
 800234c:	463e      	mov	r6, r7
 800234e:	6165      	str	r5, [r4, #20]
 8002350:	eba5 0509 	sub.w	r5, r5, r9
 8002354:	60a5      	str	r5, [r4, #8]
 8002356:	42be      	cmp	r6, r7
 8002358:	d900      	bls.n	800235c <__ssputs_r+0x86>
 800235a:	463e      	mov	r6, r7
 800235c:	4632      	mov	r2, r6
 800235e:	4641      	mov	r1, r8
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	f000 fac5 	bl	80028f0 <memmove>
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	1b9b      	subs	r3, r3, r6
 800236c:	4432      	add	r2, r6
 800236e:	2000      	movs	r0, #0
 8002370:	60a3      	str	r3, [r4, #8]
 8002372:	6022      	str	r2, [r4, #0]
 8002374:	e7db      	b.n	800232e <__ssputs_r+0x58>
 8002376:	462a      	mov	r2, r5
 8002378:	f000 fb7a 	bl	8002a70 <_realloc_r>
 800237c:	4606      	mov	r6, r0
 800237e:	2800      	cmp	r0, #0
 8002380:	d1e1      	bne.n	8002346 <__ssputs_r+0x70>
 8002382:	4650      	mov	r0, sl
 8002384:	6921      	ldr	r1, [r4, #16]
 8002386:	f000 facd 	bl	8002924 <_free_r>
 800238a:	e7c7      	b.n	800231c <__ssputs_r+0x46>

0800238c <_svfiprintf_r>:
 800238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002390:	4698      	mov	r8, r3
 8002392:	898b      	ldrh	r3, [r1, #12]
 8002394:	4607      	mov	r7, r0
 8002396:	061b      	lsls	r3, r3, #24
 8002398:	460d      	mov	r5, r1
 800239a:	4614      	mov	r4, r2
 800239c:	b09d      	sub	sp, #116	; 0x74
 800239e:	d50e      	bpl.n	80023be <_svfiprintf_r+0x32>
 80023a0:	690b      	ldr	r3, [r1, #16]
 80023a2:	b963      	cbnz	r3, 80023be <_svfiprintf_r+0x32>
 80023a4:	2140      	movs	r1, #64	; 0x40
 80023a6:	f000 fb09 	bl	80029bc <_malloc_r>
 80023aa:	6028      	str	r0, [r5, #0]
 80023ac:	6128      	str	r0, [r5, #16]
 80023ae:	b920      	cbnz	r0, 80023ba <_svfiprintf_r+0x2e>
 80023b0:	230c      	movs	r3, #12
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	e0d1      	b.n	800255e <_svfiprintf_r+0x1d2>
 80023ba:	2340      	movs	r3, #64	; 0x40
 80023bc:	616b      	str	r3, [r5, #20]
 80023be:	2300      	movs	r3, #0
 80023c0:	9309      	str	r3, [sp, #36]	; 0x24
 80023c2:	2320      	movs	r3, #32
 80023c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023c8:	2330      	movs	r3, #48	; 0x30
 80023ca:	f04f 0901 	mov.w	r9, #1
 80023ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80023d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002578 <_svfiprintf_r+0x1ec>
 80023d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023da:	4623      	mov	r3, r4
 80023dc:	469a      	mov	sl, r3
 80023de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023e2:	b10a      	cbz	r2, 80023e8 <_svfiprintf_r+0x5c>
 80023e4:	2a25      	cmp	r2, #37	; 0x25
 80023e6:	d1f9      	bne.n	80023dc <_svfiprintf_r+0x50>
 80023e8:	ebba 0b04 	subs.w	fp, sl, r4
 80023ec:	d00b      	beq.n	8002406 <_svfiprintf_r+0x7a>
 80023ee:	465b      	mov	r3, fp
 80023f0:	4622      	mov	r2, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	4638      	mov	r0, r7
 80023f6:	f7ff ff6e 	bl	80022d6 <__ssputs_r>
 80023fa:	3001      	adds	r0, #1
 80023fc:	f000 80aa 	beq.w	8002554 <_svfiprintf_r+0x1c8>
 8002400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002402:	445a      	add	r2, fp
 8002404:	9209      	str	r2, [sp, #36]	; 0x24
 8002406:	f89a 3000 	ldrb.w	r3, [sl]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80a2 	beq.w	8002554 <_svfiprintf_r+0x1c8>
 8002410:	2300      	movs	r3, #0
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800241a:	f10a 0a01 	add.w	sl, sl, #1
 800241e:	9304      	str	r3, [sp, #16]
 8002420:	9307      	str	r3, [sp, #28]
 8002422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002426:	931a      	str	r3, [sp, #104]	; 0x68
 8002428:	4654      	mov	r4, sl
 800242a:	2205      	movs	r2, #5
 800242c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002430:	4851      	ldr	r0, [pc, #324]	; (8002578 <_svfiprintf_r+0x1ec>)
 8002432:	f000 fa41 	bl	80028b8 <memchr>
 8002436:	9a04      	ldr	r2, [sp, #16]
 8002438:	b9d8      	cbnz	r0, 8002472 <_svfiprintf_r+0xe6>
 800243a:	06d0      	lsls	r0, r2, #27
 800243c:	bf44      	itt	mi
 800243e:	2320      	movmi	r3, #32
 8002440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002444:	0711      	lsls	r1, r2, #28
 8002446:	bf44      	itt	mi
 8002448:	232b      	movmi	r3, #43	; 0x2b
 800244a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800244e:	f89a 3000 	ldrb.w	r3, [sl]
 8002452:	2b2a      	cmp	r3, #42	; 0x2a
 8002454:	d015      	beq.n	8002482 <_svfiprintf_r+0xf6>
 8002456:	4654      	mov	r4, sl
 8002458:	2000      	movs	r0, #0
 800245a:	f04f 0c0a 	mov.w	ip, #10
 800245e:	9a07      	ldr	r2, [sp, #28]
 8002460:	4621      	mov	r1, r4
 8002462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002466:	3b30      	subs	r3, #48	; 0x30
 8002468:	2b09      	cmp	r3, #9
 800246a:	d94e      	bls.n	800250a <_svfiprintf_r+0x17e>
 800246c:	b1b0      	cbz	r0, 800249c <_svfiprintf_r+0x110>
 800246e:	9207      	str	r2, [sp, #28]
 8002470:	e014      	b.n	800249c <_svfiprintf_r+0x110>
 8002472:	eba0 0308 	sub.w	r3, r0, r8
 8002476:	fa09 f303 	lsl.w	r3, r9, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	46a2      	mov	sl, r4
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	e7d2      	b.n	8002428 <_svfiprintf_r+0x9c>
 8002482:	9b03      	ldr	r3, [sp, #12]
 8002484:	1d19      	adds	r1, r3, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	9103      	str	r1, [sp, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	bfbb      	ittet	lt
 800248e:	425b      	neglt	r3, r3
 8002490:	f042 0202 	orrlt.w	r2, r2, #2
 8002494:	9307      	strge	r3, [sp, #28]
 8002496:	9307      	strlt	r3, [sp, #28]
 8002498:	bfb8      	it	lt
 800249a:	9204      	strlt	r2, [sp, #16]
 800249c:	7823      	ldrb	r3, [r4, #0]
 800249e:	2b2e      	cmp	r3, #46	; 0x2e
 80024a0:	d10c      	bne.n	80024bc <_svfiprintf_r+0x130>
 80024a2:	7863      	ldrb	r3, [r4, #1]
 80024a4:	2b2a      	cmp	r3, #42	; 0x2a
 80024a6:	d135      	bne.n	8002514 <_svfiprintf_r+0x188>
 80024a8:	9b03      	ldr	r3, [sp, #12]
 80024aa:	3402      	adds	r4, #2
 80024ac:	1d1a      	adds	r2, r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	9203      	str	r2, [sp, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002588 <_svfiprintf_r+0x1fc>
 80024c0:	2203      	movs	r2, #3
 80024c2:	4650      	mov	r0, sl
 80024c4:	7821      	ldrb	r1, [r4, #0]
 80024c6:	f000 f9f7 	bl	80028b8 <memchr>
 80024ca:	b140      	cbz	r0, 80024de <_svfiprintf_r+0x152>
 80024cc:	2340      	movs	r3, #64	; 0x40
 80024ce:	eba0 000a 	sub.w	r0, r0, sl
 80024d2:	fa03 f000 	lsl.w	r0, r3, r0
 80024d6:	9b04      	ldr	r3, [sp, #16]
 80024d8:	3401      	adds	r4, #1
 80024da:	4303      	orrs	r3, r0
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e2:	2206      	movs	r2, #6
 80024e4:	4825      	ldr	r0, [pc, #148]	; (800257c <_svfiprintf_r+0x1f0>)
 80024e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024ea:	f000 f9e5 	bl	80028b8 <memchr>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d038      	beq.n	8002564 <_svfiprintf_r+0x1d8>
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <_svfiprintf_r+0x1f4>)
 80024f4:	bb1b      	cbnz	r3, 800253e <_svfiprintf_r+0x1b2>
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	3307      	adds	r3, #7
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	3308      	adds	r3, #8
 8002500:	9303      	str	r3, [sp, #12]
 8002502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002504:	4433      	add	r3, r6
 8002506:	9309      	str	r3, [sp, #36]	; 0x24
 8002508:	e767      	b.n	80023da <_svfiprintf_r+0x4e>
 800250a:	460c      	mov	r4, r1
 800250c:	2001      	movs	r0, #1
 800250e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002512:	e7a5      	b.n	8002460 <_svfiprintf_r+0xd4>
 8002514:	2300      	movs	r3, #0
 8002516:	f04f 0c0a 	mov.w	ip, #10
 800251a:	4619      	mov	r1, r3
 800251c:	3401      	adds	r4, #1
 800251e:	9305      	str	r3, [sp, #20]
 8002520:	4620      	mov	r0, r4
 8002522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002526:	3a30      	subs	r2, #48	; 0x30
 8002528:	2a09      	cmp	r2, #9
 800252a:	d903      	bls.n	8002534 <_svfiprintf_r+0x1a8>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0c5      	beq.n	80024bc <_svfiprintf_r+0x130>
 8002530:	9105      	str	r1, [sp, #20]
 8002532:	e7c3      	b.n	80024bc <_svfiprintf_r+0x130>
 8002534:	4604      	mov	r4, r0
 8002536:	2301      	movs	r3, #1
 8002538:	fb0c 2101 	mla	r1, ip, r1, r2
 800253c:	e7f0      	b.n	8002520 <_svfiprintf_r+0x194>
 800253e:	ab03      	add	r3, sp, #12
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	462a      	mov	r2, r5
 8002544:	4638      	mov	r0, r7
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <_svfiprintf_r+0x1f8>)
 8002548:	a904      	add	r1, sp, #16
 800254a:	f3af 8000 	nop.w
 800254e:	1c42      	adds	r2, r0, #1
 8002550:	4606      	mov	r6, r0
 8002552:	d1d6      	bne.n	8002502 <_svfiprintf_r+0x176>
 8002554:	89ab      	ldrh	r3, [r5, #12]
 8002556:	065b      	lsls	r3, r3, #25
 8002558:	f53f af2c 	bmi.w	80023b4 <_svfiprintf_r+0x28>
 800255c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800255e:	b01d      	add	sp, #116	; 0x74
 8002560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002564:	ab03      	add	r3, sp, #12
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	462a      	mov	r2, r5
 800256a:	4638      	mov	r0, r7
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <_svfiprintf_r+0x1f8>)
 800256e:	a904      	add	r1, sp, #16
 8002570:	f000 f87c 	bl	800266c <_printf_i>
 8002574:	e7eb      	b.n	800254e <_svfiprintf_r+0x1c2>
 8002576:	bf00      	nop
 8002578:	08003058 	.word	0x08003058
 800257c:	08003062 	.word	0x08003062
 8002580:	00000000 	.word	0x00000000
 8002584:	080022d7 	.word	0x080022d7
 8002588:	0800305e 	.word	0x0800305e

0800258c <_printf_common>:
 800258c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002590:	4616      	mov	r6, r2
 8002592:	4699      	mov	r9, r3
 8002594:	688a      	ldr	r2, [r1, #8]
 8002596:	690b      	ldr	r3, [r1, #16]
 8002598:	4607      	mov	r7, r0
 800259a:	4293      	cmp	r3, r2
 800259c:	bfb8      	it	lt
 800259e:	4613      	movlt	r3, r2
 80025a0:	6033      	str	r3, [r6, #0]
 80025a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025a6:	460c      	mov	r4, r1
 80025a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025ac:	b10a      	cbz	r2, 80025b2 <_printf_common+0x26>
 80025ae:	3301      	adds	r3, #1
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	0699      	lsls	r1, r3, #26
 80025b6:	bf42      	ittt	mi
 80025b8:	6833      	ldrmi	r3, [r6, #0]
 80025ba:	3302      	addmi	r3, #2
 80025bc:	6033      	strmi	r3, [r6, #0]
 80025be:	6825      	ldr	r5, [r4, #0]
 80025c0:	f015 0506 	ands.w	r5, r5, #6
 80025c4:	d106      	bne.n	80025d4 <_printf_common+0x48>
 80025c6:	f104 0a19 	add.w	sl, r4, #25
 80025ca:	68e3      	ldr	r3, [r4, #12]
 80025cc:	6832      	ldr	r2, [r6, #0]
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	42ab      	cmp	r3, r5
 80025d2:	dc28      	bgt.n	8002626 <_printf_common+0x9a>
 80025d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025d8:	1e13      	subs	r3, r2, #0
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	bf18      	it	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	0692      	lsls	r2, r2, #26
 80025e2:	d42d      	bmi.n	8002640 <_printf_common+0xb4>
 80025e4:	4649      	mov	r1, r9
 80025e6:	4638      	mov	r0, r7
 80025e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ec:	47c0      	blx	r8
 80025ee:	3001      	adds	r0, #1
 80025f0:	d020      	beq.n	8002634 <_printf_common+0xa8>
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	68e5      	ldr	r5, [r4, #12]
 80025f6:	f003 0306 	and.w	r3, r3, #6
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf18      	it	ne
 80025fe:	2500      	movne	r5, #0
 8002600:	6832      	ldr	r2, [r6, #0]
 8002602:	f04f 0600 	mov.w	r6, #0
 8002606:	68a3      	ldr	r3, [r4, #8]
 8002608:	bf08      	it	eq
 800260a:	1aad      	subeq	r5, r5, r2
 800260c:	6922      	ldr	r2, [r4, #16]
 800260e:	bf08      	it	eq
 8002610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002614:	4293      	cmp	r3, r2
 8002616:	bfc4      	itt	gt
 8002618:	1a9b      	subgt	r3, r3, r2
 800261a:	18ed      	addgt	r5, r5, r3
 800261c:	341a      	adds	r4, #26
 800261e:	42b5      	cmp	r5, r6
 8002620:	d11a      	bne.n	8002658 <_printf_common+0xcc>
 8002622:	2000      	movs	r0, #0
 8002624:	e008      	b.n	8002638 <_printf_common+0xac>
 8002626:	2301      	movs	r3, #1
 8002628:	4652      	mov	r2, sl
 800262a:	4649      	mov	r1, r9
 800262c:	4638      	mov	r0, r7
 800262e:	47c0      	blx	r8
 8002630:	3001      	adds	r0, #1
 8002632:	d103      	bne.n	800263c <_printf_common+0xb0>
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263c:	3501      	adds	r5, #1
 800263e:	e7c4      	b.n	80025ca <_printf_common+0x3e>
 8002640:	2030      	movs	r0, #48	; 0x30
 8002642:	18e1      	adds	r1, r4, r3
 8002644:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800264e:	4422      	add	r2, r4
 8002650:	3302      	adds	r3, #2
 8002652:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002656:	e7c5      	b.n	80025e4 <_printf_common+0x58>
 8002658:	2301      	movs	r3, #1
 800265a:	4622      	mov	r2, r4
 800265c:	4649      	mov	r1, r9
 800265e:	4638      	mov	r0, r7
 8002660:	47c0      	blx	r8
 8002662:	3001      	adds	r0, #1
 8002664:	d0e6      	beq.n	8002634 <_printf_common+0xa8>
 8002666:	3601      	adds	r6, #1
 8002668:	e7d9      	b.n	800261e <_printf_common+0x92>
	...

0800266c <_printf_i>:
 800266c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002670:	460c      	mov	r4, r1
 8002672:	7e27      	ldrb	r7, [r4, #24]
 8002674:	4691      	mov	r9, r2
 8002676:	2f78      	cmp	r7, #120	; 0x78
 8002678:	4680      	mov	r8, r0
 800267a:	469a      	mov	sl, r3
 800267c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800267e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002682:	d807      	bhi.n	8002694 <_printf_i+0x28>
 8002684:	2f62      	cmp	r7, #98	; 0x62
 8002686:	d80a      	bhi.n	800269e <_printf_i+0x32>
 8002688:	2f00      	cmp	r7, #0
 800268a:	f000 80d9 	beq.w	8002840 <_printf_i+0x1d4>
 800268e:	2f58      	cmp	r7, #88	; 0x58
 8002690:	f000 80a4 	beq.w	80027dc <_printf_i+0x170>
 8002694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800269c:	e03a      	b.n	8002714 <_printf_i+0xa8>
 800269e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026a2:	2b15      	cmp	r3, #21
 80026a4:	d8f6      	bhi.n	8002694 <_printf_i+0x28>
 80026a6:	a001      	add	r0, pc, #4	; (adr r0, 80026ac <_printf_i+0x40>)
 80026a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80026ac:	08002705 	.word	0x08002705
 80026b0:	08002719 	.word	0x08002719
 80026b4:	08002695 	.word	0x08002695
 80026b8:	08002695 	.word	0x08002695
 80026bc:	08002695 	.word	0x08002695
 80026c0:	08002695 	.word	0x08002695
 80026c4:	08002719 	.word	0x08002719
 80026c8:	08002695 	.word	0x08002695
 80026cc:	08002695 	.word	0x08002695
 80026d0:	08002695 	.word	0x08002695
 80026d4:	08002695 	.word	0x08002695
 80026d8:	08002827 	.word	0x08002827
 80026dc:	08002749 	.word	0x08002749
 80026e0:	08002809 	.word	0x08002809
 80026e4:	08002695 	.word	0x08002695
 80026e8:	08002695 	.word	0x08002695
 80026ec:	08002849 	.word	0x08002849
 80026f0:	08002695 	.word	0x08002695
 80026f4:	08002749 	.word	0x08002749
 80026f8:	08002695 	.word	0x08002695
 80026fc:	08002695 	.word	0x08002695
 8002700:	08002811 	.word	0x08002811
 8002704:	680b      	ldr	r3, [r1, #0]
 8002706:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	600a      	str	r2, [r1, #0]
 8002710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002714:	2301      	movs	r3, #1
 8002716:	e0a4      	b.n	8002862 <_printf_i+0x1f6>
 8002718:	6825      	ldr	r5, [r4, #0]
 800271a:	6808      	ldr	r0, [r1, #0]
 800271c:	062e      	lsls	r6, r5, #24
 800271e:	f100 0304 	add.w	r3, r0, #4
 8002722:	d50a      	bpl.n	800273a <_printf_i+0xce>
 8002724:	6805      	ldr	r5, [r0, #0]
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	2d00      	cmp	r5, #0
 800272a:	da03      	bge.n	8002734 <_printf_i+0xc8>
 800272c:	232d      	movs	r3, #45	; 0x2d
 800272e:	426d      	negs	r5, r5
 8002730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002734:	230a      	movs	r3, #10
 8002736:	485e      	ldr	r0, [pc, #376]	; (80028b0 <_printf_i+0x244>)
 8002738:	e019      	b.n	800276e <_printf_i+0x102>
 800273a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800273e:	6805      	ldr	r5, [r0, #0]
 8002740:	600b      	str	r3, [r1, #0]
 8002742:	bf18      	it	ne
 8002744:	b22d      	sxthne	r5, r5
 8002746:	e7ef      	b.n	8002728 <_printf_i+0xbc>
 8002748:	680b      	ldr	r3, [r1, #0]
 800274a:	6825      	ldr	r5, [r4, #0]
 800274c:	1d18      	adds	r0, r3, #4
 800274e:	6008      	str	r0, [r1, #0]
 8002750:	0628      	lsls	r0, r5, #24
 8002752:	d501      	bpl.n	8002758 <_printf_i+0xec>
 8002754:	681d      	ldr	r5, [r3, #0]
 8002756:	e002      	b.n	800275e <_printf_i+0xf2>
 8002758:	0669      	lsls	r1, r5, #25
 800275a:	d5fb      	bpl.n	8002754 <_printf_i+0xe8>
 800275c:	881d      	ldrh	r5, [r3, #0]
 800275e:	2f6f      	cmp	r7, #111	; 0x6f
 8002760:	bf0c      	ite	eq
 8002762:	2308      	moveq	r3, #8
 8002764:	230a      	movne	r3, #10
 8002766:	4852      	ldr	r0, [pc, #328]	; (80028b0 <_printf_i+0x244>)
 8002768:	2100      	movs	r1, #0
 800276a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800276e:	6866      	ldr	r6, [r4, #4]
 8002770:	2e00      	cmp	r6, #0
 8002772:	bfa8      	it	ge
 8002774:	6821      	ldrge	r1, [r4, #0]
 8002776:	60a6      	str	r6, [r4, #8]
 8002778:	bfa4      	itt	ge
 800277a:	f021 0104 	bicge.w	r1, r1, #4
 800277e:	6021      	strge	r1, [r4, #0]
 8002780:	b90d      	cbnz	r5, 8002786 <_printf_i+0x11a>
 8002782:	2e00      	cmp	r6, #0
 8002784:	d04d      	beq.n	8002822 <_printf_i+0x1b6>
 8002786:	4616      	mov	r6, r2
 8002788:	fbb5 f1f3 	udiv	r1, r5, r3
 800278c:	fb03 5711 	mls	r7, r3, r1, r5
 8002790:	5dc7      	ldrb	r7, [r0, r7]
 8002792:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002796:	462f      	mov	r7, r5
 8002798:	42bb      	cmp	r3, r7
 800279a:	460d      	mov	r5, r1
 800279c:	d9f4      	bls.n	8002788 <_printf_i+0x11c>
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d10b      	bne.n	80027ba <_printf_i+0x14e>
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	07df      	lsls	r7, r3, #31
 80027a6:	d508      	bpl.n	80027ba <_printf_i+0x14e>
 80027a8:	6923      	ldr	r3, [r4, #16]
 80027aa:	6861      	ldr	r1, [r4, #4]
 80027ac:	4299      	cmp	r1, r3
 80027ae:	bfde      	ittt	le
 80027b0:	2330      	movle	r3, #48	; 0x30
 80027b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80027ba:	1b92      	subs	r2, r2, r6
 80027bc:	6122      	str	r2, [r4, #16]
 80027be:	464b      	mov	r3, r9
 80027c0:	4621      	mov	r1, r4
 80027c2:	4640      	mov	r0, r8
 80027c4:	f8cd a000 	str.w	sl, [sp]
 80027c8:	aa03      	add	r2, sp, #12
 80027ca:	f7ff fedf 	bl	800258c <_printf_common>
 80027ce:	3001      	adds	r0, #1
 80027d0:	d14c      	bne.n	800286c <_printf_i+0x200>
 80027d2:	f04f 30ff 	mov.w	r0, #4294967295
 80027d6:	b004      	add	sp, #16
 80027d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027dc:	4834      	ldr	r0, [pc, #208]	; (80028b0 <_printf_i+0x244>)
 80027de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027e2:	680e      	ldr	r6, [r1, #0]
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80027ea:	061f      	lsls	r7, r3, #24
 80027ec:	600e      	str	r6, [r1, #0]
 80027ee:	d514      	bpl.n	800281a <_printf_i+0x1ae>
 80027f0:	07d9      	lsls	r1, r3, #31
 80027f2:	bf44      	itt	mi
 80027f4:	f043 0320 	orrmi.w	r3, r3, #32
 80027f8:	6023      	strmi	r3, [r4, #0]
 80027fa:	b91d      	cbnz	r5, 8002804 <_printf_i+0x198>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	f023 0320 	bic.w	r3, r3, #32
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	2310      	movs	r3, #16
 8002806:	e7af      	b.n	8002768 <_printf_i+0xfc>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	f043 0320 	orr.w	r3, r3, #32
 800280e:	6023      	str	r3, [r4, #0]
 8002810:	2378      	movs	r3, #120	; 0x78
 8002812:	4828      	ldr	r0, [pc, #160]	; (80028b4 <_printf_i+0x248>)
 8002814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002818:	e7e3      	b.n	80027e2 <_printf_i+0x176>
 800281a:	065e      	lsls	r6, r3, #25
 800281c:	bf48      	it	mi
 800281e:	b2ad      	uxthmi	r5, r5
 8002820:	e7e6      	b.n	80027f0 <_printf_i+0x184>
 8002822:	4616      	mov	r6, r2
 8002824:	e7bb      	b.n	800279e <_printf_i+0x132>
 8002826:	680b      	ldr	r3, [r1, #0]
 8002828:	6826      	ldr	r6, [r4, #0]
 800282a:	1d1d      	adds	r5, r3, #4
 800282c:	6960      	ldr	r0, [r4, #20]
 800282e:	600d      	str	r5, [r1, #0]
 8002830:	0635      	lsls	r5, r6, #24
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	d501      	bpl.n	800283a <_printf_i+0x1ce>
 8002836:	6018      	str	r0, [r3, #0]
 8002838:	e002      	b.n	8002840 <_printf_i+0x1d4>
 800283a:	0671      	lsls	r1, r6, #25
 800283c:	d5fb      	bpl.n	8002836 <_printf_i+0x1ca>
 800283e:	8018      	strh	r0, [r3, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	4616      	mov	r6, r2
 8002844:	6123      	str	r3, [r4, #16]
 8002846:	e7ba      	b.n	80027be <_printf_i+0x152>
 8002848:	680b      	ldr	r3, [r1, #0]
 800284a:	1d1a      	adds	r2, r3, #4
 800284c:	600a      	str	r2, [r1, #0]
 800284e:	681e      	ldr	r6, [r3, #0]
 8002850:	2100      	movs	r1, #0
 8002852:	4630      	mov	r0, r6
 8002854:	6862      	ldr	r2, [r4, #4]
 8002856:	f000 f82f 	bl	80028b8 <memchr>
 800285a:	b108      	cbz	r0, 8002860 <_printf_i+0x1f4>
 800285c:	1b80      	subs	r0, r0, r6
 800285e:	6060      	str	r0, [r4, #4]
 8002860:	6863      	ldr	r3, [r4, #4]
 8002862:	6123      	str	r3, [r4, #16]
 8002864:	2300      	movs	r3, #0
 8002866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800286a:	e7a8      	b.n	80027be <_printf_i+0x152>
 800286c:	4632      	mov	r2, r6
 800286e:	4649      	mov	r1, r9
 8002870:	4640      	mov	r0, r8
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	47d0      	blx	sl
 8002876:	3001      	adds	r0, #1
 8002878:	d0ab      	beq.n	80027d2 <_printf_i+0x166>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	079b      	lsls	r3, r3, #30
 800287e:	d413      	bmi.n	80028a8 <_printf_i+0x23c>
 8002880:	68e0      	ldr	r0, [r4, #12]
 8002882:	9b03      	ldr	r3, [sp, #12]
 8002884:	4298      	cmp	r0, r3
 8002886:	bfb8      	it	lt
 8002888:	4618      	movlt	r0, r3
 800288a:	e7a4      	b.n	80027d6 <_printf_i+0x16a>
 800288c:	2301      	movs	r3, #1
 800288e:	4632      	mov	r2, r6
 8002890:	4649      	mov	r1, r9
 8002892:	4640      	mov	r0, r8
 8002894:	47d0      	blx	sl
 8002896:	3001      	adds	r0, #1
 8002898:	d09b      	beq.n	80027d2 <_printf_i+0x166>
 800289a:	3501      	adds	r5, #1
 800289c:	68e3      	ldr	r3, [r4, #12]
 800289e:	9903      	ldr	r1, [sp, #12]
 80028a0:	1a5b      	subs	r3, r3, r1
 80028a2:	42ab      	cmp	r3, r5
 80028a4:	dcf2      	bgt.n	800288c <_printf_i+0x220>
 80028a6:	e7eb      	b.n	8002880 <_printf_i+0x214>
 80028a8:	2500      	movs	r5, #0
 80028aa:	f104 0619 	add.w	r6, r4, #25
 80028ae:	e7f5      	b.n	800289c <_printf_i+0x230>
 80028b0:	08003069 	.word	0x08003069
 80028b4:	0800307a 	.word	0x0800307a

080028b8 <memchr>:
 80028b8:	4603      	mov	r3, r0
 80028ba:	b510      	push	{r4, lr}
 80028bc:	b2c9      	uxtb	r1, r1
 80028be:	4402      	add	r2, r0
 80028c0:	4293      	cmp	r3, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	d101      	bne.n	80028ca <memchr+0x12>
 80028c6:	2000      	movs	r0, #0
 80028c8:	e003      	b.n	80028d2 <memchr+0x1a>
 80028ca:	7804      	ldrb	r4, [r0, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	428c      	cmp	r4, r1
 80028d0:	d1f6      	bne.n	80028c0 <memchr+0x8>
 80028d2:	bd10      	pop	{r4, pc}

080028d4 <memcpy>:
 80028d4:	440a      	add	r2, r1
 80028d6:	4291      	cmp	r1, r2
 80028d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028dc:	d100      	bne.n	80028e0 <memcpy+0xc>
 80028de:	4770      	bx	lr
 80028e0:	b510      	push	{r4, lr}
 80028e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028e6:	4291      	cmp	r1, r2
 80028e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028ec:	d1f9      	bne.n	80028e2 <memcpy+0xe>
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <memmove>:
 80028f0:	4288      	cmp	r0, r1
 80028f2:	b510      	push	{r4, lr}
 80028f4:	eb01 0402 	add.w	r4, r1, r2
 80028f8:	d902      	bls.n	8002900 <memmove+0x10>
 80028fa:	4284      	cmp	r4, r0
 80028fc:	4623      	mov	r3, r4
 80028fe:	d807      	bhi.n	8002910 <memmove+0x20>
 8002900:	1e43      	subs	r3, r0, #1
 8002902:	42a1      	cmp	r1, r4
 8002904:	d008      	beq.n	8002918 <memmove+0x28>
 8002906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800290a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800290e:	e7f8      	b.n	8002902 <memmove+0x12>
 8002910:	4601      	mov	r1, r0
 8002912:	4402      	add	r2, r0
 8002914:	428a      	cmp	r2, r1
 8002916:	d100      	bne.n	800291a <memmove+0x2a>
 8002918:	bd10      	pop	{r4, pc}
 800291a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800291e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002922:	e7f7      	b.n	8002914 <memmove+0x24>

08002924 <_free_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4605      	mov	r5, r0
 8002928:	2900      	cmp	r1, #0
 800292a:	d043      	beq.n	80029b4 <_free_r+0x90>
 800292c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002930:	1f0c      	subs	r4, r1, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	bfb8      	it	lt
 8002936:	18e4      	addlt	r4, r4, r3
 8002938:	f000 f8d0 	bl	8002adc <__malloc_lock>
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <_free_r+0x94>)
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	4610      	mov	r0, r2
 8002942:	b933      	cbnz	r3, 8002952 <_free_r+0x2e>
 8002944:	6063      	str	r3, [r4, #4]
 8002946:	6014      	str	r4, [r2, #0]
 8002948:	4628      	mov	r0, r5
 800294a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800294e:	f000 b8cb 	b.w	8002ae8 <__malloc_unlock>
 8002952:	42a3      	cmp	r3, r4
 8002954:	d90a      	bls.n	800296c <_free_r+0x48>
 8002956:	6821      	ldr	r1, [r4, #0]
 8002958:	1862      	adds	r2, r4, r1
 800295a:	4293      	cmp	r3, r2
 800295c:	bf01      	itttt	eq
 800295e:	681a      	ldreq	r2, [r3, #0]
 8002960:	685b      	ldreq	r3, [r3, #4]
 8002962:	1852      	addeq	r2, r2, r1
 8002964:	6022      	streq	r2, [r4, #0]
 8002966:	6063      	str	r3, [r4, #4]
 8002968:	6004      	str	r4, [r0, #0]
 800296a:	e7ed      	b.n	8002948 <_free_r+0x24>
 800296c:	461a      	mov	r2, r3
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	b10b      	cbz	r3, 8002976 <_free_r+0x52>
 8002972:	42a3      	cmp	r3, r4
 8002974:	d9fa      	bls.n	800296c <_free_r+0x48>
 8002976:	6811      	ldr	r1, [r2, #0]
 8002978:	1850      	adds	r0, r2, r1
 800297a:	42a0      	cmp	r0, r4
 800297c:	d10b      	bne.n	8002996 <_free_r+0x72>
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	4401      	add	r1, r0
 8002982:	1850      	adds	r0, r2, r1
 8002984:	4283      	cmp	r3, r0
 8002986:	6011      	str	r1, [r2, #0]
 8002988:	d1de      	bne.n	8002948 <_free_r+0x24>
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4401      	add	r1, r0
 8002990:	6011      	str	r1, [r2, #0]
 8002992:	6053      	str	r3, [r2, #4]
 8002994:	e7d8      	b.n	8002948 <_free_r+0x24>
 8002996:	d902      	bls.n	800299e <_free_r+0x7a>
 8002998:	230c      	movs	r3, #12
 800299a:	602b      	str	r3, [r5, #0]
 800299c:	e7d4      	b.n	8002948 <_free_r+0x24>
 800299e:	6820      	ldr	r0, [r4, #0]
 80029a0:	1821      	adds	r1, r4, r0
 80029a2:	428b      	cmp	r3, r1
 80029a4:	bf01      	itttt	eq
 80029a6:	6819      	ldreq	r1, [r3, #0]
 80029a8:	685b      	ldreq	r3, [r3, #4]
 80029aa:	1809      	addeq	r1, r1, r0
 80029ac:	6021      	streq	r1, [r4, #0]
 80029ae:	6063      	str	r3, [r4, #4]
 80029b0:	6054      	str	r4, [r2, #4]
 80029b2:	e7c9      	b.n	8002948 <_free_r+0x24>
 80029b4:	bd38      	pop	{r3, r4, r5, pc}
 80029b6:	bf00      	nop
 80029b8:	2000009c 	.word	0x2000009c

080029bc <_malloc_r>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	1ccd      	adds	r5, r1, #3
 80029c0:	f025 0503 	bic.w	r5, r5, #3
 80029c4:	3508      	adds	r5, #8
 80029c6:	2d0c      	cmp	r5, #12
 80029c8:	bf38      	it	cc
 80029ca:	250c      	movcc	r5, #12
 80029cc:	2d00      	cmp	r5, #0
 80029ce:	4606      	mov	r6, r0
 80029d0:	db01      	blt.n	80029d6 <_malloc_r+0x1a>
 80029d2:	42a9      	cmp	r1, r5
 80029d4:	d903      	bls.n	80029de <_malloc_r+0x22>
 80029d6:	230c      	movs	r3, #12
 80029d8:	6033      	str	r3, [r6, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029de:	f000 f87d 	bl	8002adc <__malloc_lock>
 80029e2:	4921      	ldr	r1, [pc, #132]	; (8002a68 <_malloc_r+0xac>)
 80029e4:	680a      	ldr	r2, [r1, #0]
 80029e6:	4614      	mov	r4, r2
 80029e8:	b99c      	cbnz	r4, 8002a12 <_malloc_r+0x56>
 80029ea:	4f20      	ldr	r7, [pc, #128]	; (8002a6c <_malloc_r+0xb0>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b923      	cbnz	r3, 80029fa <_malloc_r+0x3e>
 80029f0:	4621      	mov	r1, r4
 80029f2:	4630      	mov	r0, r6
 80029f4:	f000 f862 	bl	8002abc <_sbrk_r>
 80029f8:	6038      	str	r0, [r7, #0]
 80029fa:	4629      	mov	r1, r5
 80029fc:	4630      	mov	r0, r6
 80029fe:	f000 f85d 	bl	8002abc <_sbrk_r>
 8002a02:	1c43      	adds	r3, r0, #1
 8002a04:	d123      	bne.n	8002a4e <_malloc_r+0x92>
 8002a06:	230c      	movs	r3, #12
 8002a08:	4630      	mov	r0, r6
 8002a0a:	6033      	str	r3, [r6, #0]
 8002a0c:	f000 f86c 	bl	8002ae8 <__malloc_unlock>
 8002a10:	e7e3      	b.n	80029da <_malloc_r+0x1e>
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	1b5b      	subs	r3, r3, r5
 8002a16:	d417      	bmi.n	8002a48 <_malloc_r+0x8c>
 8002a18:	2b0b      	cmp	r3, #11
 8002a1a:	d903      	bls.n	8002a24 <_malloc_r+0x68>
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	441c      	add	r4, r3
 8002a20:	6025      	str	r5, [r4, #0]
 8002a22:	e004      	b.n	8002a2e <_malloc_r+0x72>
 8002a24:	6863      	ldr	r3, [r4, #4]
 8002a26:	42a2      	cmp	r2, r4
 8002a28:	bf0c      	ite	eq
 8002a2a:	600b      	streq	r3, [r1, #0]
 8002a2c:	6053      	strne	r3, [r2, #4]
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f000 f85a 	bl	8002ae8 <__malloc_unlock>
 8002a34:	f104 000b 	add.w	r0, r4, #11
 8002a38:	1d23      	adds	r3, r4, #4
 8002a3a:	f020 0007 	bic.w	r0, r0, #7
 8002a3e:	1ac2      	subs	r2, r0, r3
 8002a40:	d0cc      	beq.n	80029dc <_malloc_r+0x20>
 8002a42:	1a1b      	subs	r3, r3, r0
 8002a44:	50a3      	str	r3, [r4, r2]
 8002a46:	e7c9      	b.n	80029dc <_malloc_r+0x20>
 8002a48:	4622      	mov	r2, r4
 8002a4a:	6864      	ldr	r4, [r4, #4]
 8002a4c:	e7cc      	b.n	80029e8 <_malloc_r+0x2c>
 8002a4e:	1cc4      	adds	r4, r0, #3
 8002a50:	f024 0403 	bic.w	r4, r4, #3
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d0e3      	beq.n	8002a20 <_malloc_r+0x64>
 8002a58:	1a21      	subs	r1, r4, r0
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	f000 f82e 	bl	8002abc <_sbrk_r>
 8002a60:	3001      	adds	r0, #1
 8002a62:	d1dd      	bne.n	8002a20 <_malloc_r+0x64>
 8002a64:	e7cf      	b.n	8002a06 <_malloc_r+0x4a>
 8002a66:	bf00      	nop
 8002a68:	2000009c 	.word	0x2000009c
 8002a6c:	200000a0 	.word	0x200000a0

08002a70 <_realloc_r>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	4607      	mov	r7, r0
 8002a74:	4614      	mov	r4, r2
 8002a76:	460e      	mov	r6, r1
 8002a78:	b921      	cbnz	r1, 8002a84 <_realloc_r+0x14>
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a80:	f7ff bf9c 	b.w	80029bc <_malloc_r>
 8002a84:	b922      	cbnz	r2, 8002a90 <_realloc_r+0x20>
 8002a86:	f7ff ff4d 	bl	8002924 <_free_r>
 8002a8a:	4625      	mov	r5, r4
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a90:	f000 f830 	bl	8002af4 <_malloc_usable_size_r>
 8002a94:	42a0      	cmp	r0, r4
 8002a96:	d20f      	bcs.n	8002ab8 <_realloc_r+0x48>
 8002a98:	4621      	mov	r1, r4
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	f7ff ff8e 	bl	80029bc <_malloc_r>
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d0f2      	beq.n	8002a8c <_realloc_r+0x1c>
 8002aa6:	4631      	mov	r1, r6
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	f7ff ff13 	bl	80028d4 <memcpy>
 8002aae:	4631      	mov	r1, r6
 8002ab0:	4638      	mov	r0, r7
 8002ab2:	f7ff ff37 	bl	8002924 <_free_r>
 8002ab6:	e7e9      	b.n	8002a8c <_realloc_r+0x1c>
 8002ab8:	4635      	mov	r5, r6
 8002aba:	e7e7      	b.n	8002a8c <_realloc_r+0x1c>

08002abc <_sbrk_r>:
 8002abc:	b538      	push	{r3, r4, r5, lr}
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4d05      	ldr	r5, [pc, #20]	; (8002ad8 <_sbrk_r+0x1c>)
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	f7fd fd80 	bl	80005cc <_sbrk>
 8002acc:	1c43      	adds	r3, r0, #1
 8002ace:	d102      	bne.n	8002ad6 <_sbrk_r+0x1a>
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	b103      	cbz	r3, 8002ad6 <_sbrk_r+0x1a>
 8002ad4:	6023      	str	r3, [r4, #0]
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
 8002ad8:	20000394 	.word	0x20000394

08002adc <__malloc_lock>:
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <__malloc_lock+0x8>)
 8002ade:	f000 b811 	b.w	8002b04 <__retarget_lock_acquire_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	2000039c 	.word	0x2000039c

08002ae8 <__malloc_unlock>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__malloc_unlock+0x8>)
 8002aea:	f000 b80c 	b.w	8002b06 <__retarget_lock_release_recursive>
 8002aee:	bf00      	nop
 8002af0:	2000039c 	.word	0x2000039c

08002af4 <_malloc_usable_size_r>:
 8002af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af8:	1f18      	subs	r0, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bfbc      	itt	lt
 8002afe:	580b      	ldrlt	r3, [r1, r0]
 8002b00:	18c0      	addlt	r0, r0, r3
 8002b02:	4770      	bx	lr

08002b04 <__retarget_lock_acquire_recursive>:
 8002b04:	4770      	bx	lr

08002b06 <__retarget_lock_release_recursive>:
 8002b06:	4770      	bx	lr

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
