
GB_STM32F103_ESP_Client_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002844  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002d38  08002d38  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d38  08002d38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000074  08002db4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08002db4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001878  00000000  00000000  00028598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  0002a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017046  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000754a  00000000  00000000  00041b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828d8  00000000  00000000  00049098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e60  00000000  00000000  000cb9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002938 	.word	0x08002938

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002938 	.word	0x08002938

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	2b00      	cmp	r3, #0
 800016c:	db0b      	blt.n	8000186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 021f 	and.w	r2, r3, #31
 8000174:	4906      	ldr	r1, [pc, #24]	; (8000190 <__NVIC_EnableIRQ+0x34>)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	2001      	movs	r0, #1
 800017e:	fa00 f202 	lsl.w	r2, r0, r2
 8000182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	e000e100 	.word	0xe000e100

08000194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	db0a      	blt.n	80001be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	490c      	ldr	r1, [pc, #48]	; (80001e0 <__NVIC_SetPriority+0x4c>)
 80001ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b2:	0112      	lsls	r2, r2, #4
 80001b4:	b2d2      	uxtb	r2, r2
 80001b6:	440b      	add	r3, r1
 80001b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001bc:	e00a      	b.n	80001d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4908      	ldr	r1, [pc, #32]	; (80001e4 <__NVIC_SetPriority+0x50>)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f003 030f 	and.w	r3, r3, #15
 80001ca:	3b04      	subs	r3, #4
 80001cc:	0112      	lsls	r2, r2, #4
 80001ce:	b2d2      	uxtb	r2, r2
 80001d0:	440b      	add	r3, r1
 80001d2:	761a      	strb	r2, [r3, #24]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 fa3c 	bl	8000668 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f82a 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f4:	f000 f8c0 	bl	8000378 <MX_GPIO_Init>
  //Terminal
  MX_USART1_UART_Init();
 80001f8:	f000 f86a 	bl	80002d0 <MX_USART1_UART_Init>

  //ESP8266
  MX_USART2_UART_Init();
 80001fc:	f000 f892 	bl	8000324 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable RXNE interrupts on USART2 SIDE
 	USART2->CR1 |= USART_CR1_RXNEIE;
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <main+0x50>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <main+0x50>)
 8000206:	f043 0320 	orr.w	r3, r3, #32
 800020a:	60d3      	str	r3, [r2, #12]
  __NVIC_EnableIRQ(USART2_IRQn);
 800020c:	2026      	movs	r0, #38	; 0x26
 800020e:	f7ff ffa5 	bl	800015c <__NVIC_EnableIRQ>
  __NVIC_SetPriority (USART2_IRQn, 1);
 8000212:	2101      	movs	r1, #1
 8000214:	2026      	movs	r0, #38	; 0x26
 8000216:	f7ff ffbd 	bl	8000194 <__NVIC_SetPriority>
  //enable RXNE interrupts on USART1 SIDE
//	USART1->CR1 |= USART_CR1_RXNEIE;
//__NVIC_EnableIRQ(USART1_IRQn);
//__NVIC_SetPriority (USART1_IRQn, 1);

  HAL_UART_Transmit(&huart1,(uint8_t *)"\nKunal",6, 100);
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	2206      	movs	r2, #6
 800021e:	4907      	ldr	r1, [pc, #28]	; (800023c <main+0x54>)
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <main+0x58>)
 8000222:	f001 f97c 	bl	800151e <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart1,&dec,1, 100);
 8000226:	2364      	movs	r3, #100	; 0x64
 8000228:	2201      	movs	r2, #1
 800022a:	4906      	ldr	r1, [pc, #24]	; (8000244 <main+0x5c>)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <main+0x58>)
 800022e:	f001 f976 	bl	800151e <HAL_UART_Transmit>

 // HAL_UART_Transmit(&huart2,(uint8_t *)"AT+CIPMUX?\r\n",14, 100);
  //GB_getstring_UART2();
  GB_esp8266_initialise_client();
 8000232:	f001 fecb 	bl	8001fcc <GB_esp8266_initialise_client>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	e7fe      	b.n	8000236 <main+0x4e>
 8000238:	40004400 	.word	0x40004400
 800023c:	08002950 	.word	0x08002950
 8000240:	200000a8 	.word	0x200000a8
 8000244:	20000000 	.word	0x20000000

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fef6 	bl	8002048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000286:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fcdd 	bl	8000c50 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800029c:	f000 f88e 	bl	80003bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2101      	movs	r1, #1
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 ff49 	bl	8001150 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002c4:	f000 f87a 	bl	80003bc <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3740      	adds	r7, #64	; 0x40
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_USART1_UART_Init+0x50>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000308:	f001 f8bc 	bl	8001484 <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000312:	f000 f853 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200000a8 	.word	0x200000a8
 8000320:	40013800 	.word	0x40013800

08000324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <MX_USART2_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800035c:	f001 f892 	bl	8001484 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f829 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000ec 	.word	0x200000ec
 8000374:	40004400 	.word	0x40004400

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_GPIO_Init+0x40>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <MX_GPIO_Init+0x40>)
 8000384:	f043 0320 	orr.w	r3, r3, #32
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_GPIO_Init+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0320 	and.w	r3, r3, #32
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <MX_GPIO_Init+0x40>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_GPIO_Init+0x40>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>
	...

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a3f      	ldr	r2, [pc, #252]	; (8000544 <HAL_UART_MspInit+0x118>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d13a      	bne.n	80004c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800044c:	4b3e      	ldr	r3, [pc, #248]	; (8000548 <HAL_UART_MspInit+0x11c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a3d      	ldr	r2, [pc, #244]	; (8000548 <HAL_UART_MspInit+0x11c>)
 8000452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b3b      	ldr	r3, [pc, #236]	; (8000548 <HAL_UART_MspInit+0x11c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b38      	ldr	r3, [pc, #224]	; (8000548 <HAL_UART_MspInit+0x11c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a37      	ldr	r2, [pc, #220]	; (8000548 <HAL_UART_MspInit+0x11c>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <HAL_UART_MspInit+0x11c>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	613b      	str	r3, [r7, #16]
 800047a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800047c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	482e      	ldr	r0, [pc, #184]	; (800054c <HAL_UART_MspInit+0x120>)
 8000492:	f000 fa59 	bl	8000948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	4619      	mov	r1, r3
 80004aa:	4828      	ldr	r0, [pc, #160]	; (800054c <HAL_UART_MspInit+0x120>)
 80004ac:	f000 fa4c 	bl	8000948 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	2025      	movs	r0, #37	; 0x25
 80004b6:	f000 fa10 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004ba:	2025      	movs	r0, #37	; 0x25
 80004bc:	f000 fa29 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004c0:	e03c      	b.n	800053c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <HAL_UART_MspInit+0x124>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d137      	bne.n	800053c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <HAL_UART_MspInit+0x11c>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <HAL_UART_MspInit+0x11c>)
 80004d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d6:	61d3      	str	r3, [r2, #28]
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <HAL_UART_MspInit+0x11c>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_UART_MspInit+0x11c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <HAL_UART_MspInit+0x11c>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_UART_MspInit+0x11c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004fc:	2304      	movs	r3, #4
 80004fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	4619      	mov	r1, r3
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <HAL_UART_MspInit+0x120>)
 8000510:	f000 fa1a 	bl	8000948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000514:	2308      	movs	r3, #8
 8000516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0318 	add.w	r3, r7, #24
 8000524:	4619      	mov	r1, r3
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <HAL_UART_MspInit+0x120>)
 8000528:	f000 fa0e 	bl	8000948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2026      	movs	r0, #38	; 0x26
 8000532:	f000 f9d2 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000536:	2026      	movs	r0, #38	; 0x26
 8000538:	f000 f9eb 	bl	8000912 <HAL_NVIC_EnableIRQ>
}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	; 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800
 8000550:	40004400 	.word	0x40004400

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059a:	f000 f8ab 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	; (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f001 fd0e 	bl	8001ff4 <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20005000 	.word	0x20005000
 8000604:	00000400 	.word	0x00000400
 8000608:	20000090 	.word	0x20000090
 800060c:	20000348 	.word	0x20000348

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000642:	f7ff ffe5 	bl	8000610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f001 fcdb 	bl	8002000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fdcd 	bl	80001e8 <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000658:	08002d40 	.word	0x08002d40
  ldr r2, =_sbss
 800065c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000660:	20000344 	.word	0x20000344

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f923 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f000 f808 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff fea0 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x54>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x58>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f93b 	bl	800092e <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f903 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <HAL_InitTick+0x5c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000004 	.word	0x20000004
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	20000008 	.word	0x20000008

080006f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x1c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <HAL_IncTick+0x20>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	2000000c 	.word	0x2000000c
 8000714:	20000130 	.word	0x20000130

08000718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_GetTick+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000130 	.word	0x20000130

0800072c <__NVIC_SetPriorityGrouping>:
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <__NVIC_EnableIRQ+0x34>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	; (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff2d 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff42 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff35 	bl	8000790 <__NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffa2 	bl	8000880 <SysTick_Config>
 800093c:	4603      	mov	r3, r0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000948:	b480      	push	{r7}
 800094a:	b08b      	sub	sp, #44	; 0x2c
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095a:	e169      	b.n	8000c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800095c:	2201      	movs	r2, #1
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	429a      	cmp	r2, r3
 8000976:	f040 8158 	bne.w	8000c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a9a      	ldr	r2, [pc, #616]	; (8000be8 <HAL_GPIO_Init+0x2a0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d05e      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 8000984:	4a98      	ldr	r2, [pc, #608]	; (8000be8 <HAL_GPIO_Init+0x2a0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d875      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 800098a:	4a98      	ldr	r2, [pc, #608]	; (8000bec <HAL_GPIO_Init+0x2a4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d058      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 8000990:	4a96      	ldr	r2, [pc, #600]	; (8000bec <HAL_GPIO_Init+0x2a4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d86f      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 8000996:	4a96      	ldr	r2, [pc, #600]	; (8000bf0 <HAL_GPIO_Init+0x2a8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d052      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 800099c:	4a94      	ldr	r2, [pc, #592]	; (8000bf0 <HAL_GPIO_Init+0x2a8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d869      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009a2:	4a94      	ldr	r2, [pc, #592]	; (8000bf4 <HAL_GPIO_Init+0x2ac>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d04c      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 80009a8:	4a92      	ldr	r2, [pc, #584]	; (8000bf4 <HAL_GPIO_Init+0x2ac>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d863      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009ae:	4a92      	ldr	r2, [pc, #584]	; (8000bf8 <HAL_GPIO_Init+0x2b0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d046      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 80009b4:	4a90      	ldr	r2, [pc, #576]	; (8000bf8 <HAL_GPIO_Init+0x2b0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d85d      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009ba:	2b12      	cmp	r3, #18
 80009bc:	d82a      	bhi.n	8000a14 <HAL_GPIO_Init+0xcc>
 80009be:	2b12      	cmp	r3, #18
 80009c0:	d859      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009c2:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <HAL_GPIO_Init+0x80>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	08000a43 	.word	0x08000a43
 80009cc:	08000a1d 	.word	0x08000a1d
 80009d0:	08000a2f 	.word	0x08000a2f
 80009d4:	08000a71 	.word	0x08000a71
 80009d8:	08000a77 	.word	0x08000a77
 80009dc:	08000a77 	.word	0x08000a77
 80009e0:	08000a77 	.word	0x08000a77
 80009e4:	08000a77 	.word	0x08000a77
 80009e8:	08000a77 	.word	0x08000a77
 80009ec:	08000a77 	.word	0x08000a77
 80009f0:	08000a77 	.word	0x08000a77
 80009f4:	08000a77 	.word	0x08000a77
 80009f8:	08000a77 	.word	0x08000a77
 80009fc:	08000a77 	.word	0x08000a77
 8000a00:	08000a77 	.word	0x08000a77
 8000a04:	08000a77 	.word	0x08000a77
 8000a08:	08000a77 	.word	0x08000a77
 8000a0c:	08000a25 	.word	0x08000a25
 8000a10:	08000a39 	.word	0x08000a39
 8000a14:	4a79      	ldr	r2, [pc, #484]	; (8000bfc <HAL_GPIO_Init+0x2b4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a1a:	e02c      	b.n	8000a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e029      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e024      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	3308      	adds	r3, #8
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e01f      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	330c      	adds	r3, #12
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e01a      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e013      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d105      	bne.n	8000a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	611a      	str	r2, [r3, #16]
          break;
 8000a62:	e009      	b.n	8000a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a64:	2308      	movs	r3, #8
 8000a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	615a      	str	r2, [r3, #20]
          break;
 8000a6e:	e003      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          break;
 8000a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2bff      	cmp	r3, #255	; 0xff
 8000a7c:	d801      	bhi.n	8000a82 <HAL_GPIO_Init+0x13a>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	e001      	b.n	8000a86 <HAL_GPIO_Init+0x13e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3304      	adds	r3, #4
 8000a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d802      	bhi.n	8000a94 <HAL_GPIO_Init+0x14c>
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	e002      	b.n	8000a9a <HAL_GPIO_Init+0x152>
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	3b08      	subs	r3, #8
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	6a39      	ldr	r1, [r7, #32]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 80b1 	beq.w	8000c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <HAL_GPIO_Init+0x2b8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <HAL_GPIO_Init+0x2b8>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ae0:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_GPIO_Init+0x2bc>)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	220f      	movs	r2, #15
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <HAL_GPIO_Init+0x2c0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d013      	beq.n	8000b34 <HAL_GPIO_Init+0x1ec>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a3f      	ldr	r2, [pc, #252]	; (8000c0c <HAL_GPIO_Init+0x2c4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00d      	beq.n	8000b30 <HAL_GPIO_Init+0x1e8>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3e      	ldr	r2, [pc, #248]	; (8000c10 <HAL_GPIO_Init+0x2c8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x1e4>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3d      	ldr	r2, [pc, #244]	; (8000c14 <HAL_GPIO_Init+0x2cc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_Init+0x1e0>
 8000b24:	2303      	movs	r3, #3
 8000b26:	e006      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	e004      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e002      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b34:	2300      	movs	r3, #0
 8000b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b38:	f002 0203 	and.w	r2, r2, #3
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b46:	492f      	ldr	r1, [pc, #188]	; (8000c04 <HAL_GPIO_Init+0x2bc>)
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d006      	beq.n	8000b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b60:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	492c      	ldr	r1, [pc, #176]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	600b      	str	r3, [r1, #0]
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4928      	ldr	r1, [pc, #160]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	4922      	ldr	r1, [pc, #136]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	604b      	str	r3, [r1, #4]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	491e      	ldr	r1, [pc, #120]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	4918      	ldr	r1, [pc, #96]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4914      	ldr	r1, [pc, #80]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d021      	beq.n	8000c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	490e      	ldr	r1, [pc, #56]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
 8000be4:	e021      	b.n	8000c2a <HAL_GPIO_Init+0x2e2>
 8000be6:	bf00      	nop
 8000be8:	10320000 	.word	0x10320000
 8000bec:	10310000 	.word	0x10310000
 8000bf0:	10220000 	.word	0x10220000
 8000bf4:	10210000 	.word	0x10210000
 8000bf8:	10120000 	.word	0x10120000
 8000bfc:	10110000 	.word	0x10110000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40011400 	.word	0x40011400
 8000c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_GPIO_Init+0x304>)
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	4909      	ldr	r1, [pc, #36]	; (8000c4c <HAL_GPIO_Init+0x304>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f47f ae8e 	bne.w	800095c <HAL_GPIO_Init+0x14>
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	372c      	adds	r7, #44	; 0x2c
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e26c      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8087 	beq.w	8000d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c70:	4b92      	ldr	r3, [pc, #584]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 030c 	and.w	r3, r3, #12
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d00c      	beq.n	8000c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c7c:	4b8f      	ldr	r3, [pc, #572]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 030c 	and.w	r3, r3, #12
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d112      	bne.n	8000cae <HAL_RCC_OscConfig+0x5e>
 8000c88:	4b8c      	ldr	r3, [pc, #560]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c94:	d10b      	bne.n	8000cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c96:	4b89      	ldr	r3, [pc, #548]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d06c      	beq.n	8000d7c <HAL_RCC_OscConfig+0x12c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d168      	bne.n	8000d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e246      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb6:	d106      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x76>
 8000cb8:	4b80      	ldr	r3, [pc, #512]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a7f      	ldr	r2, [pc, #508]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e02e      	b.n	8000d24 <HAL_RCC_OscConfig+0xd4>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x98>
 8000cce:	4b7b      	ldr	r3, [pc, #492]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a7a      	ldr	r2, [pc, #488]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a77      	ldr	r2, [pc, #476]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e01d      	b.n	8000d24 <HAL_RCC_OscConfig+0xd4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0xbc>
 8000cf2:	4b72      	ldr	r3, [pc, #456]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a71      	ldr	r2, [pc, #452]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b6f      	ldr	r3, [pc, #444]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e00b      	b.n	8000d24 <HAL_RCC_OscConfig+0xd4>
 8000d0c:	4b6b      	ldr	r3, [pc, #428]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a6a      	ldr	r2, [pc, #424]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b68      	ldr	r3, [pc, #416]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a67      	ldr	r2, [pc, #412]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d013      	beq.n	8000d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fcf4 	bl	8000718 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fcf0 	bl	8000718 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e1fa      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0xe4>
 8000d52:	e014      	b.n	8000d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fce0 	bl	8000718 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fcdc 	bl	8000718 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b64      	cmp	r3, #100	; 0x64
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e1e6      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x10c>
 8000d7a:	e000      	b.n	8000d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d063      	beq.n	8000e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d11c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x18c>
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d116      	bne.n	8000ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x176>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d001      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e1ba      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4939      	ldr	r1, [pc, #228]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	e03a      	b.n	8000e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d020      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <HAL_RCC_OscConfig+0x270>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fc95 	bl	8000718 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df2:	f7ff fc91 	bl	8000718 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e19b      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f0      	beq.n	8000df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4927      	ldr	r1, [pc, #156]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]
 8000e24:	e015      	b.n	8000e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_RCC_OscConfig+0x270>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fc74 	bl	8000718 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e34:	f7ff fc70 	bl	8000718 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e17a      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f0      	bne.n	8000e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d03a      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d019      	beq.n	8000e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_RCC_OscConfig+0x274>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fc54 	bl	8000718 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e74:	f7ff fc50 	bl	8000718 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e15a      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_RCC_OscConfig+0x26c>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 fad8 	bl	8001448 <RCC_Delay>
 8000e98:	e01c      	b.n	8000ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_RCC_OscConfig+0x274>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fc3a 	bl	8000718 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea6:	e00f      	b.n	8000ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc36 	bl	8000718 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d908      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e140      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	42420000 	.word	0x42420000
 8000ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec8:	4b9e      	ldr	r3, [pc, #632]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e9      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a6 	beq.w	800102e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee6:	4b97      	ldr	r3, [pc, #604]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10d      	bne.n	8000f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b94      	ldr	r3, [pc, #592]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a93      	ldr	r2, [pc, #588]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b91      	ldr	r3, [pc, #580]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	4b8e      	ldr	r3, [pc, #568]	; (8001148 <HAL_RCC_OscConfig+0x4f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d118      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1a:	4b8b      	ldr	r3, [pc, #556]	; (8001148 <HAL_RCC_OscConfig+0x4f8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a8a      	ldr	r2, [pc, #552]	; (8001148 <HAL_RCC_OscConfig+0x4f8>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fbf7 	bl	8000718 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2e:	f7ff fbf3 	bl	8000718 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b64      	cmp	r3, #100	; 0x64
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0fd      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	4b81      	ldr	r3, [pc, #516]	; (8001148 <HAL_RCC_OscConfig+0x4f8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x312>
 8000f54:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4a7a      	ldr	r2, [pc, #488]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6213      	str	r3, [r2, #32]
 8000f60:	e02d      	b.n	8000fbe <HAL_RCC_OscConfig+0x36e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x334>
 8000f6a:	4b76      	ldr	r3, [pc, #472]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a75      	ldr	r2, [pc, #468]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	4b73      	ldr	r3, [pc, #460]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4a72      	ldr	r2, [pc, #456]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6213      	str	r3, [r2, #32]
 8000f82:	e01c      	b.n	8000fbe <HAL_RCC_OscConfig+0x36e>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x356>
 8000f8c:	4b6d      	ldr	r3, [pc, #436]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a6c      	ldr	r2, [pc, #432]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6213      	str	r3, [r2, #32]
 8000f98:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a69      	ldr	r2, [pc, #420]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6213      	str	r3, [r2, #32]
 8000fa4:	e00b      	b.n	8000fbe <HAL_RCC_OscConfig+0x36e>
 8000fa6:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a66      	ldr	r2, [pc, #408]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	6213      	str	r3, [r2, #32]
 8000fb2:	4b64      	ldr	r3, [pc, #400]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	4a63      	ldr	r2, [pc, #396]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	f023 0304 	bic.w	r3, r3, #4
 8000fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d015      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fba7 	bl	8000718 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	e00a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fce:	f7ff fba3 	bl	8000718 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e0ab      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	4b57      	ldr	r3, [pc, #348]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0ee      	beq.n	8000fce <HAL_RCC_OscConfig+0x37e>
 8000ff0:	e014      	b.n	800101c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fb91 	bl	8000718 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fb8d 	bl	8000718 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f241 3288 	movw	r2, #5000	; 0x1388
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e095      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ee      	bne.n	8000ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d105      	bne.n	800102e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001022:	4b48      	ldr	r3, [pc, #288]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a47      	ldr	r2, [pc, #284]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8081 	beq.w	800113a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001038:	4b42      	ldr	r3, [pc, #264]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	2b08      	cmp	r3, #8
 8001042:	d061      	beq.n	8001108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d146      	bne.n	80010da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104c:	4b3f      	ldr	r3, [pc, #252]	; (800114c <HAL_RCC_OscConfig+0x4fc>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fb61 	bl	8000718 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105a:	f7ff fb5d 	bl	8000718 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e067      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001080:	d108      	bne.n	8001094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	492d      	ldr	r1, [pc, #180]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a19      	ldr	r1, [r3, #32]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	430b      	orrs	r3, r1
 80010a6:	4927      	ldr	r1, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_RCC_OscConfig+0x4fc>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fb31 	bl	8000718 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fb2d 	bl	8000718 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e037      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x46a>
 80010d8:	e02f      	b.n	800113a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_RCC_OscConfig+0x4fc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fb1a 	bl	8000718 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e8:	f7ff fb16 	bl	8000718 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e020      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x498>
 8001106:	e018      	b.n	800113a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e013      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	429a      	cmp	r2, r3
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001132:	429a      	cmp	r2, r3
 8001134:	d001      	beq.n	800113a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	40007000 	.word	0x40007000
 800114c:	42420060 	.word	0x42420060

08001150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0d0      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d910      	bls.n	8001194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 0207 	bic.w	r2, r3, #7
 800117a:	4965      	ldr	r1, [pc, #404]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b63      	ldr	r3, [pc, #396]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0b8      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a58      	ldr	r2, [pc, #352]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a52      	ldr	r2, [pc, #328]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	494d      	ldr	r1, [pc, #308]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d040      	beq.n	8001270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d115      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e07f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e073      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e06b      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f023 0203 	bic.w	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4936      	ldr	r1, [pc, #216]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001240:	f7ff fa6a 	bl	8000718 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	e00a      	b.n	800125e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001248:	f7ff fa66 	bl	8000718 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	; 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e053      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 020c 	and.w	r2, r3, #12
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	429a      	cmp	r2, r3
 800126e:	d1eb      	bne.n	8001248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d210      	bcs.n	80012a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4922      	ldr	r1, [pc, #136]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e032      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4916      	ldr	r1, [pc, #88]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	490e      	ldr	r1, [pc, #56]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012de:	f000 f821 	bl	8001324 <HAL_RCC_GetSysClockFreq>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <HAL_RCC_ClockConfig+0x1c8>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1cc>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1d0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f9c8 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000
 8001314:	40021000 	.word	0x40021000
 8001318:	08002cec 	.word	0x08002cec
 800131c:	20000004 	.word	0x20000004
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001324:	b490      	push	{r4, r7}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800132c:	1d3c      	adds	r4, r7, #4
 800132e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001334:	f240 2301 	movw	r3, #513	; 0x201
 8001338:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b04      	cmp	r3, #4
 800135c:	d002      	beq.n	8001364 <HAL_RCC_GetSysClockFreq+0x40>
 800135e:	2b08      	cmp	r3, #8
 8001360:	d003      	beq.n	800136a <HAL_RCC_GetSysClockFreq+0x46>
 8001362:	e02d      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001366:	623b      	str	r3, [r7, #32]
      break;
 8001368:	e02d      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	0c9b      	lsrs	r3, r3, #18
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001376:	4413      	add	r3, r2
 8001378:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800137c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	0c5b      	lsrs	r3, r3, #17
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001396:	4413      	add	r3, r2
 8001398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800139c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80013a2:	fb02 f203 	mul.w	r2, r2, r3
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	e004      	b.n	80013ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	623b      	str	r3, [r7, #32]
      break;
 80013be:	e002      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c2:	623b      	str	r3, [r7, #32]
      break;
 80013c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013c6:	6a3b      	ldr	r3, [r7, #32]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc90      	pop	{r4, r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	08002958 	.word	0x08002958
 80013d8:	40021000 	.word	0x40021000
 80013dc:	007a1200 	.word	0x007a1200
 80013e0:	003d0900 	.word	0x003d0900

080013e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013fc:	f7ff fff2 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	4903      	ldr	r1, [pc, #12]	; (800141c <HAL_RCC_GetPCLK1Freq+0x24>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	08002cfc 	.word	0x08002cfc

08001420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001424:	f7ff ffde 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001428:	4602      	mov	r2, r0
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	0adb      	lsrs	r3, r3, #11
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	4903      	ldr	r1, [pc, #12]	; (8001444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	08002cfc 	.word	0x08002cfc

08001448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <RCC_Delay+0x34>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <RCC_Delay+0x38>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0a5b      	lsrs	r3, r3, #9
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001464:	bf00      	nop
  }
  while (Delay --);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	60fa      	str	r2, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f9      	bne.n	8001464 <RCC_Delay+0x1c>
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000004 	.word	0x20000004
 8001480:	10624dd3 	.word	0x10624dd3

08001484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e03f      	b.n	8001516 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe ffbe 	bl	800042c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	; 0x24
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f905 	bl	80016d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2220      	movs	r2, #32
 8001510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b08a      	sub	sp, #40	; 0x28
 8001522:	af02      	add	r7, sp, #8
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b20      	cmp	r3, #32
 800153c:	d17c      	bne.n	8001638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_UART_Transmit+0x2c>
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e075      	b.n	800163a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_UART_Transmit+0x3e>
 8001558:	2302      	movs	r3, #2
 800155a:	e06e      	b.n	800163a <HAL_UART_Transmit+0x11c>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2221      	movs	r2, #33	; 0x21
 800156e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001572:	f7ff f8d1 	bl	8000718 <HAL_GetTick>
 8001576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158c:	d108      	bne.n	80015a0 <HAL_UART_Transmit+0x82>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d104      	bne.n	80015a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e003      	b.n	80015a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80015b0:	e02a      	b.n	8001608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2200      	movs	r2, #0
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f840 	bl	8001642 <UART_WaitOnFlagUntilTimeout>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e036      	b.n	800163a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10b      	bne.n	80015ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	3302      	adds	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e007      	b.n	80015fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800160c:	b29b      	uxth	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1cf      	bne.n	80015b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2200      	movs	r2, #0
 800161a:	2140      	movs	r1, #64	; 0x40
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f810 	bl	8001642 <UART_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e006      	b.n	800163a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001638:	2302      	movs	r3, #2
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001652:	e02c      	b.n	80016ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	d028      	beq.n	80016ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <UART_WaitOnFlagUntilTimeout+0x30>
 8001662:	f7ff f859 	bl	8000718 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	429a      	cmp	r2, r3
 8001670:	d21d      	bcs.n	80016ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001680:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e00f      	b.n	80016ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4013      	ands	r3, r2
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	bf0c      	ite	eq
 80016be:	2301      	moveq	r3, #1
 80016c0:	2300      	movne	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d0c3      	beq.n	8001654 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001712:	f023 030c 	bic.w	r3, r3, #12
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	430b      	orrs	r3, r1
 800171e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2c      	ldr	r2, [pc, #176]	; (80017ec <UART_SetConfig+0x114>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d103      	bne.n	8001748 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001740:	f7ff fe6e 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	e002      	b.n	800174e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001748:	f7ff fe56 	bl	80013f8 <HAL_RCC_GetPCLK1Freq>
 800174c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009a      	lsls	r2, r3, #2
 8001758:	441a      	add	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <UART_SetConfig+0x118>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	0119      	lsls	r1, r3, #4
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009a      	lsls	r2, r3, #2
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fbb2 f2f3 	udiv	r2, r2, r3
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <UART_SetConfig+0x118>)
 8001786:	fba3 0302 	umull	r0, r3, r3, r2
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	fb00 f303 	mul.w	r3, r0, r3
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	3332      	adds	r3, #50	; 0x32
 8001798:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <UART_SetConfig+0x118>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a4:	4419      	add	r1, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009a      	lsls	r2, r3, #2
 80017b0:	441a      	add	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <UART_SetConfig+0x118>)
 80017be:	fba3 0302 	umull	r0, r3, r3, r2
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	fb00 f303 	mul.w	r3, r0, r3
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	3332      	adds	r3, #50	; 0x32
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <UART_SetConfig+0x118>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	f003 020f 	and.w	r2, r3, #15
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	440a      	add	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40013800 	.word	0x40013800
 80017f0:	51eb851f 	.word	0x51eb851f

080017f4 <__NVIC_GetActive>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0e      	blt.n	8001824 <__NVIC_GetActive+0x30>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <__NVIC_GetActive+0x3c>)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	095b      	lsrs	r3, r3, #5
 800180e:	3380      	adds	r3, #128	; 0x80
 8001810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	e000      	b.n	8001826 <__NVIC_GetActive+0x32>
    return(0U);
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100

08001834 <size_of_command>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;


uint16_t size_of_command( const char* gb_string)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	uint16_t counter=0;
 800183c:	2300      	movs	r3, #0
 800183e:	81fb      	strh	r3, [r7, #14]
	while(*gb_string)
 8001840:	e005      	b.n	800184e <size_of_command+0x1a>
	{
		counter = counter+1;
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	3301      	adds	r3, #1
 8001846:	81fb      	strh	r3, [r7, #14]
		*gb_string++;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
	while(*gb_string)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f5      	bne.n	8001842 <size_of_command+0xe>
	}
	return counter;
 8001856:	89fb      	ldrh	r3, [r7, #14]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
	...

08001864 <GB_send_command>:
void GB_send_command(const char * gb_command)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2,(uint8_t *)gb_command,cnt, 100);

	HAL_UART_Transmit(&huart2,(uint8_t *)gb_command,size_of_command(gb_command), 100);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe1 	bl	8001834 <size_of_command>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <GB_send_command+0x24>)
 800187c:	f7ff fe4f 	bl	800151e <HAL_UART_Transmit>
//	GB_printString2(gb_command);
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200000ec 	.word	0x200000ec

0800188c <GB_printString1>:
void GB_printString1(const char *gb_myString)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)gb_myString,size_of_command(gb_myString), 100);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffcd 	bl	8001834 <size_of_command>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <GB_printString1+0x24>)
 80018a4:	f7ff fe3b 	bl	800151e <HAL_UART_Transmit>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200000a8 	.word	0x200000a8

080018b4 <USART2_IRQHandler>:
_Bool gb_RX_Buffer_Overflow_UART2; // This flag is set on USART Receiver // buffer overflow
uint8_t gb_rx_byte_UART2;
char gb_RX_DATA_UART2[gb_RX_BUFFER_SIZE_UART2];

void USART2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

		 if((__NVIC_GetActive(USART2_IRQn)) == 1)
 80018b8:	2026      	movs	r0, #38	; 0x26
 80018ba:	f7ff ff9b 	bl	80017f4 <__NVIC_GetActive>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d121      	bne.n	8001908 <USART2_IRQHandler+0x54>
		    //check if we are here because of RXNE interrupt
		         if (USART2->SR & USART_SR_RXNE) //if RX is not empty
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <USART2_IRQHandler+0x58>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01b      	beq.n	8001908 <USART2_IRQHandler+0x54>
		                {
		        	 gb_rx_byte_UART2 = USART2->DR; //fetch the data received
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <USART2_IRQHandler+0x58>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <USART2_IRQHandler+0x5c>)
 80018d8:	701a      	strb	r2, [r3, #0]
		                      gb_Rx_Buffer_UART2[gb_RX_Wr_Index_UART2]= gb_rx_byte_UART2;   /* put received char in buffer */
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <USART2_IRQHandler+0x60>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <USART2_IRQHandler+0x5c>)
 80018e2:	7819      	ldrb	r1, [r3, #0]
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <USART2_IRQHandler+0x64>)
 80018e6:	5499      	strb	r1, [r3, r2]
		  		              if(++gb_RX_Wr_Index_UART2 > gb_RX_BUFFER_SIZE_UART2)
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <USART2_IRQHandler+0x60>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <USART2_IRQHandler+0x60>)
 80018f2:	701a      	strb	r2, [r3, #0]
		  		              gb_RX_Wr_Index_UART2 = 0;
		  		              if(++gb_RX_Counter_UART2 > gb_RX_BUFFER_SIZE_UART2) /* keep a character count */
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <USART2_IRQHandler+0x68>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <USART2_IRQHandler+0x68>)
 80018fe:	701a      	strb	r2, [r3, #0]
		  		                   {
		  			                    /* overflow check.. */
		  			                    gb_RX_Counter_UART2 = gb_RX_BUFFER_SIZE_UART2; /* if too many chars came */
		  			                  //  gb_RX_Buffer_Overflow_UART2 = 1;            /* in before they could be used */
		  			                }                                          /* that could cause an error!! */
		  			          gb_RX_No_of_byte_UART2=gb_RX_Counter_UART2;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <USART2_IRQHandler+0x68>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <USART2_IRQHandler+0x6c>)
 8001906:	701a      	strb	r2, [r3, #0]

		                 }
	  /* USER CODE END USART2_IRQn 0 */
	  /* USER CODE BEGIN USART2_IRQn 1 */
	  /* USER CODE END USART2_IRQn 1 */
	}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40004400 	.word	0x40004400
 8001910:	20000333 	.word	0x20000333
 8001914:	20000094 	.word	0x20000094
 8001918:	20000234 	.word	0x20000234
 800191c:	20000096 	.word	0x20000096
 8001920:	20000097 	.word	0x20000097

08001924 <GB_getchar_UART2>:
/***********Niche Ring Buffer Functions *****/
/****reading from Interrupted Ring Buffer*/
char  GB_getchar_UART2()             // <--->   Serial.read()
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
	char gb_c;
	gb_c = gb_Rx_Buffer_UART2[gb_RX_Rd_Index_UART2]; /* get one from the buffer..*/
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <GB_getchar_UART2+0x40>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <GB_getchar_UART2+0x44>)
 8001932:	5c9b      	ldrb	r3, [r3, r2]
 8001934:	71fb      	strb	r3, [r7, #7]
	if(++gb_RX_Rd_Index_UART2 > gb_RX_BUFFER_SIZE_UART2) /* wrap the pointer */
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <GB_getchar_UART2+0x40>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <GB_getchar_UART2+0x40>)
 8001940:	701a      	strb	r2, [r3, #0]
	gb_RX_Rd_Index_UART2 = 0;
	if(gb_RX_Counter_UART2)
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <GB_getchar_UART2+0x48>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <GB_getchar_UART2+0x32>
	gb_RX_Counter_UART2--; /* keep a count (buffer size) */
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <GB_getchar_UART2+0x48>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <GB_getchar_UART2+0x48>)
 8001954:	701a      	strb	r2, [r3, #0]
	//GB_UART_TxChar1(gb_c);
	return gb_c ;//return char *
 8001956:	79fb      	ldrb	r3, [r7, #7]
	//printString0("n \n ");
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000095 	.word	0x20000095
 8001968:	20000234 	.word	0x20000234
 800196c:	20000096 	.word	0x20000096

08001970 <GB_search_buffer>:
		gb_x++;
	}
	GB_printString1(gb_RX_DATA_UART2);
}
char* GB_search_buffer(const char* gb_search)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	char* gb_p;
	int gb_bufferlen = strlen((const char * )gb_RX_DATA_UART2);
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <GB_search_buffer+0x2c>)
 800197a:	f7fe fbe7 	bl	800014c <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	60bb      	str	r3, [r7, #8]
	if(gb_bufferlen < gb_RX_BUFFER_SIZE_UART2)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2bfe      	cmp	r3, #254	; 0xfe
 8001986:	dc04      	bgt.n	8001992 <GB_search_buffer+0x22>
	gb_p= strstr ((const char *)gb_RX_DATA_UART2,gb_search);
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <GB_search_buffer+0x2c>)
 800198c:	f000 fba4 	bl	80020d8 <strstr>
 8001990:	60f8      	str	r0, [r7, #12]
	return (gb_p);
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000134 	.word	0x20000134

080019a0 <GB_RFR_UART2>:

/* @brief variable to store the number of characters received*/
uint8_t gb_received =0;
int GB_RFR_UART2(const char * gb_rsp,unsigned int gb_timeout)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	uint32_t gb_timeIn = HAL_GetTick();
 80019aa:	f7fe feb5 	bl	8000718 <HAL_GetTick>
 80019ae:	60f8      	str	r0, [r7, #12]
	gb_received = 0;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <GB_RFR_UART2+0x80>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 80019b6:	22ff      	movs	r2, #255	; 0xff
 80019b8:	2100      	movs	r1, #0
 80019ba:	481a      	ldr	r0, [pc, #104]	; (8001a24 <GB_RFR_UART2+0x84>)
 80019bc:	f000 fb44 	bl	8002048 <memset>
	while (HAL_GetTick() - gb_timeIn < gb_timeout) // While we haven't timed out
 80019c0:	e01a      	b.n	80019f8 <GB_RFR_UART2+0x58>
	{
		if(gb_RX_Counter_UART2)
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <GB_RFR_UART2+0x88>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <GB_RFR_UART2+0x58>
		{
			gb_RX_DATA_UART2[gb_received]= GB_getchar_UART2();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <GB_RFR_UART2+0x80>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461c      	mov	r4, r3
 80019d0:	f7ff ffa8 	bl	8001924 <GB_getchar_UART2>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <GB_RFR_UART2+0x84>)
 80019da:	551a      	strb	r2, [r3, r4]
			gb_received++;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <GB_RFR_UART2+0x80>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <GB_RFR_UART2+0x80>)
 80019e6:	701a      	strb	r2, [r3, #0]
			if(GB_search_buffer(gb_rsp)) return 1;
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffc1 	bl	8001970 <GB_search_buffer>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <GB_RFR_UART2+0x58>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e00e      	b.n	8001a16 <GB_RFR_UART2+0x76>
	while (HAL_GetTick() - gb_timeIn < gb_timeout) // While we haven't timed out
 80019f8:	f7fe fe8e 	bl	8000718 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8dc      	bhi.n	80019c2 <GB_RFR_UART2+0x22>
		}
	}
	if (gb_received > 0) // If we received any characters
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <GB_RFR_UART2+0x80>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <GB_RFR_UART2+0x74>
	return 0; // Return unkown response error code
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <GB_RFR_UART2+0x76>
	else // If we haven't received any characters
	return 2; // Return the timeout error code
 8001a14:	2302      	movs	r3, #2

}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000098 	.word	0x20000098
 8001a24:	20000134 	.word	0x20000134
 8001a28:	20000096 	.word	0x20000096

08001a2c <GB_esp8266_getmode>:
int gb_CWMODE=0;
void GB_esp8266_getmode()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
	GB_send_command("AT+CWMODE?\r\n");
 8001a32:	481d      	ldr	r0, [pc, #116]	; (8001aa8 <GB_esp8266_getmode+0x7c>)
 8001a34:	f7ff ff16 	bl	8001864 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 8001a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <GB_esp8266_getmode+0x80>)
 8001a3e:	f7ff ffaf 	bl	80019a0 <GB_RFR_UART2>
 8001a42:	60f8      	str	r0, [r7, #12]
	if(gb_rsp==1)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d124      	bne.n	8001a94 <GB_esp8266_getmode+0x68>
	{
		char * gb_p = strchr(gb_RX_DATA_UART2, ':');
 8001a4a:	213a      	movs	r1, #58	; 0x3a
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <GB_esp8266_getmode+0x84>)
 8001a4e:	f000 fb23 	bl	8002098 <strchr>
 8001a52:	60b8      	str	r0, [r7, #8]
		if(gb_p!=NULL)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d022      	beq.n	8001aa0 <GB_esp8266_getmode+0x74>
		{
			char gb_mode = *(gb_p+1);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	71fb      	strb	r3, [r7, #7]
			gb_CWMODE= gb_mode-48;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3b30      	subs	r3, #48	; 0x30
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <GB_esp8266_getmode+0x88>)
 8001a66:	6013      	str	r3, [r2, #0]
			if(gb_CWMODE==1) GB_printString1("Station mode selected\n");
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <GB_esp8266_getmode+0x88>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <GB_esp8266_getmode+0x4a>
 8001a70:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <GB_esp8266_getmode+0x8c>)
 8001a72:	f7ff ff0b 	bl	800188c <GB_printString1>
			if(gb_CWMODE==2) GB_printString1("SoftAP mode selected\n");
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <GB_esp8266_getmode+0x88>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d102      	bne.n	8001a84 <GB_esp8266_getmode+0x58>
 8001a7e:	480f      	ldr	r0, [pc, #60]	; (8001abc <GB_esp8266_getmode+0x90>)
 8001a80:	f7ff ff04 	bl	800188c <GB_printString1>
			if(gb_CWMODE==3) GB_printString1("SoftAP+Station mode selected\n");
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <GB_esp8266_getmode+0x88>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d109      	bne.n	8001aa0 <GB_esp8266_getmode+0x74>
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <GB_esp8266_getmode+0x94>)
 8001a8e:	f7ff fefd 	bl	800188c <GB_printString1>
		//esp8266_rst();
		GB_printString1(gb_RX_DATA_UART2);
	}

	//GB_printString1(gb_RX_DATA_UART2);
}
 8001a92:	e005      	b.n	8001aa0 <GB_esp8266_getmode+0x74>
		GB_printString1("Error in receiving response (check the command) or timeout has happened\n");
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <GB_esp8266_getmode+0x98>)
 8001a96:	f7ff fef9 	bl	800188c <GB_printString1>
		GB_printString1(gb_RX_DATA_UART2);
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <GB_esp8266_getmode+0x84>)
 8001a9c:	f7ff fef6 	bl	800188c <GB_printString1>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08002990 	.word	0x08002990
 8001aac:	080029a0 	.word	0x080029a0
 8001ab0:	20000134 	.word	0x20000134
 8001ab4:	2000009c 	.word	0x2000009c
 8001ab8:	080029a4 	.word	0x080029a4
 8001abc:	080029bc 	.word	0x080029bc
 8001ac0:	080029d4 	.word	0x080029d4
 8001ac4:	080029f4 	.word	0x080029f4

08001ac8 <GB_esp8266_connectiontype>:
void GB_esp8266_connectiontype()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
	GB_send_command("AT+CIPMUX?\r\n");
 8001ace:	4818      	ldr	r0, [pc, #96]	; (8001b30 <GB_esp8266_connectiontype+0x68>)
 8001ad0:	f7ff fec8 	bl	8001864 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 8001ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ad8:	4816      	ldr	r0, [pc, #88]	; (8001b34 <GB_esp8266_connectiontype+0x6c>)
 8001ada:	f7ff ff61 	bl	80019a0 <GB_RFR_UART2>
 8001ade:	60f8      	str	r0, [r7, #12]
	if(gb_rsp==1)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d11a      	bne.n	8001b1c <GB_esp8266_connectiontype+0x54>
	{
		// printString0("command is successfully send\n");
		char * gb_p = strchr(gb_RX_DATA_UART2, ':');
 8001ae6:	213a      	movs	r1, #58	; 0x3a
 8001ae8:	4813      	ldr	r0, [pc, #76]	; (8001b38 <GB_esp8266_connectiontype+0x70>)
 8001aea:	f000 fad5 	bl	8002098 <strchr>
 8001aee:	60b8      	str	r0, [r7, #8]
		if(gb_p!=NULL)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d018      	beq.n	8001b28 <GB_esp8266_connectiontype+0x60>
		{
			char gb_mode = *(gb_p+1);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	71fb      	strb	r3, [r7, #7]
			int gb_num = gb_mode-48;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	3b30      	subs	r3, #48	; 0x30
 8001b00:	603b      	str	r3, [r7, #0]
			if(gb_num==0) GB_printString1("Single connection - configured as client\n");
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <GB_esp8266_connectiontype+0x46>
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <GB_esp8266_connectiontype+0x74>)
 8001b0a:	f7ff febf 	bl	800188c <GB_printString1>
			if(gb_num==1) GB_printString1("multiple connection - configured as server\n");
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d109      	bne.n	8001b28 <GB_esp8266_connectiontype+0x60>
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <GB_esp8266_connectiontype+0x78>)
 8001b16:	f7ff feb9 	bl	800188c <GB_printString1>
	{
		GB_printString1("Error in receiving response (check the command) or timeout has happened\n");
		GB_printString1(gb_RX_DATA_UART2);
	}
//	GB_printString1(gb_RX_DATA_UART2);
}
 8001b1a:	e005      	b.n	8001b28 <GB_esp8266_connectiontype+0x60>
		GB_printString1("Error in receiving response (check the command) or timeout has happened\n");
 8001b1c:	4809      	ldr	r0, [pc, #36]	; (8001b44 <GB_esp8266_connectiontype+0x7c>)
 8001b1e:	f7ff feb5 	bl	800188c <GB_printString1>
		GB_printString1(gb_RX_DATA_UART2);
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <GB_esp8266_connectiontype+0x70>)
 8001b24:	f7ff feb2 	bl	800188c <GB_printString1>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	08002a40 	.word	0x08002a40
 8001b34:	080029a0 	.word	0x080029a0
 8001b38:	20000134 	.word	0x20000134
 8001b3c:	08002a50 	.word	0x08002a50
 8001b40:	08002a7c 	.word	0x08002a7c
 8001b44:	080029f4 	.word	0x080029f4

08001b48 <GB_esp8266_getAP>:
void GB_esp8266_getAP()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
	char gb_ssid[20];
	GB_send_command("AT+CWJAP?\r\n");
 8001b4e:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <GB_esp8266_getAP+0x88>)
 8001b50:	f7ff fe88 	bl	8001864 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 2000);
 8001b54:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b58:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <GB_esp8266_getAP+0x8c>)
 8001b5a:	f7ff ff21 	bl	80019a0 <GB_RFR_UART2>
 8001b5e:	61f8      	str	r0, [r7, #28]
	if(gb_rsp==1)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d12d      	bne.n	8001bc2 <GB_esp8266_getAP+0x7a>
	{

		if (strstr(gb_RX_DATA_UART2, "No AP") != NULL)   GB_printString1("No AP is connected\n");
 8001b66:	491c      	ldr	r1, [pc, #112]	; (8001bd8 <GB_esp8266_getAP+0x90>)
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <GB_esp8266_getAP+0x94>)
 8001b6a:	f000 fab5 	bl	80020d8 <strstr>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <GB_esp8266_getAP+0x32>
 8001b74:	481a      	ldr	r0, [pc, #104]	; (8001be0 <GB_esp8266_getAP+0x98>)
 8001b76:	f7ff fe89 	bl	800188c <GB_printString1>
		char * gb_p = strstr(gb_RX_DATA_UART2,"+CWJAP:");
 8001b7a:	491a      	ldr	r1, [pc, #104]	; (8001be4 <GB_esp8266_getAP+0x9c>)
 8001b7c:	4817      	ldr	r0, [pc, #92]	; (8001bdc <GB_esp8266_getAP+0x94>)
 8001b7e:	f000 faab 	bl	80020d8 <strstr>
 8001b82:	61b8      	str	r0, [r7, #24]
		if(gb_p!=NULL)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01e      	beq.n	8001bc8 <GB_esp8266_getAP+0x80>
		{
			gb_p +=  strlen("+CWJAP") +2;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	61bb      	str	r3, [r7, #24]
			char * gb_q=strchr(gb_p,'"');
 8001b90:	2122      	movs	r1, #34	; 0x22
 8001b92:	69b8      	ldr	r0, [r7, #24]
 8001b94:	f000 fa80 	bl	8002098 <strchr>
 8001b98:	6178      	str	r0, [r7, #20]
			strncpy(gb_ssid,gb_p,gb_q-gb_p);
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fa83 	bl	80020b2 <strncpy>
			GB_printString1("Connected to Wifi:");
 8001bac:	480e      	ldr	r0, [pc, #56]	; (8001be8 <GB_esp8266_getAP+0xa0>)
 8001bae:	f7ff fe6d 	bl	800188c <GB_printString1>
			GB_printString1(gb_ssid);
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe69 	bl	800188c <GB_printString1>
			GB_printString1("\n");
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <GB_esp8266_getAP+0xa4>)
 8001bbc:	f7ff fe66 	bl	800188c <GB_printString1>
	{
		//printString0("Error in receiving response (check the command ) or timeout has happened\n");
		GB_printString1(gb_RX_DATA_UART2);
	}

}
 8001bc0:	e002      	b.n	8001bc8 <GB_esp8266_getAP+0x80>
		GB_printString1(gb_RX_DATA_UART2);
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <GB_esp8266_getAP+0x94>)
 8001bc4:	f7ff fe62 	bl	800188c <GB_printString1>
}
 8001bc8:	bf00      	nop
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	08002aa8 	.word	0x08002aa8
 8001bd4:	080029a0 	.word	0x080029a0
 8001bd8:	08002ab4 	.word	0x08002ab4
 8001bdc:	20000134 	.word	0x20000134
 8001be0:	08002abc 	.word	0x08002abc
 8001be4:	08002ad0 	.word	0x08002ad0
 8001be8:	08002ad8 	.word	0x08002ad8
 8001bec:	0800298c 	.word	0x0800298c

08001bf0 <GB_esp8266_setAP>:
void GB_esp8266_setAP(const char * gb_ssid, const char * gb_pass)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	char gb_setAP[40];
	sprintf(gb_setAP,"AT+CWJAP=\"%s\",\"%s\"\r\n",gb_ssid,gb_pass);
 8001bfa:	f107 0008 	add.w	r0, r7, #8
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <GB_esp8266_setAP+0xb8>)
 8001c04:	f000 fa28 	bl	8002058 <siprintf>


	GB_send_command(gb_setAP);
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe29 	bl	8001864 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK",16000);
 8001c12:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001c16:	4825      	ldr	r0, [pc, #148]	; (8001cac <GB_esp8266_setAP+0xbc>)
 8001c18:	f7ff fec2 	bl	80019a0 <GB_RFR_UART2>
 8001c1c:	63f8      	str	r0, [r7, #60]	; 0x3c


	if(gb_rsp==1)
 8001c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d109      	bne.n	8001c38 <GB_esp8266_setAP+0x48>
	{

		GB_printString1("WiFi is  connected to :");
 8001c24:	4822      	ldr	r0, [pc, #136]	; (8001cb0 <GB_esp8266_setAP+0xc0>)
 8001c26:	f7ff fe31 	bl	800188c <GB_printString1>
		GB_printString1(gb_ssid);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe2e 	bl	800188c <GB_printString1>
		GB_printString1("\n");
 8001c30:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <GB_esp8266_setAP+0xc4>)
 8001c32:	f7ff fe2b 	bl	800188c <GB_printString1>
			if(gb_num==2) GB_printString1("Wrong password \n");
			if(gb_num==3) GB_printString1("cannot find the target AP\n");
			if(gb_num==4) GB_printString1("connection failed \n");
		}
	}
}
 8001c36:	e033      	b.n	8001ca0 <GB_esp8266_setAP+0xb0>
		GB_printString1("Error in connecting to :");
 8001c38:	481f      	ldr	r0, [pc, #124]	; (8001cb8 <GB_esp8266_setAP+0xc8>)
 8001c3a:	f7ff fe27 	bl	800188c <GB_printString1>
		GB_printString1(gb_ssid);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe24 	bl	800188c <GB_printString1>
		GB_printString1("\n");
 8001c44:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <GB_esp8266_setAP+0xc4>)
 8001c46:	f7ff fe21 	bl	800188c <GB_printString1>
		char * gb_p = strstr(gb_RX_DATA_UART2,"+CWJAP:");
 8001c4a:	491c      	ldr	r1, [pc, #112]	; (8001cbc <GB_esp8266_setAP+0xcc>)
 8001c4c:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <GB_esp8266_setAP+0xd0>)
 8001c4e:	f000 fa43 	bl	80020d8 <strstr>
 8001c52:	63b8      	str	r0, [r7, #56]	; 0x38
		if(gb_p!=NULL)
 8001c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d022      	beq.n	8001ca0 <GB_esp8266_setAP+0xb0>
			gb_p+= strlen("+CWJAP:");
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
			char gb_error_code = *gb_p;
 8001c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			int gb_num = gb_error_code-48;
 8001c68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c6c:	3b30      	subs	r3, #48	; 0x30
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
			if(gb_num==1) GB_printString1("Connection timeout \n");
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <GB_esp8266_setAP+0x8c>
 8001c76:	4813      	ldr	r0, [pc, #76]	; (8001cc4 <GB_esp8266_setAP+0xd4>)
 8001c78:	f7ff fe08 	bl	800188c <GB_printString1>
			if(gb_num==2) GB_printString1("Wrong password \n");
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d102      	bne.n	8001c88 <GB_esp8266_setAP+0x98>
 8001c82:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <GB_esp8266_setAP+0xd8>)
 8001c84:	f7ff fe02 	bl	800188c <GB_printString1>
			if(gb_num==3) GB_printString1("cannot find the target AP\n");
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d102      	bne.n	8001c94 <GB_esp8266_setAP+0xa4>
 8001c8e:	480f      	ldr	r0, [pc, #60]	; (8001ccc <GB_esp8266_setAP+0xdc>)
 8001c90:	f7ff fdfc 	bl	800188c <GB_printString1>
			if(gb_num==4) GB_printString1("connection failed \n");
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d102      	bne.n	8001ca0 <GB_esp8266_setAP+0xb0>
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <GB_esp8266_setAP+0xe0>)
 8001c9c:	f7ff fdf6 	bl	800188c <GB_printString1>
}
 8001ca0:	bf00      	nop
 8001ca2:	3740      	adds	r7, #64	; 0x40
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08002aec 	.word	0x08002aec
 8001cac:	080029a0 	.word	0x080029a0
 8001cb0:	08002b04 	.word	0x08002b04
 8001cb4:	0800298c 	.word	0x0800298c
 8001cb8:	08002b1c 	.word	0x08002b1c
 8001cbc:	08002ad0 	.word	0x08002ad0
 8001cc0:	20000134 	.word	0x20000134
 8001cc4:	08002b38 	.word	0x08002b38
 8001cc8:	08002b50 	.word	0x08002b50
 8001ccc:	08002b64 	.word	0x08002b64
 8001cd0:	08002b80 	.word	0x08002b80

08001cd4 <GB_esp8266_IPadress>:
//	int gb_rsp = GB_RFR_UART2("WIFI DISCONNECT",1000);
//	if(gb_rsp==1) GB_printString1("WIFI is  disconnected  \n");
//	if(gb_rsp==0) GB_printString1("WIFI is already disconnected \n");
//}
void GB_esp8266_IPadress()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0a6      	sub	sp, #152	; 0x98
 8001cd8:	af00      	add	r7, sp, #0

	GB_send_command("AT+CIFSR\r\n");
 8001cda:	48ac      	ldr	r0, [pc, #688]	; (8001f8c <GB_esp8266_IPadress+0x2b8>)
 8001cdc:	f7ff fdc2 	bl	8001864 <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK",1000);
 8001ce0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce4:	48aa      	ldr	r0, [pc, #680]	; (8001f90 <GB_esp8266_IPadress+0x2bc>)
 8001ce6:	f7ff fe5b 	bl	80019a0 <GB_RFR_UART2>
 8001cea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	char gb_staip[20],gb_stamac[20],gb_apip[20],gb_apmac[20];
	memset(gb_staip, '\0',sizeof(gb_staip));
 8001cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf2:	2214      	movs	r2, #20
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f9a6 	bl	8002048 <memset>
	memset(gb_stamac, '\0',sizeof(gb_stamac));
 8001cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d00:	2214      	movs	r2, #20
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f99f 	bl	8002048 <memset>
	memset(gb_apip, '\0',sizeof(gb_apip));
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	2214      	movs	r2, #20
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f998 	bl	8002048 <memset>
	memset(gb_apmac, '\0',sizeof(gb_apmac));
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2214      	movs	r2, #20
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f992 	bl	8002048 <memset>
	while(gb_rsp==1)
 8001d24:	e128      	b.n	8001f78 <GB_esp8266_IPadress+0x2a4>
	{
		GB_printString1("IP address is :\n");
 8001d26:	489b      	ldr	r0, [pc, #620]	; (8001f94 <GB_esp8266_IPadress+0x2c0>)
 8001d28:	f7ff fdb0 	bl	800188c <GB_printString1>
		if(gb_CWMODE==1)    //if station mode is selected
 8001d2c:	4b9a      	ldr	r3, [pc, #616]	; (8001f98 <GB_esp8266_IPadress+0x2c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d13e      	bne.n	8001db2 <GB_esp8266_IPadress+0xde>
		{
			//Station IP
			char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:STAIP");
 8001d34:	4999      	ldr	r1, [pc, #612]	; (8001f9c <GB_esp8266_IPadress+0x2c8>)
 8001d36:	489a      	ldr	r0, [pc, #616]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001d38:	f000 f9ce 	bl	80020d8 <strstr>
 8001d3c:	6638      	str	r0, [r7, #96]	; 0x60
			gb_p += strlen("+CWJAP:STAIP")+2;
 8001d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d40:	330e      	adds	r3, #14
 8001d42:	663b      	str	r3, [r7, #96]	; 0x60
			char * gb_q=strchr(gb_p,'"');
 8001d44:	2122      	movs	r1, #34	; 0x22
 8001d46:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d48:	f000 f9a6 	bl	8002098 <strchr>
 8001d4c:	65f8      	str	r0, [r7, #92]	; 0x5c
			strncpy(gb_staip,gb_p,gb_q-gb_p);
 8001d4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f9a8 	bl	80020b2 <strncpy>
			GB_printString1("IP address of Station is :");
 8001d62:	4890      	ldr	r0, [pc, #576]	; (8001fa4 <GB_esp8266_IPadress+0x2d0>)
 8001d64:	f7ff fd92 	bl	800188c <GB_printString1>
			GB_printString1(gb_staip);
 8001d68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fd8d 	bl	800188c <GB_printString1>

			// Station MAC
			char * gb_r = strstr(gb_RX_DATA_UART2,"+CIFSR:STAMAC");
 8001d72:	498d      	ldr	r1, [pc, #564]	; (8001fa8 <GB_esp8266_IPadress+0x2d4>)
 8001d74:	488a      	ldr	r0, [pc, #552]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001d76:	f000 f9af 	bl	80020d8 <strstr>
 8001d7a:	65b8      	str	r0, [r7, #88]	; 0x58
			gb_r += strlen("+CIFSR:STAMAC")+2;
 8001d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d7e:	330f      	adds	r3, #15
 8001d80:	65bb      	str	r3, [r7, #88]	; 0x58
			char * gb_s =strchr(gb_r,'"');
 8001d82:	2122      	movs	r1, #34	; 0x22
 8001d84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d86:	f000 f987 	bl	8002098 <strchr>
 8001d8a:	6578      	str	r0, [r7, #84]	; 0x54
			strncpy(gb_stamac,gb_r,gb_s-gb_r);
 8001d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f989 	bl	80020b2 <strncpy>
			GB_printString1("\n Mac address of Station is :");
 8001da0:	4882      	ldr	r0, [pc, #520]	; (8001fac <GB_esp8266_IPadress+0x2d8>)
 8001da2:	f7ff fd73 	bl	800188c <GB_printString1>
			GB_printString1(gb_stamac);
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fd6e 	bl	800188c <GB_printString1>
			break;
 8001db0:	e0e8      	b.n	8001f84 <GB_esp8266_IPadress+0x2b0>
		}
		if(gb_CWMODE==2)
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <GB_esp8266_IPadress+0x2c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d13c      	bne.n	8001e34 <GB_esp8266_IPadress+0x160>
		{
			// Soft AP IP
			char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:APIP");
 8001dba:	497d      	ldr	r1, [pc, #500]	; (8001fb0 <GB_esp8266_IPadress+0x2dc>)
 8001dbc:	4878      	ldr	r0, [pc, #480]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001dbe:	f000 f98b 	bl	80020d8 <strstr>
 8001dc2:	6738      	str	r0, [r7, #112]	; 0x70
			gb_p += strlen("+CIFSR:APIP")+2;
 8001dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc6:	330d      	adds	r3, #13
 8001dc8:	673b      	str	r3, [r7, #112]	; 0x70
			char * gb_q=strchr(gb_p,'"');
 8001dca:	2122      	movs	r1, #34	; 0x22
 8001dcc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001dce:	f000 f963 	bl	8002098 <strchr>
 8001dd2:	66f8      	str	r0, [r7, #108]	; 0x6c
			strncpy(gb_apip,gb_p,gb_q-gb_p);
 8001dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f965 	bl	80020b2 <strncpy>
			GB_printString1("IP address of SoftAP is :");
 8001de8:	4872      	ldr	r0, [pc, #456]	; (8001fb4 <GB_esp8266_IPadress+0x2e0>)
 8001dea:	f7ff fd4f 	bl	800188c <GB_printString1>
			GB_printString1(gb_apip);
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fd4a 	bl	800188c <GB_printString1>

			// Soft AP MAC
			char * gb_r = strstr(gb_RX_DATA_UART2,"+CIFSR:APMAC");
 8001df8:	496f      	ldr	r1, [pc, #444]	; (8001fb8 <GB_esp8266_IPadress+0x2e4>)
 8001dfa:	4869      	ldr	r0, [pc, #420]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001dfc:	f000 f96c 	bl	80020d8 <strstr>
 8001e00:	66b8      	str	r0, [r7, #104]	; 0x68
			gb_r += strlen("+CIFSR:APMAC")+2;
 8001e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e04:	330e      	adds	r3, #14
 8001e06:	66bb      	str	r3, [r7, #104]	; 0x68
			char * gb_s =strchr(gb_r,'"');
 8001e08:	2122      	movs	r1, #34	; 0x22
 8001e0a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001e0c:	f000 f944 	bl	8002098 <strchr>
 8001e10:	6678      	str	r0, [r7, #100]	; 0x64
			strncpy(gb_apmac,gb_r,gb_s-gb_r);
 8001e12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f947 	bl	80020b2 <strncpy>
			GB_printString1("\n Mac address of SoftAP is :");
 8001e24:	4865      	ldr	r0, [pc, #404]	; (8001fbc <GB_esp8266_IPadress+0x2e8>)
 8001e26:	f7ff fd31 	bl	800188c <GB_printString1>
			GB_printString1(gb_apmac);
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fd2d 	bl	800188c <GB_printString1>
			break;
 8001e32:	e0a7      	b.n	8001f84 <GB_esp8266_IPadress+0x2b0>
		}
		if(gb_CWMODE==3)
 8001e34:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <GB_esp8266_IPadress+0x2c4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	f040 809d 	bne.w	8001f78 <GB_esp8266_IPadress+0x2a4>
		{
			//Station IP
			char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:STAIP");
 8001e3e:	4957      	ldr	r1, [pc, #348]	; (8001f9c <GB_esp8266_IPadress+0x2c8>)
 8001e40:	4857      	ldr	r0, [pc, #348]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001e42:	f000 f949 	bl	80020d8 <strstr>
 8001e46:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			gb_p += strlen("+CWJAP:STAIP")+2;
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e4e:	330e      	adds	r3, #14
 8001e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			char * gb_q=strchr(gb_p,'"');
 8001e54:	2122      	movs	r1, #34	; 0x22
 8001e56:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001e5a:	f000 f91d 	bl	8002098 <strchr>
 8001e5e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			strncpy(gb_staip,gb_p,gb_q-gb_p);
 8001e62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f91b 	bl	80020b2 <strncpy>
			GB_printString1("IP address of Station is :");
 8001e7c:	4849      	ldr	r0, [pc, #292]	; (8001fa4 <GB_esp8266_IPadress+0x2d0>)
 8001e7e:	f7ff fd05 	bl	800188c <GB_printString1>
			GB_printString1(gb_staip);
 8001e82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fd00 	bl	800188c <GB_printString1>
			GB_printString1("\n");
 8001e8c:	484c      	ldr	r0, [pc, #304]	; (8001fc0 <GB_esp8266_IPadress+0x2ec>)
 8001e8e:	f7ff fcfd 	bl	800188c <GB_printString1>

			// Station MAC
			char * gb_r = strstr(gb_RX_DATA_UART2,"+CIFSR:STAMAC");
 8001e92:	4945      	ldr	r1, [pc, #276]	; (8001fa8 <GB_esp8266_IPadress+0x2d4>)
 8001e94:	4842      	ldr	r0, [pc, #264]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001e96:	f000 f91f 	bl	80020d8 <strstr>
 8001e9a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			gb_r += strlen("+CIFSR:STAMAC")+2;
 8001e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea2:	330f      	adds	r3, #15
 8001ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			char * gb_s =strchr(gb_r,'"');
 8001ea8:	2122      	movs	r1, #34	; 0x22
 8001eaa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001eae:	f000 f8f3 	bl	8002098 <strchr>
 8001eb2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			strncpy(gb_stamac,gb_r,gb_s-gb_r);
 8001eb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f8f1 	bl	80020b2 <strncpy>
			GB_printString1("Mac address of Station is :");
 8001ed0:	483c      	ldr	r0, [pc, #240]	; (8001fc4 <GB_esp8266_IPadress+0x2f0>)
 8001ed2:	f7ff fcdb 	bl	800188c <GB_printString1>
			GB_printString1(gb_stamac);
 8001ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fcd6 	bl	800188c <GB_printString1>
			GB_printString1("\n");
 8001ee0:	4837      	ldr	r0, [pc, #220]	; (8001fc0 <GB_esp8266_IPadress+0x2ec>)
 8001ee2:	f7ff fcd3 	bl	800188c <GB_printString1>


			// Soft AP IP
			char * gb_a = strstr(gb_RX_DATA_UART2,"+CIFSR:APIP");
 8001ee6:	4932      	ldr	r1, [pc, #200]	; (8001fb0 <GB_esp8266_IPadress+0x2dc>)
 8001ee8:	482d      	ldr	r0, [pc, #180]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001eea:	f000 f8f5 	bl	80020d8 <strstr>
 8001eee:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			gb_a += strlen("+CIFSR:APIP")+2;
 8001ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef6:	330d      	adds	r3, #13
 8001ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			char * gb_b=strchr(gb_a,'"');
 8001efc:	2122      	movs	r1, #34	; 0x22
 8001efe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f02:	f000 f8c9 	bl	8002098 <strchr>
 8001f06:	67f8      	str	r0, [r7, #124]	; 0x7c
			strncpy(gb_apip,gb_a,gb_b-gb_a);
 8001f08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f8c9 	bl	80020b2 <strncpy>
			GB_printString1("IP address of SoftAP is :");
 8001f20:	4824      	ldr	r0, [pc, #144]	; (8001fb4 <GB_esp8266_IPadress+0x2e0>)
 8001f22:	f7ff fcb3 	bl	800188c <GB_printString1>
			GB_printString1(gb_apip);
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fcae 	bl	800188c <GB_printString1>
			GB_printString1("\n");
 8001f30:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <GB_esp8266_IPadress+0x2ec>)
 8001f32:	f7ff fcab 	bl	800188c <GB_printString1>


			// Soft AP MAC
			char * gb_c = strstr(gb_RX_DATA_UART2,"+CIFSR:APMAC");
 8001f36:	4920      	ldr	r1, [pc, #128]	; (8001fb8 <GB_esp8266_IPadress+0x2e4>)
 8001f38:	4819      	ldr	r0, [pc, #100]	; (8001fa0 <GB_esp8266_IPadress+0x2cc>)
 8001f3a:	f000 f8cd 	bl	80020d8 <strstr>
 8001f3e:	67b8      	str	r0, [r7, #120]	; 0x78
			gb_c += strlen("+CIFSR:APMAC")+2;
 8001f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f42:	330e      	adds	r3, #14
 8001f44:	67bb      	str	r3, [r7, #120]	; 0x78
			char * gb_d =strchr(gb_c,'"');
 8001f46:	2122      	movs	r1, #34	; 0x22
 8001f48:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f4a:	f000 f8a5 	bl	8002098 <strchr>
 8001f4e:	6778      	str	r0, [r7, #116]	; 0x74
			strncpy(gb_apmac,gb_c,gb_d-gb_c);
 8001f50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f8a8 	bl	80020b2 <strncpy>
			GB_printString1("Mac address of SoftAP is :");
 8001f62:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <GB_esp8266_IPadress+0x2f4>)
 8001f64:	f7ff fc92 	bl	800188c <GB_printString1>
			GB_printString1(gb_apmac);
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fc8e 	bl	800188c <GB_printString1>
			GB_printString1("\n");
 8001f70:	4813      	ldr	r0, [pc, #76]	; (8001fc0 <GB_esp8266_IPadress+0x2ec>)
 8001f72:	f7ff fc8b 	bl	800188c <GB_printString1>
			break;
 8001f76:	e005      	b.n	8001f84 <GB_esp8266_IPadress+0x2b0>
	while(gb_rsp==1)
 8001f78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f43f aed2 	beq.w	8001d26 <GB_esp8266_IPadress+0x52>
		}
	}
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	3798      	adds	r7, #152	; 0x98
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	08002b94 	.word	0x08002b94
 8001f90:	080029a0 	.word	0x080029a0
 8001f94:	08002ba0 	.word	0x08002ba0
 8001f98:	2000009c 	.word	0x2000009c
 8001f9c:	08002bb4 	.word	0x08002bb4
 8001fa0:	20000134 	.word	0x20000134
 8001fa4:	08002bc4 	.word	0x08002bc4
 8001fa8:	08002be0 	.word	0x08002be0
 8001fac:	08002bf0 	.word	0x08002bf0
 8001fb0:	08002c10 	.word	0x08002c10
 8001fb4:	08002c1c 	.word	0x08002c1c
 8001fb8:	08002c38 	.word	0x08002c38
 8001fbc:	08002c48 	.word	0x08002c48
 8001fc0:	0800298c 	.word	0x0800298c
 8001fc4:	08002c68 	.word	0x08002c68
 8001fc8:	08002c84 	.word	0x08002c84

08001fcc <GB_esp8266_initialise_client>:
	int gb_rsp = GB_RFR_UART2("OK",4000);
	if(gb_rsp==1) GB_printString1(gb_RX_DATA_UART2);
}

void GB_esp8266_initialise_client()
	{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

		GB_esp8266_getmode();
 8001fd0:	f7ff fd2c 	bl	8001a2c <GB_esp8266_getmode>
		GB_esp8266_connectiontype();
 8001fd4:	f7ff fd78 	bl	8001ac8 <GB_esp8266_connectiontype>
		GB_esp8266_getAP();
 8001fd8:	f7ff fdb6 	bl	8001b48 <GB_esp8266_getAP>
	GB_esp8266_setAP("kunal2.4ghz","Mansi5481");
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <GB_esp8266_initialise_client+0x20>)
 8001fde:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <GB_esp8266_initialise_client+0x24>)
 8001fe0:	f7ff fe06 	bl	8001bf0 <GB_esp8266_setAP>
//		GB_printString1("\nSETAP Command\n");
		//esp8266_setAP("JioFiber 2.4ghz","Mansi5481");
		// esp8266_setAP("KG","12345678");
		//esp8266_disconnect();
//	GB_esp8266_listAP();
	GB_esp8266_IPadress();
 8001fe4:	f7ff fe76 	bl	8001cd4 <GB_esp8266_IPadress>
		//esp8266_rst();
	}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	08002cd4 	.word	0x08002cd4
 8001ff0:	08002ce0 	.word	0x08002ce0

08001ff4 <__errno>:
 8001ff4:	4b01      	ldr	r3, [pc, #4]	; (8001ffc <__errno+0x8>)
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000010 	.word	0x20000010

08002000 <__libc_init_array>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	2600      	movs	r6, #0
 8002004:	4d0c      	ldr	r5, [pc, #48]	; (8002038 <__libc_init_array+0x38>)
 8002006:	4c0d      	ldr	r4, [pc, #52]	; (800203c <__libc_init_array+0x3c>)
 8002008:	1b64      	subs	r4, r4, r5
 800200a:	10a4      	asrs	r4, r4, #2
 800200c:	42a6      	cmp	r6, r4
 800200e:	d109      	bne.n	8002024 <__libc_init_array+0x24>
 8002010:	f000 fc92 	bl	8002938 <_init>
 8002014:	2600      	movs	r6, #0
 8002016:	4d0a      	ldr	r5, [pc, #40]	; (8002040 <__libc_init_array+0x40>)
 8002018:	4c0a      	ldr	r4, [pc, #40]	; (8002044 <__libc_init_array+0x44>)
 800201a:	1b64      	subs	r4, r4, r5
 800201c:	10a4      	asrs	r4, r4, #2
 800201e:	42a6      	cmp	r6, r4
 8002020:	d105      	bne.n	800202e <__libc_init_array+0x2e>
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	f855 3b04 	ldr.w	r3, [r5], #4
 8002028:	4798      	blx	r3
 800202a:	3601      	adds	r6, #1
 800202c:	e7ee      	b.n	800200c <__libc_init_array+0xc>
 800202e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002032:	4798      	blx	r3
 8002034:	3601      	adds	r6, #1
 8002036:	e7f2      	b.n	800201e <__libc_init_array+0x1e>
 8002038:	08002d38 	.word	0x08002d38
 800203c:	08002d38 	.word	0x08002d38
 8002040:	08002d38 	.word	0x08002d38
 8002044:	08002d3c 	.word	0x08002d3c

08002048 <memset>:
 8002048:	4603      	mov	r3, r0
 800204a:	4402      	add	r2, r0
 800204c:	4293      	cmp	r3, r2
 800204e:	d100      	bne.n	8002052 <memset+0xa>
 8002050:	4770      	bx	lr
 8002052:	f803 1b01 	strb.w	r1, [r3], #1
 8002056:	e7f9      	b.n	800204c <memset+0x4>

08002058 <siprintf>:
 8002058:	b40e      	push	{r1, r2, r3}
 800205a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800205e:	b500      	push	{lr}
 8002060:	b09c      	sub	sp, #112	; 0x70
 8002062:	ab1d      	add	r3, sp, #116	; 0x74
 8002064:	9002      	str	r0, [sp, #8]
 8002066:	9006      	str	r0, [sp, #24]
 8002068:	9107      	str	r1, [sp, #28]
 800206a:	9104      	str	r1, [sp, #16]
 800206c:	4808      	ldr	r0, [pc, #32]	; (8002090 <siprintf+0x38>)
 800206e:	4909      	ldr	r1, [pc, #36]	; (8002094 <siprintf+0x3c>)
 8002070:	f853 2b04 	ldr.w	r2, [r3], #4
 8002074:	9105      	str	r1, [sp, #20]
 8002076:	6800      	ldr	r0, [r0, #0]
 8002078:	a902      	add	r1, sp, #8
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	f000 f89e 	bl	80021bc <_svfiprintf_r>
 8002080:	2200      	movs	r2, #0
 8002082:	9b02      	ldr	r3, [sp, #8]
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	b01c      	add	sp, #112	; 0x70
 8002088:	f85d eb04 	ldr.w	lr, [sp], #4
 800208c:	b003      	add	sp, #12
 800208e:	4770      	bx	lr
 8002090:	20000010 	.word	0x20000010
 8002094:	ffff0208 	.word	0xffff0208

08002098 <strchr>:
 8002098:	4603      	mov	r3, r0
 800209a:	b2c9      	uxtb	r1, r1
 800209c:	4618      	mov	r0, r3
 800209e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020a2:	b112      	cbz	r2, 80020aa <strchr+0x12>
 80020a4:	428a      	cmp	r2, r1
 80020a6:	d1f9      	bne.n	800209c <strchr+0x4>
 80020a8:	4770      	bx	lr
 80020aa:	2900      	cmp	r1, #0
 80020ac:	bf18      	it	ne
 80020ae:	2000      	movne	r0, #0
 80020b0:	4770      	bx	lr

080020b2 <strncpy>:
 80020b2:	4603      	mov	r3, r0
 80020b4:	b510      	push	{r4, lr}
 80020b6:	3901      	subs	r1, #1
 80020b8:	b132      	cbz	r2, 80020c8 <strncpy+0x16>
 80020ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80020be:	3a01      	subs	r2, #1
 80020c0:	f803 4b01 	strb.w	r4, [r3], #1
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d1f7      	bne.n	80020b8 <strncpy+0x6>
 80020c8:	2100      	movs	r1, #0
 80020ca:	441a      	add	r2, r3
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d100      	bne.n	80020d2 <strncpy+0x20>
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	f803 1b01 	strb.w	r1, [r3], #1
 80020d6:	e7f9      	b.n	80020cc <strncpy+0x1a>

080020d8 <strstr>:
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	780c      	ldrb	r4, [r1, #0]
 80020dc:	b164      	cbz	r4, 80020f8 <strstr+0x20>
 80020de:	4603      	mov	r3, r0
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	1c5e      	adds	r6, r3, #1
 80020e6:	b90a      	cbnz	r2, 80020ec <strstr+0x14>
 80020e8:	4610      	mov	r0, r2
 80020ea:	e005      	b.n	80020f8 <strstr+0x20>
 80020ec:	4294      	cmp	r4, r2
 80020ee:	d108      	bne.n	8002102 <strstr+0x2a>
 80020f0:	460d      	mov	r5, r1
 80020f2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80020f6:	b902      	cbnz	r2, 80020fa <strstr+0x22>
 80020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80020fe:	4297      	cmp	r7, r2
 8002100:	d0f7      	beq.n	80020f2 <strstr+0x1a>
 8002102:	4633      	mov	r3, r6
 8002104:	e7ec      	b.n	80020e0 <strstr+0x8>

08002106 <__ssputs_r>:
 8002106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800210a:	688e      	ldr	r6, [r1, #8]
 800210c:	4682      	mov	sl, r0
 800210e:	429e      	cmp	r6, r3
 8002110:	460c      	mov	r4, r1
 8002112:	4690      	mov	r8, r2
 8002114:	461f      	mov	r7, r3
 8002116:	d838      	bhi.n	800218a <__ssputs_r+0x84>
 8002118:	898a      	ldrh	r2, [r1, #12]
 800211a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800211e:	d032      	beq.n	8002186 <__ssputs_r+0x80>
 8002120:	6825      	ldr	r5, [r4, #0]
 8002122:	6909      	ldr	r1, [r1, #16]
 8002124:	3301      	adds	r3, #1
 8002126:	eba5 0901 	sub.w	r9, r5, r1
 800212a:	6965      	ldr	r5, [r4, #20]
 800212c:	444b      	add	r3, r9
 800212e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002132:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002136:	106d      	asrs	r5, r5, #1
 8002138:	429d      	cmp	r5, r3
 800213a:	bf38      	it	cc
 800213c:	461d      	movcc	r5, r3
 800213e:	0553      	lsls	r3, r2, #21
 8002140:	d531      	bpl.n	80021a6 <__ssputs_r+0xa0>
 8002142:	4629      	mov	r1, r5
 8002144:	f000 fb52 	bl	80027ec <_malloc_r>
 8002148:	4606      	mov	r6, r0
 800214a:	b950      	cbnz	r0, 8002162 <__ssputs_r+0x5c>
 800214c:	230c      	movs	r3, #12
 800214e:	f04f 30ff 	mov.w	r0, #4294967295
 8002152:	f8ca 3000 	str.w	r3, [sl]
 8002156:	89a3      	ldrh	r3, [r4, #12]
 8002158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800215c:	81a3      	strh	r3, [r4, #12]
 800215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002162:	464a      	mov	r2, r9
 8002164:	6921      	ldr	r1, [r4, #16]
 8002166:	f000 facd 	bl	8002704 <memcpy>
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	81a3      	strh	r3, [r4, #12]
 8002176:	6126      	str	r6, [r4, #16]
 8002178:	444e      	add	r6, r9
 800217a:	6026      	str	r6, [r4, #0]
 800217c:	463e      	mov	r6, r7
 800217e:	6165      	str	r5, [r4, #20]
 8002180:	eba5 0509 	sub.w	r5, r5, r9
 8002184:	60a5      	str	r5, [r4, #8]
 8002186:	42be      	cmp	r6, r7
 8002188:	d900      	bls.n	800218c <__ssputs_r+0x86>
 800218a:	463e      	mov	r6, r7
 800218c:	4632      	mov	r2, r6
 800218e:	4641      	mov	r1, r8
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	f000 fac5 	bl	8002720 <memmove>
 8002196:	68a3      	ldr	r3, [r4, #8]
 8002198:	6822      	ldr	r2, [r4, #0]
 800219a:	1b9b      	subs	r3, r3, r6
 800219c:	4432      	add	r2, r6
 800219e:	2000      	movs	r0, #0
 80021a0:	60a3      	str	r3, [r4, #8]
 80021a2:	6022      	str	r2, [r4, #0]
 80021a4:	e7db      	b.n	800215e <__ssputs_r+0x58>
 80021a6:	462a      	mov	r2, r5
 80021a8:	f000 fb7a 	bl	80028a0 <_realloc_r>
 80021ac:	4606      	mov	r6, r0
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d1e1      	bne.n	8002176 <__ssputs_r+0x70>
 80021b2:	4650      	mov	r0, sl
 80021b4:	6921      	ldr	r1, [r4, #16]
 80021b6:	f000 facd 	bl	8002754 <_free_r>
 80021ba:	e7c7      	b.n	800214c <__ssputs_r+0x46>

080021bc <_svfiprintf_r>:
 80021bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c0:	4698      	mov	r8, r3
 80021c2:	898b      	ldrh	r3, [r1, #12]
 80021c4:	4607      	mov	r7, r0
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	460d      	mov	r5, r1
 80021ca:	4614      	mov	r4, r2
 80021cc:	b09d      	sub	sp, #116	; 0x74
 80021ce:	d50e      	bpl.n	80021ee <_svfiprintf_r+0x32>
 80021d0:	690b      	ldr	r3, [r1, #16]
 80021d2:	b963      	cbnz	r3, 80021ee <_svfiprintf_r+0x32>
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	f000 fb09 	bl	80027ec <_malloc_r>
 80021da:	6028      	str	r0, [r5, #0]
 80021dc:	6128      	str	r0, [r5, #16]
 80021de:	b920      	cbnz	r0, 80021ea <_svfiprintf_r+0x2e>
 80021e0:	230c      	movs	r3, #12
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	e0d1      	b.n	800238e <_svfiprintf_r+0x1d2>
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	616b      	str	r3, [r5, #20]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9309      	str	r3, [sp, #36]	; 0x24
 80021f2:	2320      	movs	r3, #32
 80021f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021f8:	2330      	movs	r3, #48	; 0x30
 80021fa:	f04f 0901 	mov.w	r9, #1
 80021fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002202:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80023a8 <_svfiprintf_r+0x1ec>
 8002206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800220a:	4623      	mov	r3, r4
 800220c:	469a      	mov	sl, r3
 800220e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002212:	b10a      	cbz	r2, 8002218 <_svfiprintf_r+0x5c>
 8002214:	2a25      	cmp	r2, #37	; 0x25
 8002216:	d1f9      	bne.n	800220c <_svfiprintf_r+0x50>
 8002218:	ebba 0b04 	subs.w	fp, sl, r4
 800221c:	d00b      	beq.n	8002236 <_svfiprintf_r+0x7a>
 800221e:	465b      	mov	r3, fp
 8002220:	4622      	mov	r2, r4
 8002222:	4629      	mov	r1, r5
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff ff6e 	bl	8002106 <__ssputs_r>
 800222a:	3001      	adds	r0, #1
 800222c:	f000 80aa 	beq.w	8002384 <_svfiprintf_r+0x1c8>
 8002230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002232:	445a      	add	r2, fp
 8002234:	9209      	str	r2, [sp, #36]	; 0x24
 8002236:	f89a 3000 	ldrb.w	r3, [sl]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a2 	beq.w	8002384 <_svfiprintf_r+0x1c8>
 8002240:	2300      	movs	r3, #0
 8002242:	f04f 32ff 	mov.w	r2, #4294967295
 8002246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800224a:	f10a 0a01 	add.w	sl, sl, #1
 800224e:	9304      	str	r3, [sp, #16]
 8002250:	9307      	str	r3, [sp, #28]
 8002252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002256:	931a      	str	r3, [sp, #104]	; 0x68
 8002258:	4654      	mov	r4, sl
 800225a:	2205      	movs	r2, #5
 800225c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002260:	4851      	ldr	r0, [pc, #324]	; (80023a8 <_svfiprintf_r+0x1ec>)
 8002262:	f000 fa41 	bl	80026e8 <memchr>
 8002266:	9a04      	ldr	r2, [sp, #16]
 8002268:	b9d8      	cbnz	r0, 80022a2 <_svfiprintf_r+0xe6>
 800226a:	06d0      	lsls	r0, r2, #27
 800226c:	bf44      	itt	mi
 800226e:	2320      	movmi	r3, #32
 8002270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002274:	0711      	lsls	r1, r2, #28
 8002276:	bf44      	itt	mi
 8002278:	232b      	movmi	r3, #43	; 0x2b
 800227a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800227e:	f89a 3000 	ldrb.w	r3, [sl]
 8002282:	2b2a      	cmp	r3, #42	; 0x2a
 8002284:	d015      	beq.n	80022b2 <_svfiprintf_r+0xf6>
 8002286:	4654      	mov	r4, sl
 8002288:	2000      	movs	r0, #0
 800228a:	f04f 0c0a 	mov.w	ip, #10
 800228e:	9a07      	ldr	r2, [sp, #28]
 8002290:	4621      	mov	r1, r4
 8002292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002296:	3b30      	subs	r3, #48	; 0x30
 8002298:	2b09      	cmp	r3, #9
 800229a:	d94e      	bls.n	800233a <_svfiprintf_r+0x17e>
 800229c:	b1b0      	cbz	r0, 80022cc <_svfiprintf_r+0x110>
 800229e:	9207      	str	r2, [sp, #28]
 80022a0:	e014      	b.n	80022cc <_svfiprintf_r+0x110>
 80022a2:	eba0 0308 	sub.w	r3, r0, r8
 80022a6:	fa09 f303 	lsl.w	r3, r9, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	46a2      	mov	sl, r4
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	e7d2      	b.n	8002258 <_svfiprintf_r+0x9c>
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	1d19      	adds	r1, r3, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	9103      	str	r1, [sp, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfbb      	ittet	lt
 80022be:	425b      	neglt	r3, r3
 80022c0:	f042 0202 	orrlt.w	r2, r2, #2
 80022c4:	9307      	strge	r3, [sp, #28]
 80022c6:	9307      	strlt	r3, [sp, #28]
 80022c8:	bfb8      	it	lt
 80022ca:	9204      	strlt	r2, [sp, #16]
 80022cc:	7823      	ldrb	r3, [r4, #0]
 80022ce:	2b2e      	cmp	r3, #46	; 0x2e
 80022d0:	d10c      	bne.n	80022ec <_svfiprintf_r+0x130>
 80022d2:	7863      	ldrb	r3, [r4, #1]
 80022d4:	2b2a      	cmp	r3, #42	; 0x2a
 80022d6:	d135      	bne.n	8002344 <_svfiprintf_r+0x188>
 80022d8:	9b03      	ldr	r3, [sp, #12]
 80022da:	3402      	adds	r4, #2
 80022dc:	1d1a      	adds	r2, r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	9203      	str	r2, [sp, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bfb8      	it	lt
 80022e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80022ea:	9305      	str	r3, [sp, #20]
 80022ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80023b8 <_svfiprintf_r+0x1fc>
 80022f0:	2203      	movs	r2, #3
 80022f2:	4650      	mov	r0, sl
 80022f4:	7821      	ldrb	r1, [r4, #0]
 80022f6:	f000 f9f7 	bl	80026e8 <memchr>
 80022fa:	b140      	cbz	r0, 800230e <_svfiprintf_r+0x152>
 80022fc:	2340      	movs	r3, #64	; 0x40
 80022fe:	eba0 000a 	sub.w	r0, r0, sl
 8002302:	fa03 f000 	lsl.w	r0, r3, r0
 8002306:	9b04      	ldr	r3, [sp, #16]
 8002308:	3401      	adds	r4, #1
 800230a:	4303      	orrs	r3, r0
 800230c:	9304      	str	r3, [sp, #16]
 800230e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002312:	2206      	movs	r2, #6
 8002314:	4825      	ldr	r0, [pc, #148]	; (80023ac <_svfiprintf_r+0x1f0>)
 8002316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800231a:	f000 f9e5 	bl	80026e8 <memchr>
 800231e:	2800      	cmp	r0, #0
 8002320:	d038      	beq.n	8002394 <_svfiprintf_r+0x1d8>
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <_svfiprintf_r+0x1f4>)
 8002324:	bb1b      	cbnz	r3, 800236e <_svfiprintf_r+0x1b2>
 8002326:	9b03      	ldr	r3, [sp, #12]
 8002328:	3307      	adds	r3, #7
 800232a:	f023 0307 	bic.w	r3, r3, #7
 800232e:	3308      	adds	r3, #8
 8002330:	9303      	str	r3, [sp, #12]
 8002332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002334:	4433      	add	r3, r6
 8002336:	9309      	str	r3, [sp, #36]	; 0x24
 8002338:	e767      	b.n	800220a <_svfiprintf_r+0x4e>
 800233a:	460c      	mov	r4, r1
 800233c:	2001      	movs	r0, #1
 800233e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002342:	e7a5      	b.n	8002290 <_svfiprintf_r+0xd4>
 8002344:	2300      	movs	r3, #0
 8002346:	f04f 0c0a 	mov.w	ip, #10
 800234a:	4619      	mov	r1, r3
 800234c:	3401      	adds	r4, #1
 800234e:	9305      	str	r3, [sp, #20]
 8002350:	4620      	mov	r0, r4
 8002352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002356:	3a30      	subs	r2, #48	; 0x30
 8002358:	2a09      	cmp	r2, #9
 800235a:	d903      	bls.n	8002364 <_svfiprintf_r+0x1a8>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0c5      	beq.n	80022ec <_svfiprintf_r+0x130>
 8002360:	9105      	str	r1, [sp, #20]
 8002362:	e7c3      	b.n	80022ec <_svfiprintf_r+0x130>
 8002364:	4604      	mov	r4, r0
 8002366:	2301      	movs	r3, #1
 8002368:	fb0c 2101 	mla	r1, ip, r1, r2
 800236c:	e7f0      	b.n	8002350 <_svfiprintf_r+0x194>
 800236e:	ab03      	add	r3, sp, #12
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	462a      	mov	r2, r5
 8002374:	4638      	mov	r0, r7
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <_svfiprintf_r+0x1f8>)
 8002378:	a904      	add	r1, sp, #16
 800237a:	f3af 8000 	nop.w
 800237e:	1c42      	adds	r2, r0, #1
 8002380:	4606      	mov	r6, r0
 8002382:	d1d6      	bne.n	8002332 <_svfiprintf_r+0x176>
 8002384:	89ab      	ldrh	r3, [r5, #12]
 8002386:	065b      	lsls	r3, r3, #25
 8002388:	f53f af2c 	bmi.w	80021e4 <_svfiprintf_r+0x28>
 800238c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800238e:	b01d      	add	sp, #116	; 0x74
 8002390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002394:	ab03      	add	r3, sp, #12
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	462a      	mov	r2, r5
 800239a:	4638      	mov	r0, r7
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <_svfiprintf_r+0x1f8>)
 800239e:	a904      	add	r1, sp, #16
 80023a0:	f000 f87c 	bl	800249c <_printf_i>
 80023a4:	e7eb      	b.n	800237e <_svfiprintf_r+0x1c2>
 80023a6:	bf00      	nop
 80023a8:	08002d04 	.word	0x08002d04
 80023ac:	08002d0e 	.word	0x08002d0e
 80023b0:	00000000 	.word	0x00000000
 80023b4:	08002107 	.word	0x08002107
 80023b8:	08002d0a 	.word	0x08002d0a

080023bc <_printf_common>:
 80023bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c0:	4616      	mov	r6, r2
 80023c2:	4699      	mov	r9, r3
 80023c4:	688a      	ldr	r2, [r1, #8]
 80023c6:	690b      	ldr	r3, [r1, #16]
 80023c8:	4607      	mov	r7, r0
 80023ca:	4293      	cmp	r3, r2
 80023cc:	bfb8      	it	lt
 80023ce:	4613      	movlt	r3, r2
 80023d0:	6033      	str	r3, [r6, #0]
 80023d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023d6:	460c      	mov	r4, r1
 80023d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023dc:	b10a      	cbz	r2, 80023e2 <_printf_common+0x26>
 80023de:	3301      	adds	r3, #1
 80023e0:	6033      	str	r3, [r6, #0]
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	0699      	lsls	r1, r3, #26
 80023e6:	bf42      	ittt	mi
 80023e8:	6833      	ldrmi	r3, [r6, #0]
 80023ea:	3302      	addmi	r3, #2
 80023ec:	6033      	strmi	r3, [r6, #0]
 80023ee:	6825      	ldr	r5, [r4, #0]
 80023f0:	f015 0506 	ands.w	r5, r5, #6
 80023f4:	d106      	bne.n	8002404 <_printf_common+0x48>
 80023f6:	f104 0a19 	add.w	sl, r4, #25
 80023fa:	68e3      	ldr	r3, [r4, #12]
 80023fc:	6832      	ldr	r2, [r6, #0]
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	42ab      	cmp	r3, r5
 8002402:	dc28      	bgt.n	8002456 <_printf_common+0x9a>
 8002404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002408:	1e13      	subs	r3, r2, #0
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	bf18      	it	ne
 800240e:	2301      	movne	r3, #1
 8002410:	0692      	lsls	r2, r2, #26
 8002412:	d42d      	bmi.n	8002470 <_printf_common+0xb4>
 8002414:	4649      	mov	r1, r9
 8002416:	4638      	mov	r0, r7
 8002418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800241c:	47c0      	blx	r8
 800241e:	3001      	adds	r0, #1
 8002420:	d020      	beq.n	8002464 <_printf_common+0xa8>
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	68e5      	ldr	r5, [r4, #12]
 8002426:	f003 0306 	and.w	r3, r3, #6
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf18      	it	ne
 800242e:	2500      	movne	r5, #0
 8002430:	6832      	ldr	r2, [r6, #0]
 8002432:	f04f 0600 	mov.w	r6, #0
 8002436:	68a3      	ldr	r3, [r4, #8]
 8002438:	bf08      	it	eq
 800243a:	1aad      	subeq	r5, r5, r2
 800243c:	6922      	ldr	r2, [r4, #16]
 800243e:	bf08      	it	eq
 8002440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002444:	4293      	cmp	r3, r2
 8002446:	bfc4      	itt	gt
 8002448:	1a9b      	subgt	r3, r3, r2
 800244a:	18ed      	addgt	r5, r5, r3
 800244c:	341a      	adds	r4, #26
 800244e:	42b5      	cmp	r5, r6
 8002450:	d11a      	bne.n	8002488 <_printf_common+0xcc>
 8002452:	2000      	movs	r0, #0
 8002454:	e008      	b.n	8002468 <_printf_common+0xac>
 8002456:	2301      	movs	r3, #1
 8002458:	4652      	mov	r2, sl
 800245a:	4649      	mov	r1, r9
 800245c:	4638      	mov	r0, r7
 800245e:	47c0      	blx	r8
 8002460:	3001      	adds	r0, #1
 8002462:	d103      	bne.n	800246c <_printf_common+0xb0>
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800246c:	3501      	adds	r5, #1
 800246e:	e7c4      	b.n	80023fa <_printf_common+0x3e>
 8002470:	2030      	movs	r0, #48	; 0x30
 8002472:	18e1      	adds	r1, r4, r3
 8002474:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800247e:	4422      	add	r2, r4
 8002480:	3302      	adds	r3, #2
 8002482:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002486:	e7c5      	b.n	8002414 <_printf_common+0x58>
 8002488:	2301      	movs	r3, #1
 800248a:	4622      	mov	r2, r4
 800248c:	4649      	mov	r1, r9
 800248e:	4638      	mov	r0, r7
 8002490:	47c0      	blx	r8
 8002492:	3001      	adds	r0, #1
 8002494:	d0e6      	beq.n	8002464 <_printf_common+0xa8>
 8002496:	3601      	adds	r6, #1
 8002498:	e7d9      	b.n	800244e <_printf_common+0x92>
	...

0800249c <_printf_i>:
 800249c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024a0:	460c      	mov	r4, r1
 80024a2:	7e27      	ldrb	r7, [r4, #24]
 80024a4:	4691      	mov	r9, r2
 80024a6:	2f78      	cmp	r7, #120	; 0x78
 80024a8:	4680      	mov	r8, r0
 80024aa:	469a      	mov	sl, r3
 80024ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024b2:	d807      	bhi.n	80024c4 <_printf_i+0x28>
 80024b4:	2f62      	cmp	r7, #98	; 0x62
 80024b6:	d80a      	bhi.n	80024ce <_printf_i+0x32>
 80024b8:	2f00      	cmp	r7, #0
 80024ba:	f000 80d9 	beq.w	8002670 <_printf_i+0x1d4>
 80024be:	2f58      	cmp	r7, #88	; 0x58
 80024c0:	f000 80a4 	beq.w	800260c <_printf_i+0x170>
 80024c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80024c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024cc:	e03a      	b.n	8002544 <_printf_i+0xa8>
 80024ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024d2:	2b15      	cmp	r3, #21
 80024d4:	d8f6      	bhi.n	80024c4 <_printf_i+0x28>
 80024d6:	a001      	add	r0, pc, #4	; (adr r0, 80024dc <_printf_i+0x40>)
 80024d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80024dc:	08002535 	.word	0x08002535
 80024e0:	08002549 	.word	0x08002549
 80024e4:	080024c5 	.word	0x080024c5
 80024e8:	080024c5 	.word	0x080024c5
 80024ec:	080024c5 	.word	0x080024c5
 80024f0:	080024c5 	.word	0x080024c5
 80024f4:	08002549 	.word	0x08002549
 80024f8:	080024c5 	.word	0x080024c5
 80024fc:	080024c5 	.word	0x080024c5
 8002500:	080024c5 	.word	0x080024c5
 8002504:	080024c5 	.word	0x080024c5
 8002508:	08002657 	.word	0x08002657
 800250c:	08002579 	.word	0x08002579
 8002510:	08002639 	.word	0x08002639
 8002514:	080024c5 	.word	0x080024c5
 8002518:	080024c5 	.word	0x080024c5
 800251c:	08002679 	.word	0x08002679
 8002520:	080024c5 	.word	0x080024c5
 8002524:	08002579 	.word	0x08002579
 8002528:	080024c5 	.word	0x080024c5
 800252c:	080024c5 	.word	0x080024c5
 8002530:	08002641 	.word	0x08002641
 8002534:	680b      	ldr	r3, [r1, #0]
 8002536:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	600a      	str	r2, [r1, #0]
 8002540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002544:	2301      	movs	r3, #1
 8002546:	e0a4      	b.n	8002692 <_printf_i+0x1f6>
 8002548:	6825      	ldr	r5, [r4, #0]
 800254a:	6808      	ldr	r0, [r1, #0]
 800254c:	062e      	lsls	r6, r5, #24
 800254e:	f100 0304 	add.w	r3, r0, #4
 8002552:	d50a      	bpl.n	800256a <_printf_i+0xce>
 8002554:	6805      	ldr	r5, [r0, #0]
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	2d00      	cmp	r5, #0
 800255a:	da03      	bge.n	8002564 <_printf_i+0xc8>
 800255c:	232d      	movs	r3, #45	; 0x2d
 800255e:	426d      	negs	r5, r5
 8002560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002564:	230a      	movs	r3, #10
 8002566:	485e      	ldr	r0, [pc, #376]	; (80026e0 <_printf_i+0x244>)
 8002568:	e019      	b.n	800259e <_printf_i+0x102>
 800256a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800256e:	6805      	ldr	r5, [r0, #0]
 8002570:	600b      	str	r3, [r1, #0]
 8002572:	bf18      	it	ne
 8002574:	b22d      	sxthne	r5, r5
 8002576:	e7ef      	b.n	8002558 <_printf_i+0xbc>
 8002578:	680b      	ldr	r3, [r1, #0]
 800257a:	6825      	ldr	r5, [r4, #0]
 800257c:	1d18      	adds	r0, r3, #4
 800257e:	6008      	str	r0, [r1, #0]
 8002580:	0628      	lsls	r0, r5, #24
 8002582:	d501      	bpl.n	8002588 <_printf_i+0xec>
 8002584:	681d      	ldr	r5, [r3, #0]
 8002586:	e002      	b.n	800258e <_printf_i+0xf2>
 8002588:	0669      	lsls	r1, r5, #25
 800258a:	d5fb      	bpl.n	8002584 <_printf_i+0xe8>
 800258c:	881d      	ldrh	r5, [r3, #0]
 800258e:	2f6f      	cmp	r7, #111	; 0x6f
 8002590:	bf0c      	ite	eq
 8002592:	2308      	moveq	r3, #8
 8002594:	230a      	movne	r3, #10
 8002596:	4852      	ldr	r0, [pc, #328]	; (80026e0 <_printf_i+0x244>)
 8002598:	2100      	movs	r1, #0
 800259a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800259e:	6866      	ldr	r6, [r4, #4]
 80025a0:	2e00      	cmp	r6, #0
 80025a2:	bfa8      	it	ge
 80025a4:	6821      	ldrge	r1, [r4, #0]
 80025a6:	60a6      	str	r6, [r4, #8]
 80025a8:	bfa4      	itt	ge
 80025aa:	f021 0104 	bicge.w	r1, r1, #4
 80025ae:	6021      	strge	r1, [r4, #0]
 80025b0:	b90d      	cbnz	r5, 80025b6 <_printf_i+0x11a>
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d04d      	beq.n	8002652 <_printf_i+0x1b6>
 80025b6:	4616      	mov	r6, r2
 80025b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80025bc:	fb03 5711 	mls	r7, r3, r1, r5
 80025c0:	5dc7      	ldrb	r7, [r0, r7]
 80025c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025c6:	462f      	mov	r7, r5
 80025c8:	42bb      	cmp	r3, r7
 80025ca:	460d      	mov	r5, r1
 80025cc:	d9f4      	bls.n	80025b8 <_printf_i+0x11c>
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d10b      	bne.n	80025ea <_printf_i+0x14e>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	07df      	lsls	r7, r3, #31
 80025d6:	d508      	bpl.n	80025ea <_printf_i+0x14e>
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	6861      	ldr	r1, [r4, #4]
 80025dc:	4299      	cmp	r1, r3
 80025de:	bfde      	ittt	le
 80025e0:	2330      	movle	r3, #48	; 0x30
 80025e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025ea:	1b92      	subs	r2, r2, r6
 80025ec:	6122      	str	r2, [r4, #16]
 80025ee:	464b      	mov	r3, r9
 80025f0:	4621      	mov	r1, r4
 80025f2:	4640      	mov	r0, r8
 80025f4:	f8cd a000 	str.w	sl, [sp]
 80025f8:	aa03      	add	r2, sp, #12
 80025fa:	f7ff fedf 	bl	80023bc <_printf_common>
 80025fe:	3001      	adds	r0, #1
 8002600:	d14c      	bne.n	800269c <_printf_i+0x200>
 8002602:	f04f 30ff 	mov.w	r0, #4294967295
 8002606:	b004      	add	sp, #16
 8002608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800260c:	4834      	ldr	r0, [pc, #208]	; (80026e0 <_printf_i+0x244>)
 800260e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002612:	680e      	ldr	r6, [r1, #0]
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	f856 5b04 	ldr.w	r5, [r6], #4
 800261a:	061f      	lsls	r7, r3, #24
 800261c:	600e      	str	r6, [r1, #0]
 800261e:	d514      	bpl.n	800264a <_printf_i+0x1ae>
 8002620:	07d9      	lsls	r1, r3, #31
 8002622:	bf44      	itt	mi
 8002624:	f043 0320 	orrmi.w	r3, r3, #32
 8002628:	6023      	strmi	r3, [r4, #0]
 800262a:	b91d      	cbnz	r5, 8002634 <_printf_i+0x198>
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	f023 0320 	bic.w	r3, r3, #32
 8002632:	6023      	str	r3, [r4, #0]
 8002634:	2310      	movs	r3, #16
 8002636:	e7af      	b.n	8002598 <_printf_i+0xfc>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	2378      	movs	r3, #120	; 0x78
 8002642:	4828      	ldr	r0, [pc, #160]	; (80026e4 <_printf_i+0x248>)
 8002644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002648:	e7e3      	b.n	8002612 <_printf_i+0x176>
 800264a:	065e      	lsls	r6, r3, #25
 800264c:	bf48      	it	mi
 800264e:	b2ad      	uxthmi	r5, r5
 8002650:	e7e6      	b.n	8002620 <_printf_i+0x184>
 8002652:	4616      	mov	r6, r2
 8002654:	e7bb      	b.n	80025ce <_printf_i+0x132>
 8002656:	680b      	ldr	r3, [r1, #0]
 8002658:	6826      	ldr	r6, [r4, #0]
 800265a:	1d1d      	adds	r5, r3, #4
 800265c:	6960      	ldr	r0, [r4, #20]
 800265e:	600d      	str	r5, [r1, #0]
 8002660:	0635      	lsls	r5, r6, #24
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	d501      	bpl.n	800266a <_printf_i+0x1ce>
 8002666:	6018      	str	r0, [r3, #0]
 8002668:	e002      	b.n	8002670 <_printf_i+0x1d4>
 800266a:	0671      	lsls	r1, r6, #25
 800266c:	d5fb      	bpl.n	8002666 <_printf_i+0x1ca>
 800266e:	8018      	strh	r0, [r3, #0]
 8002670:	2300      	movs	r3, #0
 8002672:	4616      	mov	r6, r2
 8002674:	6123      	str	r3, [r4, #16]
 8002676:	e7ba      	b.n	80025ee <_printf_i+0x152>
 8002678:	680b      	ldr	r3, [r1, #0]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	600a      	str	r2, [r1, #0]
 800267e:	681e      	ldr	r6, [r3, #0]
 8002680:	2100      	movs	r1, #0
 8002682:	4630      	mov	r0, r6
 8002684:	6862      	ldr	r2, [r4, #4]
 8002686:	f000 f82f 	bl	80026e8 <memchr>
 800268a:	b108      	cbz	r0, 8002690 <_printf_i+0x1f4>
 800268c:	1b80      	subs	r0, r0, r6
 800268e:	6060      	str	r0, [r4, #4]
 8002690:	6863      	ldr	r3, [r4, #4]
 8002692:	6123      	str	r3, [r4, #16]
 8002694:	2300      	movs	r3, #0
 8002696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800269a:	e7a8      	b.n	80025ee <_printf_i+0x152>
 800269c:	4632      	mov	r2, r6
 800269e:	4649      	mov	r1, r9
 80026a0:	4640      	mov	r0, r8
 80026a2:	6923      	ldr	r3, [r4, #16]
 80026a4:	47d0      	blx	sl
 80026a6:	3001      	adds	r0, #1
 80026a8:	d0ab      	beq.n	8002602 <_printf_i+0x166>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	079b      	lsls	r3, r3, #30
 80026ae:	d413      	bmi.n	80026d8 <_printf_i+0x23c>
 80026b0:	68e0      	ldr	r0, [r4, #12]
 80026b2:	9b03      	ldr	r3, [sp, #12]
 80026b4:	4298      	cmp	r0, r3
 80026b6:	bfb8      	it	lt
 80026b8:	4618      	movlt	r0, r3
 80026ba:	e7a4      	b.n	8002606 <_printf_i+0x16a>
 80026bc:	2301      	movs	r3, #1
 80026be:	4632      	mov	r2, r6
 80026c0:	4649      	mov	r1, r9
 80026c2:	4640      	mov	r0, r8
 80026c4:	47d0      	blx	sl
 80026c6:	3001      	adds	r0, #1
 80026c8:	d09b      	beq.n	8002602 <_printf_i+0x166>
 80026ca:	3501      	adds	r5, #1
 80026cc:	68e3      	ldr	r3, [r4, #12]
 80026ce:	9903      	ldr	r1, [sp, #12]
 80026d0:	1a5b      	subs	r3, r3, r1
 80026d2:	42ab      	cmp	r3, r5
 80026d4:	dcf2      	bgt.n	80026bc <_printf_i+0x220>
 80026d6:	e7eb      	b.n	80026b0 <_printf_i+0x214>
 80026d8:	2500      	movs	r5, #0
 80026da:	f104 0619 	add.w	r6, r4, #25
 80026de:	e7f5      	b.n	80026cc <_printf_i+0x230>
 80026e0:	08002d15 	.word	0x08002d15
 80026e4:	08002d26 	.word	0x08002d26

080026e8 <memchr>:
 80026e8:	4603      	mov	r3, r0
 80026ea:	b510      	push	{r4, lr}
 80026ec:	b2c9      	uxtb	r1, r1
 80026ee:	4402      	add	r2, r0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	d101      	bne.n	80026fa <memchr+0x12>
 80026f6:	2000      	movs	r0, #0
 80026f8:	e003      	b.n	8002702 <memchr+0x1a>
 80026fa:	7804      	ldrb	r4, [r0, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	428c      	cmp	r4, r1
 8002700:	d1f6      	bne.n	80026f0 <memchr+0x8>
 8002702:	bd10      	pop	{r4, pc}

08002704 <memcpy>:
 8002704:	440a      	add	r2, r1
 8002706:	4291      	cmp	r1, r2
 8002708:	f100 33ff 	add.w	r3, r0, #4294967295
 800270c:	d100      	bne.n	8002710 <memcpy+0xc>
 800270e:	4770      	bx	lr
 8002710:	b510      	push	{r4, lr}
 8002712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002716:	4291      	cmp	r1, r2
 8002718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800271c:	d1f9      	bne.n	8002712 <memcpy+0xe>
 800271e:	bd10      	pop	{r4, pc}

08002720 <memmove>:
 8002720:	4288      	cmp	r0, r1
 8002722:	b510      	push	{r4, lr}
 8002724:	eb01 0402 	add.w	r4, r1, r2
 8002728:	d902      	bls.n	8002730 <memmove+0x10>
 800272a:	4284      	cmp	r4, r0
 800272c:	4623      	mov	r3, r4
 800272e:	d807      	bhi.n	8002740 <memmove+0x20>
 8002730:	1e43      	subs	r3, r0, #1
 8002732:	42a1      	cmp	r1, r4
 8002734:	d008      	beq.n	8002748 <memmove+0x28>
 8002736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800273a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800273e:	e7f8      	b.n	8002732 <memmove+0x12>
 8002740:	4601      	mov	r1, r0
 8002742:	4402      	add	r2, r0
 8002744:	428a      	cmp	r2, r1
 8002746:	d100      	bne.n	800274a <memmove+0x2a>
 8002748:	bd10      	pop	{r4, pc}
 800274a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800274e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002752:	e7f7      	b.n	8002744 <memmove+0x24>

08002754 <_free_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4605      	mov	r5, r0
 8002758:	2900      	cmp	r1, #0
 800275a:	d043      	beq.n	80027e4 <_free_r+0x90>
 800275c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002760:	1f0c      	subs	r4, r1, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	bfb8      	it	lt
 8002766:	18e4      	addlt	r4, r4, r3
 8002768:	f000 f8d0 	bl	800290c <__malloc_lock>
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <_free_r+0x94>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	4610      	mov	r0, r2
 8002772:	b933      	cbnz	r3, 8002782 <_free_r+0x2e>
 8002774:	6063      	str	r3, [r4, #4]
 8002776:	6014      	str	r4, [r2, #0]
 8002778:	4628      	mov	r0, r5
 800277a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800277e:	f000 b8cb 	b.w	8002918 <__malloc_unlock>
 8002782:	42a3      	cmp	r3, r4
 8002784:	d90a      	bls.n	800279c <_free_r+0x48>
 8002786:	6821      	ldr	r1, [r4, #0]
 8002788:	1862      	adds	r2, r4, r1
 800278a:	4293      	cmp	r3, r2
 800278c:	bf01      	itttt	eq
 800278e:	681a      	ldreq	r2, [r3, #0]
 8002790:	685b      	ldreq	r3, [r3, #4]
 8002792:	1852      	addeq	r2, r2, r1
 8002794:	6022      	streq	r2, [r4, #0]
 8002796:	6063      	str	r3, [r4, #4]
 8002798:	6004      	str	r4, [r0, #0]
 800279a:	e7ed      	b.n	8002778 <_free_r+0x24>
 800279c:	461a      	mov	r2, r3
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	b10b      	cbz	r3, 80027a6 <_free_r+0x52>
 80027a2:	42a3      	cmp	r3, r4
 80027a4:	d9fa      	bls.n	800279c <_free_r+0x48>
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	1850      	adds	r0, r2, r1
 80027aa:	42a0      	cmp	r0, r4
 80027ac:	d10b      	bne.n	80027c6 <_free_r+0x72>
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	4401      	add	r1, r0
 80027b2:	1850      	adds	r0, r2, r1
 80027b4:	4283      	cmp	r3, r0
 80027b6:	6011      	str	r1, [r2, #0]
 80027b8:	d1de      	bne.n	8002778 <_free_r+0x24>
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4401      	add	r1, r0
 80027c0:	6011      	str	r1, [r2, #0]
 80027c2:	6053      	str	r3, [r2, #4]
 80027c4:	e7d8      	b.n	8002778 <_free_r+0x24>
 80027c6:	d902      	bls.n	80027ce <_free_r+0x7a>
 80027c8:	230c      	movs	r3, #12
 80027ca:	602b      	str	r3, [r5, #0]
 80027cc:	e7d4      	b.n	8002778 <_free_r+0x24>
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	1821      	adds	r1, r4, r0
 80027d2:	428b      	cmp	r3, r1
 80027d4:	bf01      	itttt	eq
 80027d6:	6819      	ldreq	r1, [r3, #0]
 80027d8:	685b      	ldreq	r3, [r3, #4]
 80027da:	1809      	addeq	r1, r1, r0
 80027dc:	6021      	streq	r1, [r4, #0]
 80027de:	6063      	str	r3, [r4, #4]
 80027e0:	6054      	str	r4, [r2, #4]
 80027e2:	e7c9      	b.n	8002778 <_free_r+0x24>
 80027e4:	bd38      	pop	{r3, r4, r5, pc}
 80027e6:	bf00      	nop
 80027e8:	200000a0 	.word	0x200000a0

080027ec <_malloc_r>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	1ccd      	adds	r5, r1, #3
 80027f0:	f025 0503 	bic.w	r5, r5, #3
 80027f4:	3508      	adds	r5, #8
 80027f6:	2d0c      	cmp	r5, #12
 80027f8:	bf38      	it	cc
 80027fa:	250c      	movcc	r5, #12
 80027fc:	2d00      	cmp	r5, #0
 80027fe:	4606      	mov	r6, r0
 8002800:	db01      	blt.n	8002806 <_malloc_r+0x1a>
 8002802:	42a9      	cmp	r1, r5
 8002804:	d903      	bls.n	800280e <_malloc_r+0x22>
 8002806:	230c      	movs	r3, #12
 8002808:	6033      	str	r3, [r6, #0]
 800280a:	2000      	movs	r0, #0
 800280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800280e:	f000 f87d 	bl	800290c <__malloc_lock>
 8002812:	4921      	ldr	r1, [pc, #132]	; (8002898 <_malloc_r+0xac>)
 8002814:	680a      	ldr	r2, [r1, #0]
 8002816:	4614      	mov	r4, r2
 8002818:	b99c      	cbnz	r4, 8002842 <_malloc_r+0x56>
 800281a:	4f20      	ldr	r7, [pc, #128]	; (800289c <_malloc_r+0xb0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b923      	cbnz	r3, 800282a <_malloc_r+0x3e>
 8002820:	4621      	mov	r1, r4
 8002822:	4630      	mov	r0, r6
 8002824:	f000 f862 	bl	80028ec <_sbrk_r>
 8002828:	6038      	str	r0, [r7, #0]
 800282a:	4629      	mov	r1, r5
 800282c:	4630      	mov	r0, r6
 800282e:	f000 f85d 	bl	80028ec <_sbrk_r>
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	d123      	bne.n	800287e <_malloc_r+0x92>
 8002836:	230c      	movs	r3, #12
 8002838:	4630      	mov	r0, r6
 800283a:	6033      	str	r3, [r6, #0]
 800283c:	f000 f86c 	bl	8002918 <__malloc_unlock>
 8002840:	e7e3      	b.n	800280a <_malloc_r+0x1e>
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	1b5b      	subs	r3, r3, r5
 8002846:	d417      	bmi.n	8002878 <_malloc_r+0x8c>
 8002848:	2b0b      	cmp	r3, #11
 800284a:	d903      	bls.n	8002854 <_malloc_r+0x68>
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	441c      	add	r4, r3
 8002850:	6025      	str	r5, [r4, #0]
 8002852:	e004      	b.n	800285e <_malloc_r+0x72>
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	42a2      	cmp	r2, r4
 8002858:	bf0c      	ite	eq
 800285a:	600b      	streq	r3, [r1, #0]
 800285c:	6053      	strne	r3, [r2, #4]
 800285e:	4630      	mov	r0, r6
 8002860:	f000 f85a 	bl	8002918 <__malloc_unlock>
 8002864:	f104 000b 	add.w	r0, r4, #11
 8002868:	1d23      	adds	r3, r4, #4
 800286a:	f020 0007 	bic.w	r0, r0, #7
 800286e:	1ac2      	subs	r2, r0, r3
 8002870:	d0cc      	beq.n	800280c <_malloc_r+0x20>
 8002872:	1a1b      	subs	r3, r3, r0
 8002874:	50a3      	str	r3, [r4, r2]
 8002876:	e7c9      	b.n	800280c <_malloc_r+0x20>
 8002878:	4622      	mov	r2, r4
 800287a:	6864      	ldr	r4, [r4, #4]
 800287c:	e7cc      	b.n	8002818 <_malloc_r+0x2c>
 800287e:	1cc4      	adds	r4, r0, #3
 8002880:	f024 0403 	bic.w	r4, r4, #3
 8002884:	42a0      	cmp	r0, r4
 8002886:	d0e3      	beq.n	8002850 <_malloc_r+0x64>
 8002888:	1a21      	subs	r1, r4, r0
 800288a:	4630      	mov	r0, r6
 800288c:	f000 f82e 	bl	80028ec <_sbrk_r>
 8002890:	3001      	adds	r0, #1
 8002892:	d1dd      	bne.n	8002850 <_malloc_r+0x64>
 8002894:	e7cf      	b.n	8002836 <_malloc_r+0x4a>
 8002896:	bf00      	nop
 8002898:	200000a0 	.word	0x200000a0
 800289c:	200000a4 	.word	0x200000a4

080028a0 <_realloc_r>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	4607      	mov	r7, r0
 80028a4:	4614      	mov	r4, r2
 80028a6:	460e      	mov	r6, r1
 80028a8:	b921      	cbnz	r1, 80028b4 <_realloc_r+0x14>
 80028aa:	4611      	mov	r1, r2
 80028ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028b0:	f7ff bf9c 	b.w	80027ec <_malloc_r>
 80028b4:	b922      	cbnz	r2, 80028c0 <_realloc_r+0x20>
 80028b6:	f7ff ff4d 	bl	8002754 <_free_r>
 80028ba:	4625      	mov	r5, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c0:	f000 f830 	bl	8002924 <_malloc_usable_size_r>
 80028c4:	42a0      	cmp	r0, r4
 80028c6:	d20f      	bcs.n	80028e8 <_realloc_r+0x48>
 80028c8:	4621      	mov	r1, r4
 80028ca:	4638      	mov	r0, r7
 80028cc:	f7ff ff8e 	bl	80027ec <_malloc_r>
 80028d0:	4605      	mov	r5, r0
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d0f2      	beq.n	80028bc <_realloc_r+0x1c>
 80028d6:	4631      	mov	r1, r6
 80028d8:	4622      	mov	r2, r4
 80028da:	f7ff ff13 	bl	8002704 <memcpy>
 80028de:	4631      	mov	r1, r6
 80028e0:	4638      	mov	r0, r7
 80028e2:	f7ff ff37 	bl	8002754 <_free_r>
 80028e6:	e7e9      	b.n	80028bc <_realloc_r+0x1c>
 80028e8:	4635      	mov	r5, r6
 80028ea:	e7e7      	b.n	80028bc <_realloc_r+0x1c>

080028ec <_sbrk_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	2300      	movs	r3, #0
 80028f0:	4d05      	ldr	r5, [pc, #20]	; (8002908 <_sbrk_r+0x1c>)
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fd fe54 	bl	80005a4 <_sbrk>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_sbrk_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_sbrk_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	20000334 	.word	0x20000334

0800290c <__malloc_lock>:
 800290c:	4801      	ldr	r0, [pc, #4]	; (8002914 <__malloc_lock+0x8>)
 800290e:	f000 b811 	b.w	8002934 <__retarget_lock_acquire_recursive>
 8002912:	bf00      	nop
 8002914:	2000033c 	.word	0x2000033c

08002918 <__malloc_unlock>:
 8002918:	4801      	ldr	r0, [pc, #4]	; (8002920 <__malloc_unlock+0x8>)
 800291a:	f000 b80c 	b.w	8002936 <__retarget_lock_release_recursive>
 800291e:	bf00      	nop
 8002920:	2000033c 	.word	0x2000033c

08002924 <_malloc_usable_size_r>:
 8002924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002928:	1f18      	subs	r0, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	bfbc      	itt	lt
 800292e:	580b      	ldrlt	r3, [r1, r0]
 8002930:	18c0      	addlt	r0, r0, r3
 8002932:	4770      	bx	lr

08002934 <__retarget_lock_acquire_recursive>:
 8002934:	4770      	bx	lr

08002936 <__retarget_lock_release_recursive>:
 8002936:	4770      	bx	lr

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
