
stm32f103_oled_spi_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08005bf0  08005bf0  00015bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f4  080061f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080061f4  080061f4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061f4  080061f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080061fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  200001dc  080063d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  080063d8  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae52  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdb  00000000  00000000  0002b057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184cf  00000000  00000000  0002dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a13d  00000000  00000000  000460a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847fa  00000000  00000000  000501e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d49de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  000d4a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bd8 	.word	0x08005bd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005bd8 	.word	0x08005bd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <I2C_Master_Send>:
static uint8_t GB_SSD1306_Buffer[GB_SSD1306_WIDTH * GB_SSD1306_HEIGHT / 8]; // buffer of 1024 bytes

I2C_HandleTypeDef hi2c2;

void I2C_Master_Send (uint8_t address, uint8_t *dt, uint16_t cnt)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, cnt, 1000);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cbe:	9200      	str	r2, [sp, #0]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <I2C_Master_Send+0x2c>)
 8000cc4:	f001 f9b2 	bl	800202c <HAL_I2C_Master_Transmit>

}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000060c 	.word	0x2000060c

08000cd4 <ssd1306_init>:

/* Private variable */
static GB_SSD1306_t GB_SSD1306;

void ssd1306_init()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFF); //0xAE
 8000cd8:	20ae      	movs	r0, #174	; 0xae
 8000cda:	f000 f855 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_CLOCK_DIV); //0xD5
 8000cde:	20d5      	movs	r0, #213	; 0xd5
 8000ce0:	f000 f852 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x80);// A[7:4] = 1000, A[3:0] = 0000(clock divide ratio = 1)
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	f000 f84f 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_MULTIPLEX_RATIO); //0xA8
 8000cea:	20a8      	movs	r0, #168	; 0xa8
 8000cec:	f000 f84c 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x3F);
 8000cf0:	203f      	movs	r0, #63	; 0x3f
 8000cf2:	f000 f849 	bl	8000d88 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFFSET); //0xD3
 8000cf6:	20d3      	movs	r0, #211	; 0xd3
 8000cf8:	f000 f846 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x00); //Display start line starts from COM0 only, that is from ROW0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 f843 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40 | 0x00); //Display Start line: starting address of display RAM, by selecting a value from 0 to 63.
 8000d02:	2040      	movs	r0, #64	; 0x40
 8000d04:	f000 f840 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CHARGEUP);//0x8D We use internal charge pump
 8000d08:	208d      	movs	r0, #141	; 0x8d
 8000d0a:	f000 f83d 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x14);
 8000d0e:	2014      	movs	r0, #20
 8000d10:	f000 f83a 	bl	8000d88 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_SET_MEMORY_ADDRESSING_COMMAND); //0x20
 8000d14:	2020      	movs	r0, #32
 8000d16:	f000 f837 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_HORIZONTAL_ADDRESSING); //0x00
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f834 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_SEGMENT_REMAPPING_COM127_SEG0); //0xA0
 8000d20:	20a1      	movs	r0, #161	; 0xa1
 8000d22:	f000 f831 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_SCAN_DIRECTION_REMAPPED_MODE); //0xC8
 8000d26:	20c8      	movs	r0, #200	; 0xc8
 8000d28:	f000 f82e 	bl	8000d88 <ssd1306_sendcommand>


	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_COMMAND); //0xDA
 8000d2c:	20da      	movs	r0, #218	; 0xda
 8000d2e:	f000 f82b 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_ALTERNATE_DISABLE_REMAP);//0x02
 8000d32:	2012      	movs	r0, #18
 8000d34:	f000 f828 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CONTRAST); //0x81
 8000d38:	2081      	movs	r0, #129	; 0x81
 8000d3a:	f000 f825 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xCF);
 8000d3e:	20cf      	movs	r0, #207	; 0xcf
 8000d40:	f000 f822 	bl	8000d88 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PRECHARGE);//0xD9
 8000d44:	20d9      	movs	r0, #217	; 0xd9
 8000d46:	f000 f81f 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xF1);
 8000d4a:	20f1      	movs	r0, #241	; 0xf1
 8000d4c:	f000 f81c 	bl	8000d88 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_VCOMH_SELECT_COMMAND);
 8000d50:	20db      	movs	r0, #219	; 0xdb
 8000d52:	f000 f819 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40); // to be checked
 8000d56:	2040      	movs	r0, #64	; 0x40
 8000d58:	f000 f816 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_RESUME);//0xA4
 8000d5c:	20a4      	movs	r0, #164	; 0xa4
 8000d5e:	f000 f813 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_NORMAL_DISPLAY); //0xA6
 8000d62:	20a6      	movs	r0, #166	; 0xa6
 8000d64:	f000 f810 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_ON);
 8000d68:	20af      	movs	r0, #175	; 0xaf
 8000d6a:	f000 f80d 	bl	8000d88 <ssd1306_sendcommand>
//	gb_i2c_master_stop_generation(); // STOP Condition is generated
//	delay_ms(100);


	///Set default values /
		GB_SSD1306.CurrentX = 0;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <ssd1306_init+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	801a      	strh	r2, [r3, #0]
		GB_SSD1306.CurrentY = 0;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <ssd1306_init+0xb0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	805a      	strh	r2, [r3, #2]

	// Initialized OK
	GB_SSD1306.Initialized = 1;
 8000d7a:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <ssd1306_init+0xb0>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	715a      	strb	r2, [r3, #5]

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200005f8 	.word	0x200005f8

08000d88 <ssd1306_sendcommand>:

void ssd1306_sendcommand(uint8_t command)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	  uint8_t tx[2];
	  tx[0] = GB_SSD1306_CONTROL_BYTE_FOR_COMMAND;
 8000d92:	2300      	movs	r3, #0
 8000d94:	733b      	strb	r3, [r7, #12]
	  tx[1] = command;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_WA , tx, 2, HAL_MAX_DELAY);
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2302      	movs	r3, #2
 8000da6:	2178      	movs	r1, #120	; 0x78
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <ssd1306_sendcommand+0x30>)
 8000daa:	f001 f93f 	bl	800202c <HAL_I2C_Master_Transmit>
//	gb_i2c_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
//	gb_i2c_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_COMMAND); //0x00
//	gb_i2c_master_send_byte(command);
//	gb_i2c_master_stop_generation(); // STOP Condition is generated

}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000060c 	.word	0x2000060c

08000dbc <ssd1306_update_data>:
//	gb_i2c_master_send_byte(data);
//	gb_i2c_master_stop_generation(); // STOP Condition is generated
//
}
void ssd1306_update_data()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	ssd1306_sendcommand(GB_SSD1306_SET_COLUMN_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8000dc2:	2021      	movs	r0, #33	; 0x21
 8000dc4:	f7ff ffe0 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_START_ADDRESS_HV_ADDRESSING_MODE);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff ffdd 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_END_ADDRESS_HV_ADDRESSING_MODE);
 8000dce:	207f      	movs	r0, #127	; 0x7f
 8000dd0:	f7ff ffda 	bl	8000d88 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PAGE_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8000dd4:	2022      	movs	r0, #34	; 0x22
 8000dd6:	f7ff ffd7 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_START_ADDRESS_HV_ADDRESSING_MODE);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ffd4 	bl	8000d88 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_END_ADDRESS_HV_ADDRESSING_MODE);
 8000de0:	207d      	movs	r0, #125	; 0x7d
 8000de2:	f7ff ffd1 	bl	8000d88 <ssd1306_sendcommand>

	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e01a      	b.n	8000e22 <ssd1306_update_data+0x66>

		  uint8_t tx[2];
		  	tx[0] = GB_SSD1306_CONTROL_BYTE_FOR_DATA;
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	713b      	strb	r3, [r7, #4]
		  	//tx[2] = data;

		 // gb_i2c_start_condition_w(); // Start Condition For Writing
		  //gb_i2c_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
		  //gb_i2c_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_DATA);
      for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	71bb      	strb	r3, [r7, #6]
 8000df4:	e00f      	b.n	8000e16 <ssd1306_update_data+0x5a>
    	  tx[1] = GB_SSD1306_Buffer[packet*16+packet_byte];
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	011a      	lsls	r2, r3, #4
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <ssd1306_update_data+0x78>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	717b      	strb	r3, [r7, #5]
		//	I2C_Master_Send(SSD1306_WA , &GB_SSD1306_Buffer[packet*16+packet_byte], 1);
   	  I2C_Master_Send(SSD1306_WA , tx, 2);
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2202      	movs	r2, #2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2078      	movs	r0, #120	; 0x78
 8000e0c:	f7ff ff4a 	bl	8000ca4 <I2C_Master_Send>
      for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	3301      	adds	r3, #1
 8000e14:	71bb      	strb	r3, [r7, #6]
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d9ec      	bls.n	8000df6 <ssd1306_update_data+0x3a>
	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b3f      	cmp	r3, #63	; 0x3f
 8000e26:	d9e1      	bls.n	8000dec <ssd1306_update_data+0x30>
	        //	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_WA , GB_SSD1306_Buffer, sizeof(GB_SSD1306_Buffer), HAL_MAX_DELAY);
	        	//gb_i2c_master_send_byte(GB_SSD1306_Buffer[packet*16+packet_byte]);
	       }
	  }
	     //   gb_i2c_master_stop_generation(); // STOP Condition is generated
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001f8 	.word	0x200001f8

08000e38 <ssd1306_GotoXY>:
/*
 * x is column[0-127]
 * y is row[0-63]
 */
void ssd1306_GotoXY( uint16_t x,uint16_t y)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	80fb      	strh	r3, [r7, #6]
 8000e44:	4613      	mov	r3, r2
 8000e46:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
		GB_SSD1306.CurrentX = x;
 8000e48:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <ssd1306_GotoXY+0x28>)
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	8013      	strh	r3, [r2, #0]
		GB_SSD1306.CurrentY = y;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <ssd1306_GotoXY+0x28>)
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	8053      	strh	r3, [r2, #2]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200005f8 	.word	0x200005f8

08000e64 <ssd1306_clear>:
}
/*
 *  Fills entire LCD with desired color
 */
void ssd1306_clear(GB_SSD1306_COLOR_t color)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	memset(GB_SSD1306_Buffer, (color == GB_SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(GB_SSD1306_Buffer));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <ssd1306_clear+0x14>
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <ssd1306_clear+0x16>
 8000e78:	23ff      	movs	r3, #255	; 0xff
 8000e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <ssd1306_clear+0x2c>)
 8000e82:	f002 f817 	bl	8002eb4 <memset>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001f8 	.word	0x200001f8

08000e94 <ssd1306_draw_pixel>:
/*
 * x is column[0-127] : x is equivalent to CurrentX
 * y is row[0-63] : y is equivalent to CurrentY
 */
void ssd1306_draw_pixel(uint16_t x, uint16_t y, GB_SSD1306_COLOR_t color)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	70fb      	strb	r3, [r7, #3]
	if (
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eaa:	d83d      	bhi.n	8000f28 <ssd1306_draw_pixel+0x94>
			x >= GB_SSD1306_WIDTH ||
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb0:	d83a      	bhi.n	8000f28 <ssd1306_draw_pixel+0x94>
			/* Error */
			return;
		}

		/* Set color */
		if (color == GB_SSD1306_COLOR_WHITE) {
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d11a      	bne.n	8000eee <ssd1306_draw_pixel+0x5a>
			GB_SSD1306_Buffer[x + (y / 8) * GB_SSD1306_WIDTH] |= 1 << (y % 8);
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	01db      	lsls	r3, r3, #7
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <ssd1306_draw_pixel+0xa0>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	b25a      	sxtb	r2, r3
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b259      	sxtb	r1, r3
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b2c9      	uxtb	r1, r1
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <ssd1306_draw_pixel+0xa0>)
 8000eea:	54d1      	strb	r1, [r2, r3]
 8000eec:	e01d      	b.n	8000f2a <ssd1306_draw_pixel+0x96>
		} else {
			GB_SSD1306_Buffer[x + (y / 8) * GB_SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000eee:	88fa      	ldrh	r2, [r7, #6]
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	01db      	lsls	r3, r3, #7
 8000efa:	4413      	add	r3, r2
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <ssd1306_draw_pixel+0xa0>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	b259      	sxtb	r1, r3
 8000f18:	88fa      	ldrh	r2, [r7, #6]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	01db      	lsls	r3, r3, #7
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2c9      	uxtb	r1, r1
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <ssd1306_draw_pixel+0xa0>)
 8000f24:	54d1      	strb	r1, [r2, r3]
 8000f26:	e000      	b.n	8000f2a <ssd1306_draw_pixel+0x96>
			return;
 8000f28:	bf00      	nop
		}
}
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200001f8 	.word	0x200001f8

08000f38 <ssd1306_print_char>:
 * 5 is no of columns: font width // x is width : CurrentX :0-127
 * 8 is no of rows: font height   //y is height : CurrentY : 0-63
 *
 */
char ssd1306_print_char(char ch, GB_SSD1306_COLOR_t color)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]

	uint32_t Font_byte_value;

	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e034      	b.n	8000fb8 <ssd1306_print_char+0x80>
	{
			Font_byte_value = SSD1306_font5x8[(ch - 32)][i]; //mapping the vales of bits for rinting the character ch
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f1a3 0220 	sub.w	r2, r3, #32
 8000f54:	491d      	ldr	r1, [pc, #116]	; (8000fcc <ssd1306_print_char+0x94>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	18ca      	adds	r2, r1, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	60bb      	str	r3, [r7, #8]

			if (color == GB_SSD1306_COLOR_WHITE)
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10d      	bne.n	8000f88 <ssd1306_print_char+0x50>
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = Font_byte_value;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <ssd1306_print_char+0x98>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <ssd1306_print_char+0x98>)
 8000f74:	885b      	ldrh	r3, [r3, #2]
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	01db      	lsls	r3, r3, #7
 8000f7c:	4413      	add	r3, r2
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	b2d1      	uxtb	r1, r2
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <ssd1306_print_char+0x9c>)
 8000f84:	54d1      	strb	r1, [r2, r3]
 8000f86:	e00e      	b.n	8000fa6 <ssd1306_print_char+0x6e>
			}else
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = ~Font_byte_value;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <ssd1306_print_char+0x98>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <ssd1306_print_char+0x98>)
 8000f94:	885b      	ldrh	r3, [r3, #2]
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	440b      	add	r3, r1
 8000f9e:	43d2      	mvns	r2, r2
 8000fa0:	b2d1      	uxtb	r1, r2
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <ssd1306_print_char+0x9c>)
 8000fa4:	54d1      	strb	r1, [r2, r3]
			}

		  GB_SSD1306.CurrentX ++;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <ssd1306_print_char+0x98>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <ssd1306_print_char+0x98>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d9c7      	bls.n	8000f4e <ssd1306_print_char+0x16>
		}

	/* Return character written */
		return ch;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]

}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	08005c1c 	.word	0x08005c1c
 8000fd0:	200005f8 	.word	0x200005f8
 8000fd4:	200001f8 	.word	0x200001f8

08000fd8 <ssd1306_print_string>:

char ssd1306_print_string(char* str, GB_SSD1306_COLOR_t color)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	while (*str)
 8000fe4:	e008      	b.n	8000ff8 <ssd1306_print_string+0x20>
	{
		ssd1306_print_char(*str++, (GB_SSD1306_COLOR_t) color);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffa0 	bl	8000f38 <ssd1306_print_char>
	while (*str)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <ssd1306_print_string+0xe>
	}
	/* Everything OK, zero should be returned */
		return *str;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <ssd1306_float>:
		ssd1306_print_char(gb_buf[gb_ptr], (GB_SSD1306_COLOR_t) color);
	}
}

void ssd1306_float(float gb_value, GB_SSD1306_COLOR_t color)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	char gb_float_buff[10];
	sprintf(gb_float_buff,"%.2f",gb_value);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fa05 	bl	8000428 <__aeabi_f2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	f107 000c 	add.w	r0, r7, #12
 8001026:	4907      	ldr	r1, [pc, #28]	; (8001044 <ssd1306_float+0x38>)
 8001028:	f002 fbac 	bl	8003784 <siprintf>
	ssd1306_print_string(gb_float_buff,(GB_SSD1306_COLOR_t) color );
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ffcf 	bl	8000fd8 <ssd1306_print_string>

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	08005bf0 	.word	0x08005bf0

08001048 <ssd1306_DrawLineV>:
 * 0<=line_end_point<=63(SSD1306_HEIGHT) //yaxis
 * 0<=column<=127 // x axis intersection point
 * 0<=line_width<=127 units
 */
void ssd1306_DrawLineV(uint8_t line_starting_point, uint8_t line_end_point, uint8_t column,uint8_t line_width)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	4604      	mov	r4, r0
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4623      	mov	r3, r4
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4603      	mov	r3, r0
 800105c:	71bb      	strb	r3, [r7, #6]
 800105e:	460b      	mov	r3, r1
 8001060:	717b      	strb	r3, [r7, #5]
 8001062:	4613      	mov	r3, r2
 8001064:	713b      	strb	r3, [r7, #4]
    if(line_starting_point>line_end_point)
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	429a      	cmp	r2, r3
 800106c:	d905      	bls.n	800107a <ssd1306_DrawLineV+0x32>
    {
    	uint8_t temp = line_starting_point;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	73fb      	strb	r3, [r7, #15]
    	line_starting_point = line_end_point;
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	71fb      	strb	r3, [r7, #7]
    	line_end_point = temp;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	71bb      	strb	r3, [r7, #6]
    }
    	//uint8_t start = column-(line_width-1)/2;
    	uint8_t start = column;
 800107a:	797b      	ldrb	r3, [r7, #5]
 800107c:	73bb      	strb	r3, [r7, #14]
    	for(int i =0;i<line_width;i++) //changing the column with line thickness(x-axis)
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e018      	b.n	80010b6 <ssd1306_DrawLineV+0x6e>
    	for(int j=line_starting_point;j<line_end_point;j++) // changing the row for printing line(y-axis)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	e00e      	b.n	80010a8 <ssd1306_DrawLineV+0x60>
		 ssd1306_draw_pixel(start +i,j,GB_SSD1306_COLOR_WHITE);
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	b29a      	uxth	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	b291      	uxth	r1, r2
 800109a:	2201      	movs	r2, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fef9 	bl	8000e94 <ssd1306_draw_pixel>
    	for(int j=line_starting_point;j<line_end_point;j++) // changing the row for printing line(y-axis)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	3301      	adds	r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbec      	blt.n	800108a <ssd1306_DrawLineV+0x42>
    	for(int i =0;i<line_width;i++) //changing the column with line thickness(x-axis)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbe2      	blt.n	8001084 <ssd1306_DrawLineV+0x3c>
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}

080010c8 <ssd1306_DrawLineH>:
 * 0<=line_end_point<=127(SSD1306_WIDTH) //xaxis
 * 0<=row<=63 // y axis intersection point
 * 0<=line_width<=63 units
 */
void ssd1306_DrawLineH(uint8_t line_starting_point, uint8_t line_end_point, uint8_t row, uint8_t line_width)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	4603      	mov	r3, r0
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	460b      	mov	r3, r1
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	4613      	mov	r3, r2
 80010e4:	713b      	strb	r3, [r7, #4]
    if(line_starting_point>line_end_point)
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d905      	bls.n	80010fa <ssd1306_DrawLineH+0x32>
    {
    	uint8_t temp = line_starting_point;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	73fb      	strb	r3, [r7, #15]
    	line_starting_point = line_end_point;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	71fb      	strb	r3, [r7, #7]
    	line_end_point = temp;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	71bb      	strb	r3, [r7, #6]
    }
    uint8_t start = row;
 80010fa:	797b      	ldrb	r3, [r7, #5]
 80010fc:	73bb      	strb	r3, [r7, #14]
    for(int i = 0; i<line_width;i++) //changing the row with line thickness(y-axis)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e018      	b.n	8001136 <ssd1306_DrawLineH+0x6e>
    	for(int j=line_starting_point;j<line_end_point;j++) //changing the column for printing line(x-axis)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	e00e      	b.n	8001128 <ssd1306_DrawLineH+0x60>
    		ssd1306_draw_pixel(j, start+i,GB_SSD1306_COLOR_WHITE);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	b298      	uxth	r0, r3
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	b29a      	uxth	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4413      	add	r3, r2
 8001118:	b29b      	uxth	r3, r3
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff feb9 	bl	8000e94 <ssd1306_draw_pixel>
    	for(int j=line_starting_point;j<line_end_point;j++) //changing the column for printing line(x-axis)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	3301      	adds	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbec      	blt.n	800110a <ssd1306_DrawLineH+0x42>
    for(int i = 0; i<line_width;i++) //changing the row with line thickness(y-axis)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	793b      	ldrb	r3, [r7, #4]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbe2      	blt.n	8001104 <ssd1306_DrawLineH+0x3c>

}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <ssd1306_drawRectangle>:

void ssd1306_drawRectangle(uint8_t edge_x_point, uint8_t edge_y_point, uint8_t width, uint8_t height)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	4603      	mov	r3, r0
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	460b      	mov	r3, r1
 8001160:	717b      	strb	r3, [r7, #5]
 8001162:	4613      	mov	r3, r2
 8001164:	713b      	strb	r3, [r7, #4]
	if( edge_x_point >= GB_SSD1306_WIDTH || edge_y_point>= GB_SSD1306_HEIGHT)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db31      	blt.n	80011d2 <ssd1306_drawRectangle+0x8a>
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	2b3f      	cmp	r3, #63	; 0x3f
 8001172:	d82e      	bhi.n	80011d2 <ssd1306_drawRectangle+0x8a>
	{
		return;
	}
	ssd1306_DrawLineH((edge_x_point), (edge_x_point + width), edge_y_point, 1);
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	4413      	add	r3, r2
 800117a:	b2d9      	uxtb	r1, r3
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	79f8      	ldrb	r0, [r7, #7]
 8001180:	2301      	movs	r3, #1
 8001182:	f7ff ffa1 	bl	80010c8 <ssd1306_DrawLineH>
	ssd1306_DrawLineH((edge_x_point), (edge_x_point + width+1), edge_y_point+height,1);
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	797b      	ldrb	r3, [r7, #5]
 800118a:	4413      	add	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3301      	adds	r3, #1
 8001190:	b2d9      	uxtb	r1, r3
 8001192:	79ba      	ldrb	r2, [r7, #6]
 8001194:	793b      	ldrb	r3, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	b2da      	uxtb	r2, r3
 800119a:	79f8      	ldrb	r0, [r7, #7]
 800119c:	2301      	movs	r3, #1
 800119e:	f7ff ff93 	bl	80010c8 <ssd1306_DrawLineH>
	ssd1306_DrawLineV((edge_y_point), (edge_y_point + height), edge_x_point,1);
 80011a2:	79ba      	ldrb	r2, [r7, #6]
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	b2d9      	uxtb	r1, r3
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	79b8      	ldrb	r0, [r7, #6]
 80011ae:	2301      	movs	r3, #1
 80011b0:	f7ff ff4a 	bl	8001048 <ssd1306_DrawLineV>
	ssd1306_DrawLineV((edge_y_point), (edge_y_point + height+1), edge_x_point + width,1);
 80011b4:	79ba      	ldrb	r2, [r7, #6]
 80011b6:	793b      	ldrb	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	b2d9      	uxtb	r1, r3
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	79b8      	ldrb	r0, [r7, #6]
 80011ca:	2301      	movs	r3, #1
 80011cc:	f7ff ff3c 	bl	8001048 <ssd1306_DrawLineV>
 80011d0:	e000      	b.n	80011d4 <ssd1306_drawRectangle+0x8c>
		return;
 80011d2:	bf00      	nop

}
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <ssd1306_drawRectangleFill>:

void ssd1306_drawRectangleFill(uint8_t edge_x_point, uint8_t edge_y_point, uint8_t width, uint8_t height)
{
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4604      	mov	r4, r0
 80011e2:	4608      	mov	r0, r1
 80011e4:	4611      	mov	r1, r2
 80011e6:	461a      	mov	r2, r3
 80011e8:	4623      	mov	r3, r4
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4603      	mov	r3, r0
 80011ee:	71bb      	strb	r3, [r7, #6]
 80011f0:	460b      	mov	r3, r1
 80011f2:	717b      	strb	r3, [r7, #5]
 80011f4:	4613      	mov	r3, r2
 80011f6:	713b      	strb	r3, [r7, #4]
	if( edge_x_point >= GB_SSD1306_WIDTH || edge_y_point>= GB_SSD1306_HEIGHT)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db1a      	blt.n	8001236 <ssd1306_drawRectangleFill+0x5c>
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	2b3f      	cmp	r3, #63	; 0x3f
 8001204:	d817      	bhi.n	8001236 <ssd1306_drawRectangleFill+0x5c>
	{
		return;
	}

	for(int i=0;i<height;i++)
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e00f      	b.n	800122c <ssd1306_drawRectangleFill+0x52>
		   ssd1306_DrawLineH((edge_x_point), (edge_x_point + width), edge_y_point + i, 1);
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	4413      	add	r3, r2
 8001212:	b2d9      	uxtb	r1, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	4413      	add	r3, r2
 800121c:	b2da      	uxtb	r2, r3
 800121e:	79f8      	ldrb	r0, [r7, #7]
 8001220:	2301      	movs	r3, #1
 8001222:	f7ff ff51 	bl	80010c8 <ssd1306_DrawLineH>
	for(int i=0;i<height;i++)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	793b      	ldrb	r3, [r7, #4]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbeb      	blt.n	800120c <ssd1306_drawRectangleFill+0x32>
 8001234:	e000      	b.n	8001238 <ssd1306_drawRectangleFill+0x5e>
		return;
 8001236:	bf00      	nop


}
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f000 fabf 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 f891 	bl	8001370 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f000 f901 	bl	8001454 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001252:	f000 f8d1 	bl	80013f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_init();
 8001256:	f7ff fd3d 	bl	8000cd4 <ssd1306_init>
  ssd1306_clear(GB_SSD1306_COLOR_BLACK);
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fe02 	bl	8000e64 <ssd1306_clear>
  ssd1306_update_data();
 8001260:	f7ff fdac 	bl	8000dbc <ssd1306_update_data>

	//Animation 1
	ssd1306_draw_pixel(14,10,GB_SSD1306_COLOR_WHITE);
 8001264:	2201      	movs	r2, #1
 8001266:	210a      	movs	r1, #10
 8001268:	200e      	movs	r0, #14
 800126a:	f7ff fe13 	bl	8000e94 <ssd1306_draw_pixel>
	ssd1306_update_data();
 800126e:	f7ff fda5 	bl	8000dbc <ssd1306_update_data>
	  HAL_Delay(100);
 8001272:	2064      	movs	r0, #100	; 0x64
 8001274:	f000 fb0a 	bl	800188c <HAL_Delay>
	ssd1306_draw_pixel(14,15,GB_SSD1306_COLOR_WHITE);
 8001278:	2201      	movs	r2, #1
 800127a:	210f      	movs	r1, #15
 800127c:	200e      	movs	r0, #14
 800127e:	f7ff fe09 	bl	8000e94 <ssd1306_draw_pixel>
	ssd1306_update_data();
 8001282:	f7ff fd9b 	bl	8000dbc <ssd1306_update_data>
	  HAL_Delay(100);
 8001286:	2064      	movs	r0, #100	; 0x64
 8001288:	f000 fb00 	bl	800188c <HAL_Delay>
	ssd1306_draw_pixel(14,20,GB_SSD1306_COLOR_WHITE);
 800128c:	2201      	movs	r2, #1
 800128e:	2114      	movs	r1, #20
 8001290:	200e      	movs	r0, #14
 8001292:	f7ff fdff 	bl	8000e94 <ssd1306_draw_pixel>
	ssd1306_update_data();
 8001296:	f7ff fd91 	bl	8000dbc <ssd1306_update_data>
  HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f000 faf6 	bl	800188c <HAL_Delay>

  ssd1306_DrawLineV(0,63,0,1);
 80012a0:	2301      	movs	r3, #1
 80012a2:	2200      	movs	r2, #0
 80012a4:	213f      	movs	r1, #63	; 0x3f
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff fece 	bl	8001048 <ssd1306_DrawLineV>
  	ssd1306_update_data();
 80012ac:	f7ff fd86 	bl	8000dbc <ssd1306_update_data>
    HAL_Delay(100);
 80012b0:	2064      	movs	r0, #100	; 0x64
 80012b2:	f000 faeb 	bl	800188c <HAL_Delay>
  	ssd1306_DrawLineH(0,127,0,1);
 80012b6:	2301      	movs	r3, #1
 80012b8:	2200      	movs	r2, #0
 80012ba:	217f      	movs	r1, #127	; 0x7f
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff03 	bl	80010c8 <ssd1306_DrawLineH>
  	ssd1306_update_data();
 80012c2:	f7ff fd7b 	bl	8000dbc <ssd1306_update_data>
    HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f000 fae0 	bl	800188c <HAL_Delay>
  	ssd1306_DrawLineH(0,127,63,1);
 80012cc:	2301      	movs	r3, #1
 80012ce:	223f      	movs	r2, #63	; 0x3f
 80012d0:	217f      	movs	r1, #127	; 0x7f
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fef8 	bl	80010c8 <ssd1306_DrawLineH>
  	ssd1306_update_data();
 80012d8:	f7ff fd70 	bl	8000dbc <ssd1306_update_data>
    HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f000 fad5 	bl	800188c <HAL_Delay>
  	ssd1306_DrawLineV(0,63,127,1);
 80012e2:	2301      	movs	r3, #1
 80012e4:	227f      	movs	r2, #127	; 0x7f
 80012e6:	213f      	movs	r1, #63	; 0x3f
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fead 	bl	8001048 <ssd1306_DrawLineV>
  	ssd1306_update_data();
 80012ee:	f7ff fd65 	bl	8000dbc <ssd1306_update_data>
    HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f000 faca 	bl	800188c <HAL_Delay>

  	ssd1306_drawRectangle(26,14,40,18);
 80012f8:	2312      	movs	r3, #18
 80012fa:	2228      	movs	r2, #40	; 0x28
 80012fc:	210e      	movs	r1, #14
 80012fe:	201a      	movs	r0, #26
 8001300:	f7ff ff22 	bl	8001148 <ssd1306_drawRectangle>
  	ssd1306_update_data();
 8001304:	f7ff fd5a 	bl	8000dbc <ssd1306_update_data>
    HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f000 fabf 	bl	800188c <HAL_Delay>
  	ssd1306_drawRectangleFill(26,14,29,15);
 800130e:	230f      	movs	r3, #15
 8001310:	221d      	movs	r2, #29
 8001312:	210e      	movs	r1, #14
 8001314:	201a      	movs	r0, #26
 8001316:	f7ff ff60 	bl	80011da <ssd1306_drawRectangleFill>
  	ssd1306_update_data();
 800131a:	f7ff fd4f 	bl	8000dbc <ssd1306_update_data>
    HAL_Delay(100);
 800131e:	2064      	movs	r0, #100	; 0x64
 8001320:	f000 fab4 	bl	800188c <HAL_Delay>

  	ssd1306_clear(GB_SSD1306_COLOR_BLACK);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fd9d 	bl	8000e64 <ssd1306_clear>
  	ssd1306_update_data();
 800132a:	f7ff fd47 	bl	8000dbc <ssd1306_update_data>

  	float x = 00.00;
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ssd1306_GotoXY(3, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fd7e 	bl	8000e38 <ssd1306_GotoXY>
	  ssd1306_print_string("Variable value :", GB_SSD1306_COLOR_WHITE);
 800133c:	2101      	movs	r1, #1
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <main+0x12c>)
 8001340:	f7ff fe4a 	bl	8000fd8 <ssd1306_print_string>
	  ssd1306_update_data();
 8001344:	f7ff fd3a 	bl	8000dbc <ssd1306_update_data>

	  ssd1306_GotoXY(83, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	2053      	movs	r0, #83	; 0x53
 800134c:	f7ff fd74 	bl	8000e38 <ssd1306_GotoXY>
	  ssd1306_float(x,GB_SSD1306_COLOR_WHITE);
 8001350:	2101      	movs	r1, #1
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fe5a 	bl	800100c <ssd1306_float>
	  x++;
 8001358:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fb99 	bl	8000a94 <__addsf3>
 8001362:	4603      	mov	r3, r0
 8001364:	607b      	str	r3, [r7, #4]
	  ssd1306_update_data();
 8001366:	f7ff fd29 	bl	8000dbc <ssd1306_update_data>
	  ssd1306_GotoXY(3, 0);
 800136a:	e7e3      	b.n	8001334 <main+0xf4>
 800136c:	08005bf8 	.word	0x08005bf8

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	2228      	movs	r2, #40	; 0x28
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fd98 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80013ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f93d 	bl	8002638 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013c4:	f000 f874 	bl	80014b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fba9 	bl	8002b38 <HAL_RCC_ClockConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013ec:	f000 f860 	bl	80014b0 <Error_Handler>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3740      	adds	r7, #64	; 0x40
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C2_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_I2C2_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_I2C2_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_I2C2_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C2_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2C2_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_I2C2_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_I2C2_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2C2_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_I2C2_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2C2_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_I2C2_Init+0x50>)
 8001436:	f000 fcb5 	bl	8001da4 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 f836 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000060c 	.word	0x2000060c
 800144c:	40005800 	.word	0x40005800
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_GPIO_Init+0x58>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_GPIO_Init+0x58>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_GPIO_Init+0x58>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_GPIO_Init+0x58>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <MX_GPIO_Init+0x58>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_GPIO_Init+0x58>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_GPIO_Init+0x58>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <MX_GPIO_Init+0x58>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <MX_GPIO_Init+0x58>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_MspInit+0x5c>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_MspInit+0x5c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_MspInit+0x5c>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x5c>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_MspInit+0x5c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_MspInit+0x5c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_MspInit+0x60>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_MspInit+0x60>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000

08001520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <HAL_I2C_MspInit+0x74>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d124      	bne.n	800158a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_I2C_MspInit+0x78>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_I2C_MspInit+0x78>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_I2C_MspInit+0x78>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001558:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800155c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <HAL_I2C_MspInit+0x7c>)
 800156e:	f000 fa95 	bl	8001a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_I2C_MspInit+0x78>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_I2C_MspInit+0x78>)
 8001578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_I2C_MspInit+0x78>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40005800 	.word	0x40005800
 8001598:	40021000 	.word	0x40021000
 800159c:	40010c00 	.word	0x40010c00

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e6:	f000 f935 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
	return 1;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <_kill>:

int _kill(int pid, int sig)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001606:	f001 fc1d 	bl	8002e44 <__errno>
 800160a:	4603      	mov	r3, r0
 800160c:	2216      	movs	r2, #22
 800160e:	601a      	str	r2, [r3, #0]
	return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_exit>:

void _exit (int status)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffe7 	bl	80015fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800162e:	e7fe      	b.n	800162e <_exit+0x12>

08001630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e00a      	b.n	8001658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4601      	mov	r1, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf0      	blt.n	8001642 <_read+0x12>
	}

return len;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e009      	b.n	8001690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf1      	blt.n	800167c <_write+0x12>
	}
	return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_close>:

int _close(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c8:	605a      	str	r2, [r3, #4]
	return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <_isatty>:

int _isatty(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
	...

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f001 fb86 	bl	8002e44 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20005000 	.word	0x20005000
 8001764:	00000400 	.word	0x00000400
 8001768:	20000600 	.word	0x20000600
 800176c:	20000678 	.word	0x20000678

08001770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	; (80017b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	; (80017c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017a2:	f7ff ffe5 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f001 fb53 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017aa:	f7ff fd49 	bl	8001240 <main>
  bx lr
 80017ae:	4770      	bx	lr
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017b8:	080061fc 	.word	0x080061fc
  ldr r2, =_sbss
 80017bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017c0:	20000674 	.word	0x20000674

080017c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC1_2_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_Init+0x28>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_Init+0x28>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 f92b 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 f808 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fe6a 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x54>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f935 	bl	8001a82 <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d80a      	bhi.n	800183e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f000 f90b 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_InitTick+0x5c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000000 	.word	0x20000000
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x1c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x20>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a03      	ldr	r2, [pc, #12]	; (8001874 <HAL_IncTick+0x20>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000008 	.word	0x20000008
 8001874:	20000660 	.word	0x20000660

08001878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_GetTick+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000660 	.word	0x20000660

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff fff0 	bl	8001878 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffe0 	bl	8001878 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff49 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff5e 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffb0 	bl	80019f0 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b08b      	sub	sp, #44	; 0x2c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e169      	b.n	8001d84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8158 	bne.w	8001d7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a9a      	ldr	r2, [pc, #616]	; (8001d3c <HAL_GPIO_Init+0x2a0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d05e      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a98      	ldr	r2, [pc, #608]	; (8001d3c <HAL_GPIO_Init+0x2a0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d875      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001ade:	4a98      	ldr	r2, [pc, #608]	; (8001d40 <HAL_GPIO_Init+0x2a4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d058      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a96      	ldr	r2, [pc, #600]	; (8001d40 <HAL_GPIO_Init+0x2a4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d86f      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001aea:	4a96      	ldr	r2, [pc, #600]	; (8001d44 <HAL_GPIO_Init+0x2a8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d052      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001af0:	4a94      	ldr	r2, [pc, #592]	; (8001d44 <HAL_GPIO_Init+0x2a8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d869      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001af6:	4a94      	ldr	r2, [pc, #592]	; (8001d48 <HAL_GPIO_Init+0x2ac>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04c      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001afc:	4a92      	ldr	r2, [pc, #584]	; (8001d48 <HAL_GPIO_Init+0x2ac>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d863      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b02:	4a92      	ldr	r2, [pc, #584]	; (8001d4c <HAL_GPIO_Init+0x2b0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d046      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001b08:	4a90      	ldr	r2, [pc, #576]	; (8001d4c <HAL_GPIO_Init+0x2b0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d85d      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d82a      	bhi.n	8001b68 <HAL_GPIO_Init+0xcc>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d859      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_GPIO_Init+0x80>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b97 	.word	0x08001b97
 8001b20:	08001b71 	.word	0x08001b71
 8001b24:	08001b83 	.word	0x08001b83
 8001b28:	08001bc5 	.word	0x08001bc5
 8001b2c:	08001bcb 	.word	0x08001bcb
 8001b30:	08001bcb 	.word	0x08001bcb
 8001b34:	08001bcb 	.word	0x08001bcb
 8001b38:	08001bcb 	.word	0x08001bcb
 8001b3c:	08001bcb 	.word	0x08001bcb
 8001b40:	08001bcb 	.word	0x08001bcb
 8001b44:	08001bcb 	.word	0x08001bcb
 8001b48:	08001bcb 	.word	0x08001bcb
 8001b4c:	08001bcb 	.word	0x08001bcb
 8001b50:	08001bcb 	.word	0x08001bcb
 8001b54:	08001bcb 	.word	0x08001bcb
 8001b58:	08001bcb 	.word	0x08001bcb
 8001b5c:	08001bcb 	.word	0x08001bcb
 8001b60:	08001b79 	.word	0x08001b79
 8001b64:	08001b8d 	.word	0x08001b8d
 8001b68:	4a79      	ldr	r2, [pc, #484]	; (8001d50 <HAL_GPIO_Init+0x2b4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b6e:	e02c      	b.n	8001bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e029      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e024      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	3308      	adds	r3, #8
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e01f      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	330c      	adds	r3, #12
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e01a      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e013      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	611a      	str	r2, [r3, #16]
          break;
 8001bb6:	e009      	b.n	8001bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	615a      	str	r2, [r3, #20]
          break;
 8001bc2:	e003      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          break;
 8001bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2bff      	cmp	r3, #255	; 0xff
 8001bd0:	d801      	bhi.n	8001bd6 <HAL_GPIO_Init+0x13a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_Init+0x13e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	d802      	bhi.n	8001be8 <HAL_GPIO_Init+0x14c>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x152>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	3b08      	subs	r3, #8
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80b1 	beq.w	8001d7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c1c:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_GPIO_Init+0x2b8>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <HAL_GPIO_Init+0x2b8>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_GPIO_Init+0x2b8>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c34:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <HAL_GPIO_Init+0x2bc>)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <HAL_GPIO_Init+0x2c0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_GPIO_Init+0x1ec>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3f      	ldr	r2, [pc, #252]	; (8001d60 <HAL_GPIO_Init+0x2c4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00d      	beq.n	8001c84 <HAL_GPIO_Init+0x1e8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3e      	ldr	r2, [pc, #248]	; (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d007      	beq.n	8001c80 <HAL_GPIO_Init+0x1e4>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_GPIO_Init+0x1e0>
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	e004      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c9a:	492f      	ldr	r1, [pc, #188]	; (8001d58 <HAL_GPIO_Init+0x2bc>)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	492c      	ldr	r1, [pc, #176]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4928      	ldr	r1, [pc, #160]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4922      	ldr	r1, [pc, #136]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	491e      	ldr	r1, [pc, #120]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4918      	ldr	r1, [pc, #96]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4914      	ldr	r1, [pc, #80]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d021      	beq.n	8001d70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e021      	b.n	8001d7e <HAL_GPIO_Init+0x2e2>
 8001d3a:	bf00      	nop
 8001d3c:	10320000 	.word	0x10320000
 8001d40:	10310000 	.word	0x10310000
 8001d44:	10220000 	.word	0x10220000
 8001d48:	10210000 	.word	0x10210000
 8001d4c:	10120000 	.word	0x10120000
 8001d50:	10110000 	.word	0x10110000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	40010c00 	.word	0x40010c00
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40011400 	.word	0x40011400
 8001d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4909      	ldr	r1, [pc, #36]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f47f ae8e 	bne.w	8001ab0 <HAL_GPIO_Init+0x14>
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	372c      	adds	r7, #44	; 0x2c
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e12b      	b.n	800200e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fba8 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e08:	f000 ffea 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a81      	ldr	r2, [pc, #516]	; (8002018 <HAL_I2C_Init+0x274>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d807      	bhi.n	8001e28 <HAL_I2C_Init+0x84>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a80      	ldr	r2, [pc, #512]	; (800201c <HAL_I2C_Init+0x278>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e006      	b.n	8001e36 <HAL_I2C_Init+0x92>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a7d      	ldr	r2, [pc, #500]	; (8002020 <HAL_I2C_Init+0x27c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0e7      	b.n	800200e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a78      	ldr	r2, [pc, #480]	; (8002024 <HAL_I2C_Init+0x280>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_I2C_Init+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d802      	bhi.n	8001e78 <HAL_I2C_Init+0xd4>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e009      	b.n	8001e8c <HAL_I2C_Init+0xe8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_I2C_Init+0x284>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	495c      	ldr	r1, [pc, #368]	; (8002018 <HAL_I2C_Init+0x274>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d819      	bhi.n	8001ee0 <HAL_I2C_Init+0x13c>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_I2C_Init+0x138>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e59      	subs	r1, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eda:	e051      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e04f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_I2C_Init+0x168>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e012      	b.n	8001f32 <HAL_I2C_Init+0x18e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e58      	subs	r0, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	0099      	lsls	r1, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x196>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e022      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10e      	bne.n	8001f60 <HAL_I2C_Init+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	440b      	add	r3, r1
 8001f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	e00f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0099      	lsls	r1, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	6809      	ldr	r1, [r1, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6911      	ldr	r1, [r2, #16]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68d2      	ldr	r2, [r2, #12]
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	000186a0 	.word	0x000186a0
 800201c:	001e847f 	.word	0x001e847f
 8002020:	003d08ff 	.word	0x003d08ff
 8002024:	431bde83 	.word	0x431bde83
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	817b      	strh	r3, [r7, #10]
 800203c:	4613      	mov	r3, r2
 800203e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff fc1a 	bl	8001878 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 80e0 	bne.w	8002214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	4970      	ldr	r1, [pc, #448]	; (8002220 <HAL_I2C_Master_Transmit+0x1f4>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f964 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e0d3      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2C_Master_Transmit+0x50>
 8002078:	2302      	movs	r3, #2
 800207a:	e0cc      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2221      	movs	r2, #33	; 0x21
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2210      	movs	r2, #16
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	893a      	ldrh	r2, [r7, #8]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a50      	ldr	r2, [pc, #320]	; (8002224 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e4:	8979      	ldrh	r1, [r7, #10]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f89c 	bl	8002228 <I2C_MasterRequestWrite>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e08d      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002110:	e066      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f9de 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	6a39      	ldr	r1, [r7, #32]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9ce 	bl	800255a <I2C_WaitOnBTFFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e01a      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d194      	bne.n	8002112 <HAL_I2C_Master_Transmit+0xe6>
      }
   }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000

08002228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d006      	beq.n	8002252 <I2C_MasterRequestWrite+0x2a>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d003      	beq.n	8002252 <I2C_MasterRequestWrite+0x2a>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002250:	d108      	bne.n	8002264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e00b      	b.n	800227c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	2b12      	cmp	r3, #18
 800226a:	d107      	bne.n	800227c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f84f 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a2:	d103      	bne.n	80022ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e035      	b.n	800231c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022b8:	d108      	bne.n	80022cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e01b      	b.n	8002304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	11db      	asrs	r3, r3, #7
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 0306 	and.w	r3, r3, #6
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f063 030f 	orn	r3, r3, #15
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <I2C_MasterRequestWrite+0xfc>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f875 	bl	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e010      	b.n	800231c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <I2C_MasterRequestWrite+0x100>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f865 	bl	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	00010008 	.word	0x00010008
 8002328:	00010002 	.word	0x00010002

0800232c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233c:	e025      	b.n	800238a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d021      	beq.n	800238a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7ff fa97 	bl	8001878 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d116      	bne.n	800238a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f043 0220 	orr.w	r2, r3, #32
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e023      	b.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10d      	bne.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	e00c      	b.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d0b6      	beq.n	800233e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e8:	e051      	b.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f8:	d123      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002412:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e046      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d021      	beq.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff fa15 	bl	8001878 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d116      	bne.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e020      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10c      	bne.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	e00b      	b.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d18d      	bne.n	80023ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	e02d      	b.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f878 	bl	80025dc <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e02d      	b.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d021      	beq.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7ff f9bb 	bl	8001878 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d116      	bne.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e007      	b.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d1ca      	bne.n	80024e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002566:	e02d      	b.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f837 	bl	80025dc <I2C_IsAcknowledgeFailed>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e02d      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d021      	beq.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002580:	f7ff f97a 	bl	8001878 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d302      	bcc.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e007      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d1ca      	bne.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d11b      	bne.n	800262c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e26c      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8087 	beq.w	8002766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002658:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00c      	beq.n	800267e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002664:	4b8f      	ldr	r3, [pc, #572]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d112      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
 8002670:	4b8c      	ldr	r3, [pc, #560]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d10b      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06c      	beq.n	8002764 <HAL_RCC_OscConfig+0x12c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d168      	bne.n	8002764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e246      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x76>
 80026a0:	4b80      	ldr	r3, [pc, #512]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7f      	ldr	r2, [pc, #508]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e02e      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x98>
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b78      	ldr	r3, [pc, #480]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a77      	ldr	r2, [pc, #476]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0xbc>
 80026da:	4b72      	ldr	r3, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a71      	ldr	r2, [pc, #452]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6a      	ldr	r2, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a67      	ldr	r2, [pc, #412]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f8b0 	bl	8001878 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff f8ac 	bl	8001878 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1fa      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xe4>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f89c 	bl	8001878 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f898 	bl	8001878 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1e6      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x10c>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002772:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x18c>
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x176>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1ba      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4939      	ldr	r1, [pc, #228]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff f851 	bl	8001878 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7ff f84d 	bl	8001878 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e19b      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4927      	ldr	r1, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCC_OscConfig+0x270>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff f830 	bl	8001878 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff f82c 	bl	8001878 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e17a      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d03a      	beq.n	80028bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d019      	beq.n	8002882 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff f810 	bl	8001878 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff f80c 	bl	8001878 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e15a      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800287a:	2001      	movs	r0, #1
 800287c:	f000 fac4 	bl	8002e08 <RCC_Delay>
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7fe fff6 	bl	8001878 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288e:	e00f      	b.n	80028b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe fff2 	bl	8001878 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d908      	bls.n	80028b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e140      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	42420000 	.word	0x42420000
 80028ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e9      	bne.n	8002890 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a6 	beq.w	8002a16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b97      	ldr	r3, [pc, #604]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b94      	ldr	r3, [pc, #592]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a93      	ldr	r2, [pc, #588]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b91      	ldr	r3, [pc, #580]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b8b      	ldr	r3, [pc, #556]	; (8002b30 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a8a      	ldr	r2, [pc, #552]	; (8002b30 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe ffb3 	bl	8001878 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe ffaf 	bl	8001878 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0fd      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x312>
 800293c:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a7a      	ldr	r2, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e02d      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x334>
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a75      	ldr	r2, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a72      	ldr	r2, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	e01c      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0x356>
 8002974:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a6c      	ldr	r2, [pc, #432]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a69      	ldr	r2, [pc, #420]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e00b      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a66      	ldr	r2, [pc, #408]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a63      	ldr	r2, [pc, #396]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d015      	beq.n	80029da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe ff63 	bl	8001878 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe ff5f 	bl	8001878 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0ab      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ee      	beq.n	80029b6 <HAL_RCC_OscConfig+0x37e>
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe ff4d 	bl	8001878 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe ff49 	bl	8001878 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e095      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0a:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a47      	ldr	r2, [pc, #284]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8081 	beq.w	8002b22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d061      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d146      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <HAL_RCC_OscConfig+0x4fc>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe ff1d 	bl	8001878 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe ff19 	bl	8001878 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e067      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d108      	bne.n	8002a7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	492d      	ldr	r1, [pc, #180]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a19      	ldr	r1, [r3, #32]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	4927      	ldr	r1, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x4fc>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe feed 	bl	8001878 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fee9 	bl	8001878 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e037      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46a>
 8002ac0:	e02f      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_RCC_OscConfig+0x4fc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fed6 	bl	8001878 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fed2 	bl	8001878 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e020      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x498>
 8002aee:	e018      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e013      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
 8002b34:	42420060 	.word	0x42420060

08002b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d0      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d910      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4965      	ldr	r1, [pc, #404]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0b8      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	494d      	ldr	r1, [pc, #308]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d040      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e073      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06b      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4936      	ldr	r1, [pc, #216]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fe26 	bl	8001878 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe fe22 	bl	8001878 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e053      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d210      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	4922      	ldr	r1, [pc, #136]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e032      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4916      	ldr	r1, [pc, #88]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	490e      	ldr	r1, [pc, #56]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cc6:	f000 f821 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fd84 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08005df8 	.word	0x08005df8
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004

08002d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	b490      	push	{r4, r7}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d14:	1d3c      	adds	r4, r7, #4
 8002d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d1c:	f240 2301 	movw	r3, #513	; 0x201
 8002d20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x40>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x46>
 8002d4a:	e02d      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	e02d      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d5e:	4413      	add	r3, r2
 8002d60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0c5b      	lsrs	r3, r3, #17
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d7e:	4413      	add	r3, r2
 8002d80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8a:	fb02 f203 	mul.w	r2, r2, r3
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
 8002d96:	e004      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	623b      	str	r3, [r7, #32]
      break;
 8002da6:	e002      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002daa:	623b      	str	r3, [r7, #32]
      break;
 8002dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dae:	6a3b      	ldr	r3, [r7, #32]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc90      	pop	{r4, r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	08005c0c 	.word	0x08005c0c
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000000 	.word	0x20000000

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff2 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08005e08 	.word	0x08005e08

08002e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <RCC_Delay+0x34>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <RCC_Delay+0x38>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a5b      	lsrs	r3, r3, #9
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e24:	bf00      	nop
  }
  while (Delay --);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	60fa      	str	r2, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <RCC_Delay+0x1c>
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	10624dd3 	.word	0x10624dd3

08002e44 <__errno>:
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <__errno+0x8>)
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	2000000c 	.word	0x2000000c

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	2600      	movs	r6, #0
 8002e54:	4d0c      	ldr	r5, [pc, #48]	; (8002e88 <__libc_init_array+0x38>)
 8002e56:	4c0d      	ldr	r4, [pc, #52]	; (8002e8c <__libc_init_array+0x3c>)
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	f002 feba 	bl	8005bd8 <_init>
 8002e64:	2600      	movs	r6, #0
 8002e66:	4d0a      	ldr	r5, [pc, #40]	; (8002e90 <__libc_init_array+0x40>)
 8002e68:	4c0a      	ldr	r4, [pc, #40]	; (8002e94 <__libc_init_array+0x44>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	080061f4 	.word	0x080061f4
 8002e8c:	080061f4 	.word	0x080061f4
 8002e90:	080061f4 	.word	0x080061f4
 8002e94:	080061f8 	.word	0x080061f8

08002e98 <memcpy>:
 8002e98:	440a      	add	r2, r1
 8002e9a:	4291      	cmp	r1, r2
 8002e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ea0:	d100      	bne.n	8002ea4 <memcpy+0xc>
 8002ea2:	4770      	bx	lr
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eaa:	4291      	cmp	r1, r2
 8002eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002eb0:	d1f9      	bne.n	8002ea6 <memcpy+0xe>
 8002eb2:	bd10      	pop	{r4, pc}

08002eb4 <memset>:
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4402      	add	r2, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <__cvt>:
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eca:	461f      	mov	r7, r3
 8002ecc:	bfbb      	ittet	lt
 8002ece:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ed2:	461f      	movlt	r7, r3
 8002ed4:	2300      	movge	r3, #0
 8002ed6:	232d      	movlt	r3, #45	; 0x2d
 8002ed8:	b088      	sub	sp, #32
 8002eda:	4614      	mov	r4, r2
 8002edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ede:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ee0:	7013      	strb	r3, [r2, #0]
 8002ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ee4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002ee8:	f023 0820 	bic.w	r8, r3, #32
 8002eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ef0:	d005      	beq.n	8002efe <__cvt+0x3a>
 8002ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ef6:	d100      	bne.n	8002efa <__cvt+0x36>
 8002ef8:	3501      	adds	r5, #1
 8002efa:	2302      	movs	r3, #2
 8002efc:	e000      	b.n	8002f00 <__cvt+0x3c>
 8002efe:	2303      	movs	r3, #3
 8002f00:	aa07      	add	r2, sp, #28
 8002f02:	9204      	str	r2, [sp, #16]
 8002f04:	aa06      	add	r2, sp, #24
 8002f06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f0a:	e9cd 3500 	strd	r3, r5, [sp]
 8002f0e:	4622      	mov	r2, r4
 8002f10:	463b      	mov	r3, r7
 8002f12:	f000 fce5 	bl	80038e0 <_dtoa_r>
 8002f16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	d102      	bne.n	8002f24 <__cvt+0x60>
 8002f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d522      	bpl.n	8002f6a <__cvt+0xa6>
 8002f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f28:	eb06 0905 	add.w	r9, r6, r5
 8002f2c:	d110      	bne.n	8002f50 <__cvt+0x8c>
 8002f2e:	7833      	ldrb	r3, [r6, #0]
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d10a      	bne.n	8002f4a <__cvt+0x86>
 8002f34:	2200      	movs	r2, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4639      	mov	r1, r7
 8002f3c:	f7fd fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8002f40:	b918      	cbnz	r0, 8002f4a <__cvt+0x86>
 8002f42:	f1c5 0501 	rsb	r5, r5, #1
 8002f46:	f8ca 5000 	str.w	r5, [sl]
 8002f4a:	f8da 3000 	ldr.w	r3, [sl]
 8002f4e:	4499      	add	r9, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	2300      	movs	r3, #0
 8002f54:	4620      	mov	r0, r4
 8002f56:	4639      	mov	r1, r7
 8002f58:	f7fd fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8002f5c:	b108      	cbz	r0, 8002f62 <__cvt+0x9e>
 8002f5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f62:	2230      	movs	r2, #48	; 0x30
 8002f64:	9b07      	ldr	r3, [sp, #28]
 8002f66:	454b      	cmp	r3, r9
 8002f68:	d307      	bcc.n	8002f7a <__cvt+0xb6>
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	9b07      	ldr	r3, [sp, #28]
 8002f6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f70:	1b9b      	subs	r3, r3, r6
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	b008      	add	sp, #32
 8002f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	9107      	str	r1, [sp, #28]
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e7f0      	b.n	8002f64 <__cvt+0xa0>

08002f82 <__exponent>:
 8002f82:	4603      	mov	r3, r0
 8002f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f86:	2900      	cmp	r1, #0
 8002f88:	f803 2b02 	strb.w	r2, [r3], #2
 8002f8c:	bfb6      	itet	lt
 8002f8e:	222d      	movlt	r2, #45	; 0x2d
 8002f90:	222b      	movge	r2, #43	; 0x2b
 8002f92:	4249      	neglt	r1, r1
 8002f94:	2909      	cmp	r1, #9
 8002f96:	7042      	strb	r2, [r0, #1]
 8002f98:	dd2b      	ble.n	8002ff2 <__exponent+0x70>
 8002f9a:	f10d 0407 	add.w	r4, sp, #7
 8002f9e:	46a4      	mov	ip, r4
 8002fa0:	270a      	movs	r7, #10
 8002fa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	46a6      	mov	lr, r4
 8002faa:	fb07 1516 	mls	r5, r7, r6, r1
 8002fae:	2a63      	cmp	r2, #99	; 0x63
 8002fb0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8002fba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002fbe:	dcf0      	bgt.n	8002fa2 <__exponent+0x20>
 8002fc0:	3130      	adds	r1, #48	; 0x30
 8002fc2:	f1ae 0502 	sub.w	r5, lr, #2
 8002fc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	1c44      	adds	r4, r0, #1
 8002fce:	4561      	cmp	r1, ip
 8002fd0:	d30a      	bcc.n	8002fe8 <__exponent+0x66>
 8002fd2:	f10d 0209 	add.w	r2, sp, #9
 8002fd6:	eba2 020e 	sub.w	r2, r2, lr
 8002fda:	4565      	cmp	r5, ip
 8002fdc:	bf88      	it	hi
 8002fde:	2200      	movhi	r2, #0
 8002fe0:	4413      	add	r3, r2
 8002fe2:	1a18      	subs	r0, r3, r0
 8002fe4:	b003      	add	sp, #12
 8002fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fec:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002ff0:	e7ed      	b.n	8002fce <__exponent+0x4c>
 8002ff2:	2330      	movs	r3, #48	; 0x30
 8002ff4:	3130      	adds	r1, #48	; 0x30
 8002ff6:	7083      	strb	r3, [r0, #2]
 8002ff8:	70c1      	strb	r1, [r0, #3]
 8002ffa:	1d03      	adds	r3, r0, #4
 8002ffc:	e7f1      	b.n	8002fe2 <__exponent+0x60>
	...

08003000 <_printf_float>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	b091      	sub	sp, #68	; 0x44
 8003006:	460c      	mov	r4, r1
 8003008:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800300c:	4616      	mov	r6, r2
 800300e:	461f      	mov	r7, r3
 8003010:	4605      	mov	r5, r0
 8003012:	f001 fa53 	bl	80044bc <_localeconv_r>
 8003016:	6803      	ldr	r3, [r0, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	9309      	str	r3, [sp, #36]	; 0x24
 800301c:	f7fd f898 	bl	8000150 <strlen>
 8003020:	2300      	movs	r3, #0
 8003022:	930e      	str	r3, [sp, #56]	; 0x38
 8003024:	f8d8 3000 	ldr.w	r3, [r8]
 8003028:	900a      	str	r0, [sp, #40]	; 0x28
 800302a:	3307      	adds	r3, #7
 800302c:	f023 0307 	bic.w	r3, r3, #7
 8003030:	f103 0208 	add.w	r2, r3, #8
 8003034:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003038:	f8d4 b000 	ldr.w	fp, [r4]
 800303c:	f8c8 2000 	str.w	r2, [r8]
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003048:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800304c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003050:	930b      	str	r3, [sp, #44]	; 0x2c
 8003052:	f04f 32ff 	mov.w	r2, #4294967295
 8003056:	4640      	mov	r0, r8
 8003058:	4b9c      	ldr	r3, [pc, #624]	; (80032cc <_printf_float+0x2cc>)
 800305a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800305c:	f7fd fcd6 	bl	8000a0c <__aeabi_dcmpun>
 8003060:	bb70      	cbnz	r0, 80030c0 <_printf_float+0xc0>
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	4640      	mov	r0, r8
 8003068:	4b98      	ldr	r3, [pc, #608]	; (80032cc <_printf_float+0x2cc>)
 800306a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800306c:	f7fd fcb0 	bl	80009d0 <__aeabi_dcmple>
 8003070:	bb30      	cbnz	r0, 80030c0 <_printf_float+0xc0>
 8003072:	2200      	movs	r2, #0
 8003074:	2300      	movs	r3, #0
 8003076:	4640      	mov	r0, r8
 8003078:	4651      	mov	r1, sl
 800307a:	f7fd fc9f 	bl	80009bc <__aeabi_dcmplt>
 800307e:	b110      	cbz	r0, 8003086 <_printf_float+0x86>
 8003080:	232d      	movs	r3, #45	; 0x2d
 8003082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <_printf_float+0x2d0>)
 8003088:	4892      	ldr	r0, [pc, #584]	; (80032d4 <_printf_float+0x2d4>)
 800308a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800308e:	bf94      	ite	ls
 8003090:	4698      	movls	r8, r3
 8003092:	4680      	movhi	r8, r0
 8003094:	2303      	movs	r3, #3
 8003096:	f04f 0a00 	mov.w	sl, #0
 800309a:	6123      	str	r3, [r4, #16]
 800309c:	f02b 0304 	bic.w	r3, fp, #4
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	4633      	mov	r3, r6
 80030a4:	4621      	mov	r1, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	9700      	str	r7, [sp, #0]
 80030aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80030ac:	f000 f9d4 	bl	8003458 <_printf_common>
 80030b0:	3001      	adds	r0, #1
 80030b2:	f040 8090 	bne.w	80031d6 <_printf_float+0x1d6>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	b011      	add	sp, #68	; 0x44
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	4642      	mov	r2, r8
 80030c2:	4653      	mov	r3, sl
 80030c4:	4640      	mov	r0, r8
 80030c6:	4651      	mov	r1, sl
 80030c8:	f7fd fca0 	bl	8000a0c <__aeabi_dcmpun>
 80030cc:	b148      	cbz	r0, 80030e2 <_printf_float+0xe2>
 80030ce:	f1ba 0f00 	cmp.w	sl, #0
 80030d2:	bfb8      	it	lt
 80030d4:	232d      	movlt	r3, #45	; 0x2d
 80030d6:	4880      	ldr	r0, [pc, #512]	; (80032d8 <_printf_float+0x2d8>)
 80030d8:	bfb8      	it	lt
 80030da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80030de:	4b7f      	ldr	r3, [pc, #508]	; (80032dc <_printf_float+0x2dc>)
 80030e0:	e7d3      	b.n	800308a <_printf_float+0x8a>
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	d142      	bne.n	8003172 <_printf_float+0x172>
 80030ec:	2306      	movs	r3, #6
 80030ee:	6063      	str	r3, [r4, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	9206      	str	r2, [sp, #24]
 80030f4:	aa0e      	add	r2, sp, #56	; 0x38
 80030f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80030fa:	aa0d      	add	r2, sp, #52	; 0x34
 80030fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003100:	9203      	str	r2, [sp, #12]
 8003102:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003106:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	4642      	mov	r2, r8
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4628      	mov	r0, r5
 8003114:	4653      	mov	r3, sl
 8003116:	910b      	str	r1, [sp, #44]	; 0x2c
 8003118:	f7ff fed4 	bl	8002ec4 <__cvt>
 800311c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800311e:	4680      	mov	r8, r0
 8003120:	2947      	cmp	r1, #71	; 0x47
 8003122:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003124:	d108      	bne.n	8003138 <_printf_float+0x138>
 8003126:	1cc8      	adds	r0, r1, #3
 8003128:	db02      	blt.n	8003130 <_printf_float+0x130>
 800312a:	6863      	ldr	r3, [r4, #4]
 800312c:	4299      	cmp	r1, r3
 800312e:	dd40      	ble.n	80031b2 <_printf_float+0x1b2>
 8003130:	f1a9 0902 	sub.w	r9, r9, #2
 8003134:	fa5f f989 	uxtb.w	r9, r9
 8003138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800313c:	d81f      	bhi.n	800317e <_printf_float+0x17e>
 800313e:	464a      	mov	r2, r9
 8003140:	3901      	subs	r1, #1
 8003142:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003146:	910d      	str	r1, [sp, #52]	; 0x34
 8003148:	f7ff ff1b 	bl	8002f82 <__exponent>
 800314c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800314e:	4682      	mov	sl, r0
 8003150:	1813      	adds	r3, r2, r0
 8003152:	2a01      	cmp	r2, #1
 8003154:	6123      	str	r3, [r4, #16]
 8003156:	dc02      	bgt.n	800315e <_printf_float+0x15e>
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	07d2      	lsls	r2, r2, #31
 800315c:	d501      	bpl.n	8003162 <_printf_float+0x162>
 800315e:	3301      	adds	r3, #1
 8003160:	6123      	str	r3, [r4, #16]
 8003162:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003166:	2b00      	cmp	r3, #0
 8003168:	d09b      	beq.n	80030a2 <_printf_float+0xa2>
 800316a:	232d      	movs	r3, #45	; 0x2d
 800316c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003170:	e797      	b.n	80030a2 <_printf_float+0xa2>
 8003172:	2947      	cmp	r1, #71	; 0x47
 8003174:	d1bc      	bne.n	80030f0 <_printf_float+0xf0>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ba      	bne.n	80030f0 <_printf_float+0xf0>
 800317a:	2301      	movs	r3, #1
 800317c:	e7b7      	b.n	80030ee <_printf_float+0xee>
 800317e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003182:	d118      	bne.n	80031b6 <_printf_float+0x1b6>
 8003184:	2900      	cmp	r1, #0
 8003186:	6863      	ldr	r3, [r4, #4]
 8003188:	dd0b      	ble.n	80031a2 <_printf_float+0x1a2>
 800318a:	6121      	str	r1, [r4, #16]
 800318c:	b913      	cbnz	r3, 8003194 <_printf_float+0x194>
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	07d0      	lsls	r0, r2, #31
 8003192:	d502      	bpl.n	800319a <_printf_float+0x19a>
 8003194:	3301      	adds	r3, #1
 8003196:	440b      	add	r3, r1
 8003198:	6123      	str	r3, [r4, #16]
 800319a:	f04f 0a00 	mov.w	sl, #0
 800319e:	65a1      	str	r1, [r4, #88]	; 0x58
 80031a0:	e7df      	b.n	8003162 <_printf_float+0x162>
 80031a2:	b913      	cbnz	r3, 80031aa <_printf_float+0x1aa>
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	07d2      	lsls	r2, r2, #31
 80031a8:	d501      	bpl.n	80031ae <_printf_float+0x1ae>
 80031aa:	3302      	adds	r3, #2
 80031ac:	e7f4      	b.n	8003198 <_printf_float+0x198>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e7f2      	b.n	8003198 <_printf_float+0x198>
 80031b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80031b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031b8:	4299      	cmp	r1, r3
 80031ba:	db05      	blt.n	80031c8 <_printf_float+0x1c8>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	6121      	str	r1, [r4, #16]
 80031c0:	07d8      	lsls	r0, r3, #31
 80031c2:	d5ea      	bpl.n	800319a <_printf_float+0x19a>
 80031c4:	1c4b      	adds	r3, r1, #1
 80031c6:	e7e7      	b.n	8003198 <_printf_float+0x198>
 80031c8:	2900      	cmp	r1, #0
 80031ca:	bfcc      	ite	gt
 80031cc:	2201      	movgt	r2, #1
 80031ce:	f1c1 0202 	rsble	r2, r1, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	e7e0      	b.n	8003198 <_printf_float+0x198>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	055a      	lsls	r2, r3, #21
 80031da:	d407      	bmi.n	80031ec <_printf_float+0x1ec>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	4642      	mov	r2, r8
 80031e0:	4631      	mov	r1, r6
 80031e2:	4628      	mov	r0, r5
 80031e4:	47b8      	blx	r7
 80031e6:	3001      	adds	r0, #1
 80031e8:	d12b      	bne.n	8003242 <_printf_float+0x242>
 80031ea:	e764      	b.n	80030b6 <_printf_float+0xb6>
 80031ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80031f0:	f240 80dd 	bls.w	80033ae <_printf_float+0x3ae>
 80031f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031f8:	2200      	movs	r2, #0
 80031fa:	2300      	movs	r3, #0
 80031fc:	f7fd fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8003200:	2800      	cmp	r0, #0
 8003202:	d033      	beq.n	800326c <_printf_float+0x26c>
 8003204:	2301      	movs	r3, #1
 8003206:	4631      	mov	r1, r6
 8003208:	4628      	mov	r0, r5
 800320a:	4a35      	ldr	r2, [pc, #212]	; (80032e0 <_printf_float+0x2e0>)
 800320c:	47b8      	blx	r7
 800320e:	3001      	adds	r0, #1
 8003210:	f43f af51 	beq.w	80030b6 <_printf_float+0xb6>
 8003214:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003218:	429a      	cmp	r2, r3
 800321a:	db02      	blt.n	8003222 <_printf_float+0x222>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	07d8      	lsls	r0, r3, #31
 8003220:	d50f      	bpl.n	8003242 <_printf_float+0x242>
 8003222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003226:	4631      	mov	r1, r6
 8003228:	4628      	mov	r0, r5
 800322a:	47b8      	blx	r7
 800322c:	3001      	adds	r0, #1
 800322e:	f43f af42 	beq.w	80030b6 <_printf_float+0xb6>
 8003232:	f04f 0800 	mov.w	r8, #0
 8003236:	f104 091a 	add.w	r9, r4, #26
 800323a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800323c:	3b01      	subs	r3, #1
 800323e:	4543      	cmp	r3, r8
 8003240:	dc09      	bgt.n	8003256 <_printf_float+0x256>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	079b      	lsls	r3, r3, #30
 8003246:	f100 8102 	bmi.w	800344e <_printf_float+0x44e>
 800324a:	68e0      	ldr	r0, [r4, #12]
 800324c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800324e:	4298      	cmp	r0, r3
 8003250:	bfb8      	it	lt
 8003252:	4618      	movlt	r0, r3
 8003254:	e731      	b.n	80030ba <_printf_float+0xba>
 8003256:	2301      	movs	r3, #1
 8003258:	464a      	mov	r2, r9
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	f43f af28 	beq.w	80030b6 <_printf_float+0xb6>
 8003266:	f108 0801 	add.w	r8, r8, #1
 800326a:	e7e6      	b.n	800323a <_printf_float+0x23a>
 800326c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800326e:	2b00      	cmp	r3, #0
 8003270:	dc38      	bgt.n	80032e4 <_printf_float+0x2e4>
 8003272:	2301      	movs	r3, #1
 8003274:	4631      	mov	r1, r6
 8003276:	4628      	mov	r0, r5
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <_printf_float+0x2e0>)
 800327a:	47b8      	blx	r7
 800327c:	3001      	adds	r0, #1
 800327e:	f43f af1a 	beq.w	80030b6 <_printf_float+0xb6>
 8003282:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003286:	4313      	orrs	r3, r2
 8003288:	d102      	bne.n	8003290 <_printf_float+0x290>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	07d9      	lsls	r1, r3, #31
 800328e:	d5d8      	bpl.n	8003242 <_printf_float+0x242>
 8003290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003294:	4631      	mov	r1, r6
 8003296:	4628      	mov	r0, r5
 8003298:	47b8      	blx	r7
 800329a:	3001      	adds	r0, #1
 800329c:	f43f af0b 	beq.w	80030b6 <_printf_float+0xb6>
 80032a0:	f04f 0900 	mov.w	r9, #0
 80032a4:	f104 0a1a 	add.w	sl, r4, #26
 80032a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032aa:	425b      	negs	r3, r3
 80032ac:	454b      	cmp	r3, r9
 80032ae:	dc01      	bgt.n	80032b4 <_printf_float+0x2b4>
 80032b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b2:	e794      	b.n	80031de <_printf_float+0x1de>
 80032b4:	2301      	movs	r3, #1
 80032b6:	4652      	mov	r2, sl
 80032b8:	4631      	mov	r1, r6
 80032ba:	4628      	mov	r0, r5
 80032bc:	47b8      	blx	r7
 80032be:	3001      	adds	r0, #1
 80032c0:	f43f aef9 	beq.w	80030b6 <_printf_float+0xb6>
 80032c4:	f109 0901 	add.w	r9, r9, #1
 80032c8:	e7ee      	b.n	80032a8 <_printf_float+0x2a8>
 80032ca:	bf00      	nop
 80032cc:	7fefffff 	.word	0x7fefffff
 80032d0:	08005e14 	.word	0x08005e14
 80032d4:	08005e18 	.word	0x08005e18
 80032d8:	08005e20 	.word	0x08005e20
 80032dc:	08005e1c 	.word	0x08005e1c
 80032e0:	08005e24 	.word	0x08005e24
 80032e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032e8:	429a      	cmp	r2, r3
 80032ea:	bfa8      	it	ge
 80032ec:	461a      	movge	r2, r3
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	4691      	mov	r9, r2
 80032f2:	dc37      	bgt.n	8003364 <_printf_float+0x364>
 80032f4:	f04f 0b00 	mov.w	fp, #0
 80032f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032fc:	f104 021a 	add.w	r2, r4, #26
 8003300:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003304:	ebaa 0309 	sub.w	r3, sl, r9
 8003308:	455b      	cmp	r3, fp
 800330a:	dc33      	bgt.n	8003374 <_printf_float+0x374>
 800330c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003310:	429a      	cmp	r2, r3
 8003312:	db3b      	blt.n	800338c <_printf_float+0x38c>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	07da      	lsls	r2, r3, #31
 8003318:	d438      	bmi.n	800338c <_printf_float+0x38c>
 800331a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800331c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800331e:	eba2 030a 	sub.w	r3, r2, sl
 8003322:	eba2 0901 	sub.w	r9, r2, r1
 8003326:	4599      	cmp	r9, r3
 8003328:	bfa8      	it	ge
 800332a:	4699      	movge	r9, r3
 800332c:	f1b9 0f00 	cmp.w	r9, #0
 8003330:	dc34      	bgt.n	800339c <_printf_float+0x39c>
 8003332:	f04f 0800 	mov.w	r8, #0
 8003336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800333a:	f104 0a1a 	add.w	sl, r4, #26
 800333e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	eba3 0309 	sub.w	r3, r3, r9
 8003348:	4543      	cmp	r3, r8
 800334a:	f77f af7a 	ble.w	8003242 <_printf_float+0x242>
 800334e:	2301      	movs	r3, #1
 8003350:	4652      	mov	r2, sl
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f aeac 	beq.w	80030b6 <_printf_float+0xb6>
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	e7ec      	b.n	800333e <_printf_float+0x33e>
 8003364:	4613      	mov	r3, r2
 8003366:	4631      	mov	r1, r6
 8003368:	4642      	mov	r2, r8
 800336a:	4628      	mov	r0, r5
 800336c:	47b8      	blx	r7
 800336e:	3001      	adds	r0, #1
 8003370:	d1c0      	bne.n	80032f4 <_printf_float+0x2f4>
 8003372:	e6a0      	b.n	80030b6 <_printf_float+0xb6>
 8003374:	2301      	movs	r3, #1
 8003376:	4631      	mov	r1, r6
 8003378:	4628      	mov	r0, r5
 800337a:	920b      	str	r2, [sp, #44]	; 0x2c
 800337c:	47b8      	blx	r7
 800337e:	3001      	adds	r0, #1
 8003380:	f43f ae99 	beq.w	80030b6 <_printf_float+0xb6>
 8003384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003386:	f10b 0b01 	add.w	fp, fp, #1
 800338a:	e7b9      	b.n	8003300 <_printf_float+0x300>
 800338c:	4631      	mov	r1, r6
 800338e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003392:	4628      	mov	r0, r5
 8003394:	47b8      	blx	r7
 8003396:	3001      	adds	r0, #1
 8003398:	d1bf      	bne.n	800331a <_printf_float+0x31a>
 800339a:	e68c      	b.n	80030b6 <_printf_float+0xb6>
 800339c:	464b      	mov	r3, r9
 800339e:	4631      	mov	r1, r6
 80033a0:	4628      	mov	r0, r5
 80033a2:	eb08 020a 	add.w	r2, r8, sl
 80033a6:	47b8      	blx	r7
 80033a8:	3001      	adds	r0, #1
 80033aa:	d1c2      	bne.n	8003332 <_printf_float+0x332>
 80033ac:	e683      	b.n	80030b6 <_printf_float+0xb6>
 80033ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033b0:	2a01      	cmp	r2, #1
 80033b2:	dc01      	bgt.n	80033b8 <_printf_float+0x3b8>
 80033b4:	07db      	lsls	r3, r3, #31
 80033b6:	d537      	bpl.n	8003428 <_printf_float+0x428>
 80033b8:	2301      	movs	r3, #1
 80033ba:	4642      	mov	r2, r8
 80033bc:	4631      	mov	r1, r6
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	f43f ae77 	beq.w	80030b6 <_printf_float+0xb6>
 80033c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033cc:	4631      	mov	r1, r6
 80033ce:	4628      	mov	r0, r5
 80033d0:	47b8      	blx	r7
 80033d2:	3001      	adds	r0, #1
 80033d4:	f43f ae6f 	beq.w	80030b6 <_printf_float+0xb6>
 80033d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033dc:	2200      	movs	r2, #0
 80033de:	2300      	movs	r3, #0
 80033e0:	f7fd fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80033e4:	b9d8      	cbnz	r0, 800341e <_printf_float+0x41e>
 80033e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e8:	f108 0201 	add.w	r2, r8, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	d10e      	bne.n	8003416 <_printf_float+0x416>
 80033f8:	e65d      	b.n	80030b6 <_printf_float+0xb6>
 80033fa:	2301      	movs	r3, #1
 80033fc:	464a      	mov	r2, r9
 80033fe:	4631      	mov	r1, r6
 8003400:	4628      	mov	r0, r5
 8003402:	47b8      	blx	r7
 8003404:	3001      	adds	r0, #1
 8003406:	f43f ae56 	beq.w	80030b6 <_printf_float+0xb6>
 800340a:	f108 0801 	add.w	r8, r8, #1
 800340e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003410:	3b01      	subs	r3, #1
 8003412:	4543      	cmp	r3, r8
 8003414:	dcf1      	bgt.n	80033fa <_printf_float+0x3fa>
 8003416:	4653      	mov	r3, sl
 8003418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800341c:	e6e0      	b.n	80031e0 <_printf_float+0x1e0>
 800341e:	f04f 0800 	mov.w	r8, #0
 8003422:	f104 091a 	add.w	r9, r4, #26
 8003426:	e7f2      	b.n	800340e <_printf_float+0x40e>
 8003428:	2301      	movs	r3, #1
 800342a:	4642      	mov	r2, r8
 800342c:	e7df      	b.n	80033ee <_printf_float+0x3ee>
 800342e:	2301      	movs	r3, #1
 8003430:	464a      	mov	r2, r9
 8003432:	4631      	mov	r1, r6
 8003434:	4628      	mov	r0, r5
 8003436:	47b8      	blx	r7
 8003438:	3001      	adds	r0, #1
 800343a:	f43f ae3c 	beq.w	80030b6 <_printf_float+0xb6>
 800343e:	f108 0801 	add.w	r8, r8, #1
 8003442:	68e3      	ldr	r3, [r4, #12]
 8003444:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003446:	1a5b      	subs	r3, r3, r1
 8003448:	4543      	cmp	r3, r8
 800344a:	dcf0      	bgt.n	800342e <_printf_float+0x42e>
 800344c:	e6fd      	b.n	800324a <_printf_float+0x24a>
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	f104 0919 	add.w	r9, r4, #25
 8003456:	e7f4      	b.n	8003442 <_printf_float+0x442>

08003458 <_printf_common>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	4616      	mov	r6, r2
 800345e:	4699      	mov	r9, r3
 8003460:	688a      	ldr	r2, [r1, #8]
 8003462:	690b      	ldr	r3, [r1, #16]
 8003464:	4607      	mov	r7, r0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfb8      	it	lt
 800346a:	4613      	movlt	r3, r2
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003472:	460c      	mov	r4, r1
 8003474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003478:	b10a      	cbz	r2, 800347e <_printf_common+0x26>
 800347a:	3301      	adds	r3, #1
 800347c:	6033      	str	r3, [r6, #0]
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	0699      	lsls	r1, r3, #26
 8003482:	bf42      	ittt	mi
 8003484:	6833      	ldrmi	r3, [r6, #0]
 8003486:	3302      	addmi	r3, #2
 8003488:	6033      	strmi	r3, [r6, #0]
 800348a:	6825      	ldr	r5, [r4, #0]
 800348c:	f015 0506 	ands.w	r5, r5, #6
 8003490:	d106      	bne.n	80034a0 <_printf_common+0x48>
 8003492:	f104 0a19 	add.w	sl, r4, #25
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	6832      	ldr	r2, [r6, #0]
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	42ab      	cmp	r3, r5
 800349e:	dc28      	bgt.n	80034f2 <_printf_common+0x9a>
 80034a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034a4:	1e13      	subs	r3, r2, #0
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	bf18      	it	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	0692      	lsls	r2, r2, #26
 80034ae:	d42d      	bmi.n	800350c <_printf_common+0xb4>
 80034b0:	4649      	mov	r1, r9
 80034b2:	4638      	mov	r0, r7
 80034b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d020      	beq.n	8003500 <_printf_common+0xa8>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	68e5      	ldr	r5, [r4, #12]
 80034c2:	f003 0306 	and.w	r3, r3, #6
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf18      	it	ne
 80034ca:	2500      	movne	r5, #0
 80034cc:	6832      	ldr	r2, [r6, #0]
 80034ce:	f04f 0600 	mov.w	r6, #0
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	bf08      	it	eq
 80034d6:	1aad      	subeq	r5, r5, r2
 80034d8:	6922      	ldr	r2, [r4, #16]
 80034da:	bf08      	it	eq
 80034dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bfc4      	itt	gt
 80034e4:	1a9b      	subgt	r3, r3, r2
 80034e6:	18ed      	addgt	r5, r5, r3
 80034e8:	341a      	adds	r4, #26
 80034ea:	42b5      	cmp	r5, r6
 80034ec:	d11a      	bne.n	8003524 <_printf_common+0xcc>
 80034ee:	2000      	movs	r0, #0
 80034f0:	e008      	b.n	8003504 <_printf_common+0xac>
 80034f2:	2301      	movs	r3, #1
 80034f4:	4652      	mov	r2, sl
 80034f6:	4649      	mov	r1, r9
 80034f8:	4638      	mov	r0, r7
 80034fa:	47c0      	blx	r8
 80034fc:	3001      	adds	r0, #1
 80034fe:	d103      	bne.n	8003508 <_printf_common+0xb0>
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003508:	3501      	adds	r5, #1
 800350a:	e7c4      	b.n	8003496 <_printf_common+0x3e>
 800350c:	2030      	movs	r0, #48	; 0x30
 800350e:	18e1      	adds	r1, r4, r3
 8003510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800351a:	4422      	add	r2, r4
 800351c:	3302      	adds	r3, #2
 800351e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003522:	e7c5      	b.n	80034b0 <_printf_common+0x58>
 8003524:	2301      	movs	r3, #1
 8003526:	4622      	mov	r2, r4
 8003528:	4649      	mov	r1, r9
 800352a:	4638      	mov	r0, r7
 800352c:	47c0      	blx	r8
 800352e:	3001      	adds	r0, #1
 8003530:	d0e6      	beq.n	8003500 <_printf_common+0xa8>
 8003532:	3601      	adds	r6, #1
 8003534:	e7d9      	b.n	80034ea <_printf_common+0x92>
	...

08003538 <_printf_i>:
 8003538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	460c      	mov	r4, r1
 800353e:	7e27      	ldrb	r7, [r4, #24]
 8003540:	4691      	mov	r9, r2
 8003542:	2f78      	cmp	r7, #120	; 0x78
 8003544:	4680      	mov	r8, r0
 8003546:	469a      	mov	sl, r3
 8003548:	990c      	ldr	r1, [sp, #48]	; 0x30
 800354a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800354e:	d807      	bhi.n	8003560 <_printf_i+0x28>
 8003550:	2f62      	cmp	r7, #98	; 0x62
 8003552:	d80a      	bhi.n	800356a <_printf_i+0x32>
 8003554:	2f00      	cmp	r7, #0
 8003556:	f000 80d9 	beq.w	800370c <_printf_i+0x1d4>
 800355a:	2f58      	cmp	r7, #88	; 0x58
 800355c:	f000 80a4 	beq.w	80036a8 <_printf_i+0x170>
 8003560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003568:	e03a      	b.n	80035e0 <_printf_i+0xa8>
 800356a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800356e:	2b15      	cmp	r3, #21
 8003570:	d8f6      	bhi.n	8003560 <_printf_i+0x28>
 8003572:	a001      	add	r0, pc, #4	; (adr r0, 8003578 <_printf_i+0x40>)
 8003574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035e5 	.word	0x080035e5
 8003580:	08003561 	.word	0x08003561
 8003584:	08003561 	.word	0x08003561
 8003588:	08003561 	.word	0x08003561
 800358c:	08003561 	.word	0x08003561
 8003590:	080035e5 	.word	0x080035e5
 8003594:	08003561 	.word	0x08003561
 8003598:	08003561 	.word	0x08003561
 800359c:	08003561 	.word	0x08003561
 80035a0:	08003561 	.word	0x08003561
 80035a4:	080036f3 	.word	0x080036f3
 80035a8:	08003615 	.word	0x08003615
 80035ac:	080036d5 	.word	0x080036d5
 80035b0:	08003561 	.word	0x08003561
 80035b4:	08003561 	.word	0x08003561
 80035b8:	08003715 	.word	0x08003715
 80035bc:	08003561 	.word	0x08003561
 80035c0:	08003615 	.word	0x08003615
 80035c4:	08003561 	.word	0x08003561
 80035c8:	08003561 	.word	0x08003561
 80035cc:	080036dd 	.word	0x080036dd
 80035d0:	680b      	ldr	r3, [r1, #0]
 80035d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	600a      	str	r2, [r1, #0]
 80035dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0a4      	b.n	800372e <_printf_i+0x1f6>
 80035e4:	6825      	ldr	r5, [r4, #0]
 80035e6:	6808      	ldr	r0, [r1, #0]
 80035e8:	062e      	lsls	r6, r5, #24
 80035ea:	f100 0304 	add.w	r3, r0, #4
 80035ee:	d50a      	bpl.n	8003606 <_printf_i+0xce>
 80035f0:	6805      	ldr	r5, [r0, #0]
 80035f2:	600b      	str	r3, [r1, #0]
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	da03      	bge.n	8003600 <_printf_i+0xc8>
 80035f8:	232d      	movs	r3, #45	; 0x2d
 80035fa:	426d      	negs	r5, r5
 80035fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003600:	230a      	movs	r3, #10
 8003602:	485e      	ldr	r0, [pc, #376]	; (800377c <_printf_i+0x244>)
 8003604:	e019      	b.n	800363a <_printf_i+0x102>
 8003606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800360a:	6805      	ldr	r5, [r0, #0]
 800360c:	600b      	str	r3, [r1, #0]
 800360e:	bf18      	it	ne
 8003610:	b22d      	sxthne	r5, r5
 8003612:	e7ef      	b.n	80035f4 <_printf_i+0xbc>
 8003614:	680b      	ldr	r3, [r1, #0]
 8003616:	6825      	ldr	r5, [r4, #0]
 8003618:	1d18      	adds	r0, r3, #4
 800361a:	6008      	str	r0, [r1, #0]
 800361c:	0628      	lsls	r0, r5, #24
 800361e:	d501      	bpl.n	8003624 <_printf_i+0xec>
 8003620:	681d      	ldr	r5, [r3, #0]
 8003622:	e002      	b.n	800362a <_printf_i+0xf2>
 8003624:	0669      	lsls	r1, r5, #25
 8003626:	d5fb      	bpl.n	8003620 <_printf_i+0xe8>
 8003628:	881d      	ldrh	r5, [r3, #0]
 800362a:	2f6f      	cmp	r7, #111	; 0x6f
 800362c:	bf0c      	ite	eq
 800362e:	2308      	moveq	r3, #8
 8003630:	230a      	movne	r3, #10
 8003632:	4852      	ldr	r0, [pc, #328]	; (800377c <_printf_i+0x244>)
 8003634:	2100      	movs	r1, #0
 8003636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800363a:	6866      	ldr	r6, [r4, #4]
 800363c:	2e00      	cmp	r6, #0
 800363e:	bfa8      	it	ge
 8003640:	6821      	ldrge	r1, [r4, #0]
 8003642:	60a6      	str	r6, [r4, #8]
 8003644:	bfa4      	itt	ge
 8003646:	f021 0104 	bicge.w	r1, r1, #4
 800364a:	6021      	strge	r1, [r4, #0]
 800364c:	b90d      	cbnz	r5, 8003652 <_printf_i+0x11a>
 800364e:	2e00      	cmp	r6, #0
 8003650:	d04d      	beq.n	80036ee <_printf_i+0x1b6>
 8003652:	4616      	mov	r6, r2
 8003654:	fbb5 f1f3 	udiv	r1, r5, r3
 8003658:	fb03 5711 	mls	r7, r3, r1, r5
 800365c:	5dc7      	ldrb	r7, [r0, r7]
 800365e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003662:	462f      	mov	r7, r5
 8003664:	42bb      	cmp	r3, r7
 8003666:	460d      	mov	r5, r1
 8003668:	d9f4      	bls.n	8003654 <_printf_i+0x11c>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d10b      	bne.n	8003686 <_printf_i+0x14e>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	07df      	lsls	r7, r3, #31
 8003672:	d508      	bpl.n	8003686 <_printf_i+0x14e>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6861      	ldr	r1, [r4, #4]
 8003678:	4299      	cmp	r1, r3
 800367a:	bfde      	ittt	le
 800367c:	2330      	movle	r3, #48	; 0x30
 800367e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003682:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003686:	1b92      	subs	r2, r2, r6
 8003688:	6122      	str	r2, [r4, #16]
 800368a:	464b      	mov	r3, r9
 800368c:	4621      	mov	r1, r4
 800368e:	4640      	mov	r0, r8
 8003690:	f8cd a000 	str.w	sl, [sp]
 8003694:	aa03      	add	r2, sp, #12
 8003696:	f7ff fedf 	bl	8003458 <_printf_common>
 800369a:	3001      	adds	r0, #1
 800369c:	d14c      	bne.n	8003738 <_printf_i+0x200>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	b004      	add	sp, #16
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	4834      	ldr	r0, [pc, #208]	; (800377c <_printf_i+0x244>)
 80036aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ae:	680e      	ldr	r6, [r1, #0]
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80036b6:	061f      	lsls	r7, r3, #24
 80036b8:	600e      	str	r6, [r1, #0]
 80036ba:	d514      	bpl.n	80036e6 <_printf_i+0x1ae>
 80036bc:	07d9      	lsls	r1, r3, #31
 80036be:	bf44      	itt	mi
 80036c0:	f043 0320 	orrmi.w	r3, r3, #32
 80036c4:	6023      	strmi	r3, [r4, #0]
 80036c6:	b91d      	cbnz	r5, 80036d0 <_printf_i+0x198>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f023 0320 	bic.w	r3, r3, #32
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	2310      	movs	r3, #16
 80036d2:	e7af      	b.n	8003634 <_printf_i+0xfc>
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	f043 0320 	orr.w	r3, r3, #32
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	2378      	movs	r3, #120	; 0x78
 80036de:	4828      	ldr	r0, [pc, #160]	; (8003780 <_printf_i+0x248>)
 80036e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036e4:	e7e3      	b.n	80036ae <_printf_i+0x176>
 80036e6:	065e      	lsls	r6, r3, #25
 80036e8:	bf48      	it	mi
 80036ea:	b2ad      	uxthmi	r5, r5
 80036ec:	e7e6      	b.n	80036bc <_printf_i+0x184>
 80036ee:	4616      	mov	r6, r2
 80036f0:	e7bb      	b.n	800366a <_printf_i+0x132>
 80036f2:	680b      	ldr	r3, [r1, #0]
 80036f4:	6826      	ldr	r6, [r4, #0]
 80036f6:	1d1d      	adds	r5, r3, #4
 80036f8:	6960      	ldr	r0, [r4, #20]
 80036fa:	600d      	str	r5, [r1, #0]
 80036fc:	0635      	lsls	r5, r6, #24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	d501      	bpl.n	8003706 <_printf_i+0x1ce>
 8003702:	6018      	str	r0, [r3, #0]
 8003704:	e002      	b.n	800370c <_printf_i+0x1d4>
 8003706:	0671      	lsls	r1, r6, #25
 8003708:	d5fb      	bpl.n	8003702 <_printf_i+0x1ca>
 800370a:	8018      	strh	r0, [r3, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	4616      	mov	r6, r2
 8003710:	6123      	str	r3, [r4, #16]
 8003712:	e7ba      	b.n	800368a <_printf_i+0x152>
 8003714:	680b      	ldr	r3, [r1, #0]
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	600a      	str	r2, [r1, #0]
 800371a:	681e      	ldr	r6, [r3, #0]
 800371c:	2100      	movs	r1, #0
 800371e:	4630      	mov	r0, r6
 8003720:	6862      	ldr	r2, [r4, #4]
 8003722:	f000 fed7 	bl	80044d4 <memchr>
 8003726:	b108      	cbz	r0, 800372c <_printf_i+0x1f4>
 8003728:	1b80      	subs	r0, r0, r6
 800372a:	6060      	str	r0, [r4, #4]
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	2300      	movs	r3, #0
 8003732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003736:	e7a8      	b.n	800368a <_printf_i+0x152>
 8003738:	4632      	mov	r2, r6
 800373a:	4649      	mov	r1, r9
 800373c:	4640      	mov	r0, r8
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	47d0      	blx	sl
 8003742:	3001      	adds	r0, #1
 8003744:	d0ab      	beq.n	800369e <_printf_i+0x166>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	079b      	lsls	r3, r3, #30
 800374a:	d413      	bmi.n	8003774 <_printf_i+0x23c>
 800374c:	68e0      	ldr	r0, [r4, #12]
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	4298      	cmp	r0, r3
 8003752:	bfb8      	it	lt
 8003754:	4618      	movlt	r0, r3
 8003756:	e7a4      	b.n	80036a2 <_printf_i+0x16a>
 8003758:	2301      	movs	r3, #1
 800375a:	4632      	mov	r2, r6
 800375c:	4649      	mov	r1, r9
 800375e:	4640      	mov	r0, r8
 8003760:	47d0      	blx	sl
 8003762:	3001      	adds	r0, #1
 8003764:	d09b      	beq.n	800369e <_printf_i+0x166>
 8003766:	3501      	adds	r5, #1
 8003768:	68e3      	ldr	r3, [r4, #12]
 800376a:	9903      	ldr	r1, [sp, #12]
 800376c:	1a5b      	subs	r3, r3, r1
 800376e:	42ab      	cmp	r3, r5
 8003770:	dcf2      	bgt.n	8003758 <_printf_i+0x220>
 8003772:	e7eb      	b.n	800374c <_printf_i+0x214>
 8003774:	2500      	movs	r5, #0
 8003776:	f104 0619 	add.w	r6, r4, #25
 800377a:	e7f5      	b.n	8003768 <_printf_i+0x230>
 800377c:	08005e26 	.word	0x08005e26
 8003780:	08005e37 	.word	0x08005e37

08003784 <siprintf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800378a:	b500      	push	{lr}
 800378c:	b09c      	sub	sp, #112	; 0x70
 800378e:	ab1d      	add	r3, sp, #116	; 0x74
 8003790:	9002      	str	r0, [sp, #8]
 8003792:	9006      	str	r0, [sp, #24]
 8003794:	9107      	str	r1, [sp, #28]
 8003796:	9104      	str	r1, [sp, #16]
 8003798:	4808      	ldr	r0, [pc, #32]	; (80037bc <siprintf+0x38>)
 800379a:	4909      	ldr	r1, [pc, #36]	; (80037c0 <siprintf+0x3c>)
 800379c:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	a902      	add	r1, sp, #8
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	f001 fb34 	bl	8004e14 <_svfiprintf_r>
 80037ac:	2200      	movs	r2, #0
 80037ae:	9b02      	ldr	r3, [sp, #8]
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	b01c      	add	sp, #112	; 0x70
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b003      	add	sp, #12
 80037ba:	4770      	bx	lr
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <quorem>:
 80037c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	6903      	ldr	r3, [r0, #16]
 80037ca:	690c      	ldr	r4, [r1, #16]
 80037cc:	4607      	mov	r7, r0
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	f2c0 8083 	blt.w	80038da <quorem+0x116>
 80037d4:	3c01      	subs	r4, #1
 80037d6:	f100 0514 	add.w	r5, r0, #20
 80037da:	f101 0814 	add.w	r8, r1, #20
 80037de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80037e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037ec:	3301      	adds	r3, #1
 80037ee:	429a      	cmp	r2, r3
 80037f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80037f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80037f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80037fc:	d332      	bcc.n	8003864 <quorem+0xa0>
 80037fe:	f04f 0e00 	mov.w	lr, #0
 8003802:	4640      	mov	r0, r8
 8003804:	46ac      	mov	ip, r5
 8003806:	46f2      	mov	sl, lr
 8003808:	f850 2b04 	ldr.w	r2, [r0], #4
 800380c:	b293      	uxth	r3, r2
 800380e:	fb06 e303 	mla	r3, r6, r3, lr
 8003812:	0c12      	lsrs	r2, r2, #16
 8003814:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003818:	fb06 e202 	mla	r2, r6, r2, lr
 800381c:	b29b      	uxth	r3, r3
 800381e:	ebaa 0303 	sub.w	r3, sl, r3
 8003822:	f8dc a000 	ldr.w	sl, [ip]
 8003826:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800382a:	fa1f fa8a 	uxth.w	sl, sl
 800382e:	4453      	add	r3, sl
 8003830:	fa1f fa82 	uxth.w	sl, r2
 8003834:	f8dc 2000 	ldr.w	r2, [ip]
 8003838:	4581      	cmp	r9, r0
 800383a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800383e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003842:	b29b      	uxth	r3, r3
 8003844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003848:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800384c:	f84c 3b04 	str.w	r3, [ip], #4
 8003850:	d2da      	bcs.n	8003808 <quorem+0x44>
 8003852:	f855 300b 	ldr.w	r3, [r5, fp]
 8003856:	b92b      	cbnz	r3, 8003864 <quorem+0xa0>
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	3b04      	subs	r3, #4
 800385c:	429d      	cmp	r5, r3
 800385e:	461a      	mov	r2, r3
 8003860:	d32f      	bcc.n	80038c2 <quorem+0xfe>
 8003862:	613c      	str	r4, [r7, #16]
 8003864:	4638      	mov	r0, r7
 8003866:	f001 f8bd 	bl	80049e4 <__mcmp>
 800386a:	2800      	cmp	r0, #0
 800386c:	db25      	blt.n	80038ba <quorem+0xf6>
 800386e:	4628      	mov	r0, r5
 8003870:	f04f 0c00 	mov.w	ip, #0
 8003874:	3601      	adds	r6, #1
 8003876:	f858 1b04 	ldr.w	r1, [r8], #4
 800387a:	f8d0 e000 	ldr.w	lr, [r0]
 800387e:	b28b      	uxth	r3, r1
 8003880:	ebac 0303 	sub.w	r3, ip, r3
 8003884:	fa1f f28e 	uxth.w	r2, lr
 8003888:	4413      	add	r3, r2
 800388a:	0c0a      	lsrs	r2, r1, #16
 800388c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003894:	b29b      	uxth	r3, r3
 8003896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800389a:	45c1      	cmp	r9, r8
 800389c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80038a0:	f840 3b04 	str.w	r3, [r0], #4
 80038a4:	d2e7      	bcs.n	8003876 <quorem+0xb2>
 80038a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038ae:	b922      	cbnz	r2, 80038ba <quorem+0xf6>
 80038b0:	3b04      	subs	r3, #4
 80038b2:	429d      	cmp	r5, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	d30a      	bcc.n	80038ce <quorem+0x10a>
 80038b8:	613c      	str	r4, [r7, #16]
 80038ba:	4630      	mov	r0, r6
 80038bc:	b003      	add	sp, #12
 80038be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	3b04      	subs	r3, #4
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d1cb      	bne.n	8003862 <quorem+0x9e>
 80038ca:	3c01      	subs	r4, #1
 80038cc:	e7c6      	b.n	800385c <quorem+0x98>
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	3b04      	subs	r3, #4
 80038d2:	2a00      	cmp	r2, #0
 80038d4:	d1f0      	bne.n	80038b8 <quorem+0xf4>
 80038d6:	3c01      	subs	r4, #1
 80038d8:	e7eb      	b.n	80038b2 <quorem+0xee>
 80038da:	2000      	movs	r0, #0
 80038dc:	e7ee      	b.n	80038bc <quorem+0xf8>
	...

080038e0 <_dtoa_r>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4616      	mov	r6, r2
 80038e6:	461f      	mov	r7, r3
 80038e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80038ea:	b099      	sub	sp, #100	; 0x64
 80038ec:	4605      	mov	r5, r0
 80038ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80038f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80038f6:	b974      	cbnz	r4, 8003916 <_dtoa_r+0x36>
 80038f8:	2010      	movs	r0, #16
 80038fa:	f000 fde3 	bl	80044c4 <malloc>
 80038fe:	4602      	mov	r2, r0
 8003900:	6268      	str	r0, [r5, #36]	; 0x24
 8003902:	b920      	cbnz	r0, 800390e <_dtoa_r+0x2e>
 8003904:	21ea      	movs	r1, #234	; 0xea
 8003906:	4bae      	ldr	r3, [pc, #696]	; (8003bc0 <_dtoa_r+0x2e0>)
 8003908:	48ae      	ldr	r0, [pc, #696]	; (8003bc4 <_dtoa_r+0x2e4>)
 800390a:	f001 fb93 	bl	8005034 <__assert_func>
 800390e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003912:	6004      	str	r4, [r0, #0]
 8003914:	60c4      	str	r4, [r0, #12]
 8003916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	b151      	cbz	r1, 8003932 <_dtoa_r+0x52>
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	2301      	movs	r3, #1
 8003920:	4093      	lsls	r3, r2
 8003922:	604a      	str	r2, [r1, #4]
 8003924:	608b      	str	r3, [r1, #8]
 8003926:	4628      	mov	r0, r5
 8003928:	f000 fe22 	bl	8004570 <_Bfree>
 800392c:	2200      	movs	r2, #0
 800392e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	1e3b      	subs	r3, r7, #0
 8003934:	bfaf      	iteee	ge
 8003936:	2300      	movge	r3, #0
 8003938:	2201      	movlt	r2, #1
 800393a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800393e:	9305      	strlt	r3, [sp, #20]
 8003940:	bfa8      	it	ge
 8003942:	f8c8 3000 	strge.w	r3, [r8]
 8003946:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800394a:	4b9f      	ldr	r3, [pc, #636]	; (8003bc8 <_dtoa_r+0x2e8>)
 800394c:	bfb8      	it	lt
 800394e:	f8c8 2000 	strlt.w	r2, [r8]
 8003952:	ea33 0309 	bics.w	r3, r3, r9
 8003956:	d119      	bne.n	800398c <_dtoa_r+0xac>
 8003958:	f242 730f 	movw	r3, #9999	; 0x270f
 800395c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003964:	4333      	orrs	r3, r6
 8003966:	f000 8580 	beq.w	800446a <_dtoa_r+0xb8a>
 800396a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800396c:	b953      	cbnz	r3, 8003984 <_dtoa_r+0xa4>
 800396e:	4b97      	ldr	r3, [pc, #604]	; (8003bcc <_dtoa_r+0x2ec>)
 8003970:	e022      	b.n	80039b8 <_dtoa_r+0xd8>
 8003972:	4b97      	ldr	r3, [pc, #604]	; (8003bd0 <_dtoa_r+0x2f0>)
 8003974:	9308      	str	r3, [sp, #32]
 8003976:	3308      	adds	r3, #8
 8003978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	9808      	ldr	r0, [sp, #32]
 800397e:	b019      	add	sp, #100	; 0x64
 8003980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003984:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <_dtoa_r+0x2ec>)
 8003986:	9308      	str	r3, [sp, #32]
 8003988:	3303      	adds	r3, #3
 800398a:	e7f5      	b.n	8003978 <_dtoa_r+0x98>
 800398c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003990:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003998:	2200      	movs	r2, #0
 800399a:	2300      	movs	r3, #0
 800399c:	f7fd f804 	bl	80009a8 <__aeabi_dcmpeq>
 80039a0:	4680      	mov	r8, r0
 80039a2:	b158      	cbz	r0, 80039bc <_dtoa_r+0xdc>
 80039a4:	2301      	movs	r3, #1
 80039a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8559 	beq.w	8004464 <_dtoa_r+0xb84>
 80039b2:	4888      	ldr	r0, [pc, #544]	; (8003bd4 <_dtoa_r+0x2f4>)
 80039b4:	6018      	str	r0, [r3, #0]
 80039b6:	1e43      	subs	r3, r0, #1
 80039b8:	9308      	str	r3, [sp, #32]
 80039ba:	e7df      	b.n	800397c <_dtoa_r+0x9c>
 80039bc:	ab16      	add	r3, sp, #88	; 0x58
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	ab17      	add	r3, sp, #92	; 0x5c
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4628      	mov	r0, r5
 80039c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80039ca:	f001 f8b7 	bl	8004b3c <__d2b>
 80039ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80039d2:	4682      	mov	sl, r0
 80039d4:	2c00      	cmp	r4, #0
 80039d6:	d07e      	beq.n	8003ad6 <_dtoa_r+0x1f6>
 80039d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80039e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80039ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80039ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80039f2:	2200      	movs	r2, #0
 80039f4:	4b78      	ldr	r3, [pc, #480]	; (8003bd8 <_dtoa_r+0x2f8>)
 80039f6:	f7fc fbb7 	bl	8000168 <__aeabi_dsub>
 80039fa:	a36b      	add	r3, pc, #428	; (adr r3, 8003ba8 <_dtoa_r+0x2c8>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fd6a 	bl	80004d8 <__aeabi_dmul>
 8003a04:	a36a      	add	r3, pc, #424	; (adr r3, 8003bb0 <_dtoa_r+0x2d0>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fbaf 	bl	800016c <__adddf3>
 8003a0e:	4606      	mov	r6, r0
 8003a10:	4620      	mov	r0, r4
 8003a12:	460f      	mov	r7, r1
 8003a14:	f7fc fcf6 	bl	8000404 <__aeabi_i2d>
 8003a18:	a367      	add	r3, pc, #412	; (adr r3, 8003bb8 <_dtoa_r+0x2d8>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fd5b 	bl	80004d8 <__aeabi_dmul>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4630      	mov	r0, r6
 8003a28:	4639      	mov	r1, r7
 8003a2a:	f7fc fb9f 	bl	800016c <__adddf3>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	460f      	mov	r7, r1
 8003a32:	f7fd f801 	bl	8000a38 <__aeabi_d2iz>
 8003a36:	2200      	movs	r2, #0
 8003a38:	4681      	mov	r9, r0
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	4639      	mov	r1, r7
 8003a40:	f7fc ffbc 	bl	80009bc <__aeabi_dcmplt>
 8003a44:	b148      	cbz	r0, 8003a5a <_dtoa_r+0x17a>
 8003a46:	4648      	mov	r0, r9
 8003a48:	f7fc fcdc 	bl	8000404 <__aeabi_i2d>
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	463b      	mov	r3, r7
 8003a50:	f7fc ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8003a54:	b908      	cbnz	r0, 8003a5a <_dtoa_r+0x17a>
 8003a56:	f109 39ff 	add.w	r9, r9, #4294967295
 8003a5a:	f1b9 0f16 	cmp.w	r9, #22
 8003a5e:	d857      	bhi.n	8003b10 <_dtoa_r+0x230>
 8003a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a64:	4b5d      	ldr	r3, [pc, #372]	; (8003bdc <_dtoa_r+0x2fc>)
 8003a66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc ffa5 	bl	80009bc <__aeabi_dcmplt>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d04e      	beq.n	8003b14 <_dtoa_r+0x234>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f109 39ff 	add.w	r9, r9, #4294967295
 8003a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a80:	1b1c      	subs	r4, r3, r4
 8003a82:	1e63      	subs	r3, r4, #1
 8003a84:	9309      	str	r3, [sp, #36]	; 0x24
 8003a86:	bf49      	itett	mi
 8003a88:	f1c4 0301 	rsbmi	r3, r4, #1
 8003a8c:	2300      	movpl	r3, #0
 8003a8e:	9306      	strmi	r3, [sp, #24]
 8003a90:	2300      	movmi	r3, #0
 8003a92:	bf54      	ite	pl
 8003a94:	9306      	strpl	r3, [sp, #24]
 8003a96:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003a98:	f1b9 0f00 	cmp.w	r9, #0
 8003a9c:	db3c      	blt.n	8003b18 <_dtoa_r+0x238>
 8003a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003aa4:	444b      	add	r3, r9
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8003aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d86c      	bhi.n	8003b8c <_dtoa_r+0x2ac>
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	bfc4      	itt	gt
 8003ab6:	3b04      	subgt	r3, #4
 8003ab8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003aba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003abc:	bfc8      	it	gt
 8003abe:	2400      	movgt	r4, #0
 8003ac0:	f1a3 0302 	sub.w	r3, r3, #2
 8003ac4:	bfd8      	it	le
 8003ac6:	2401      	movle	r4, #1
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	f200 808b 	bhi.w	8003be4 <_dtoa_r+0x304>
 8003ace:	e8df f003 	tbb	[pc, r3]
 8003ad2:	4f2d      	.short	0x4f2d
 8003ad4:	5b4d      	.short	0x5b4d
 8003ad6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ada:	441c      	add	r4, r3
 8003adc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	bfc3      	ittte	gt
 8003ae4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ae8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003aec:	fa09 f303 	lslgt.w	r3, r9, r3
 8003af0:	f1c3 0320 	rsble	r3, r3, #32
 8003af4:	bfc6      	itte	gt
 8003af6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003afa:	4318      	orrgt	r0, r3
 8003afc:	fa06 f003 	lslle.w	r0, r6, r3
 8003b00:	f7fc fc70 	bl	80003e4 <__aeabi_ui2d>
 8003b04:	2301      	movs	r3, #1
 8003b06:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003b0a:	3c01      	subs	r4, #1
 8003b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b0e:	e770      	b.n	80039f2 <_dtoa_r+0x112>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e7b3      	b.n	8003a7c <_dtoa_r+0x19c>
 8003b14:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b16:	e7b2      	b.n	8003a7e <_dtoa_r+0x19e>
 8003b18:	9b06      	ldr	r3, [sp, #24]
 8003b1a:	eba3 0309 	sub.w	r3, r3, r9
 8003b1e:	9306      	str	r3, [sp, #24]
 8003b20:	f1c9 0300 	rsb	r3, r9, #0
 8003b24:	930a      	str	r3, [sp, #40]	; 0x28
 8003b26:	2300      	movs	r3, #0
 8003b28:	930e      	str	r3, [sp, #56]	; 0x38
 8003b2a:	e7bf      	b.n	8003aac <_dtoa_r+0x1cc>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	dc59      	bgt.n	8003bea <_dtoa_r+0x30a>
 8003b36:	f04f 0b01 	mov.w	fp, #1
 8003b3a:	465b      	mov	r3, fp
 8003b3c:	f8cd b008 	str.w	fp, [sp, #8]
 8003b40:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003b44:	2200      	movs	r2, #0
 8003b46:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003b48:	6042      	str	r2, [r0, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	f102 0614 	add.w	r6, r2, #20
 8003b50:	429e      	cmp	r6, r3
 8003b52:	6841      	ldr	r1, [r0, #4]
 8003b54:	d94f      	bls.n	8003bf6 <_dtoa_r+0x316>
 8003b56:	4628      	mov	r0, r5
 8003b58:	f000 fcca 	bl	80044f0 <_Balloc>
 8003b5c:	9008      	str	r0, [sp, #32]
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d14d      	bne.n	8003bfe <_dtoa_r+0x31e>
 8003b62:	4602      	mov	r2, r0
 8003b64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <_dtoa_r+0x300>)
 8003b6a:	e6cd      	b.n	8003908 <_dtoa_r+0x28>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e7de      	b.n	8003b2e <_dtoa_r+0x24e>
 8003b70:	2300      	movs	r3, #0
 8003b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b76:	eb09 0b03 	add.w	fp, r9, r3
 8003b7a:	f10b 0301 	add.w	r3, fp, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	9302      	str	r3, [sp, #8]
 8003b82:	bfb8      	it	lt
 8003b84:	2301      	movlt	r3, #1
 8003b86:	e7dd      	b.n	8003b44 <_dtoa_r+0x264>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e7f2      	b.n	8003b72 <_dtoa_r+0x292>
 8003b8c:	2401      	movs	r4, #1
 8003b8e:	2300      	movs	r3, #0
 8003b90:	940b      	str	r4, [sp, #44]	; 0x2c
 8003b92:	9322      	str	r3, [sp, #136]	; 0x88
 8003b94:	f04f 3bff 	mov.w	fp, #4294967295
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2312      	movs	r3, #18
 8003b9c:	f8cd b008 	str.w	fp, [sp, #8]
 8003ba0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003ba2:	e7cf      	b.n	8003b44 <_dtoa_r+0x264>
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	636f4361 	.word	0x636f4361
 8003bac:	3fd287a7 	.word	0x3fd287a7
 8003bb0:	8b60c8b3 	.word	0x8b60c8b3
 8003bb4:	3fc68a28 	.word	0x3fc68a28
 8003bb8:	509f79fb 	.word	0x509f79fb
 8003bbc:	3fd34413 	.word	0x3fd34413
 8003bc0:	08005e55 	.word	0x08005e55
 8003bc4:	08005e6c 	.word	0x08005e6c
 8003bc8:	7ff00000 	.word	0x7ff00000
 8003bcc:	08005e51 	.word	0x08005e51
 8003bd0:	08005e48 	.word	0x08005e48
 8003bd4:	08005e25 	.word	0x08005e25
 8003bd8:	3ff80000 	.word	0x3ff80000
 8003bdc:	08005f68 	.word	0x08005f68
 8003be0:	08005ecb 	.word	0x08005ecb
 8003be4:	2301      	movs	r3, #1
 8003be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003be8:	e7d4      	b.n	8003b94 <_dtoa_r+0x2b4>
 8003bea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003bee:	465b      	mov	r3, fp
 8003bf0:	f8cd b008 	str.w	fp, [sp, #8]
 8003bf4:	e7a6      	b.n	8003b44 <_dtoa_r+0x264>
 8003bf6:	3101      	adds	r1, #1
 8003bf8:	6041      	str	r1, [r0, #4]
 8003bfa:	0052      	lsls	r2, r2, #1
 8003bfc:	e7a6      	b.n	8003b4c <_dtoa_r+0x26c>
 8003bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c00:	9a08      	ldr	r2, [sp, #32]
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	9b02      	ldr	r3, [sp, #8]
 8003c06:	2b0e      	cmp	r3, #14
 8003c08:	f200 80a8 	bhi.w	8003d5c <_dtoa_r+0x47c>
 8003c0c:	2c00      	cmp	r4, #0
 8003c0e:	f000 80a5 	beq.w	8003d5c <_dtoa_r+0x47c>
 8003c12:	f1b9 0f00 	cmp.w	r9, #0
 8003c16:	dd34      	ble.n	8003c82 <_dtoa_r+0x3a2>
 8003c18:	4a9a      	ldr	r2, [pc, #616]	; (8003e84 <_dtoa_r+0x5a4>)
 8003c1a:	f009 030f 	and.w	r3, r9, #15
 8003c1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c22:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003c26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003c2e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003c32:	d016      	beq.n	8003c62 <_dtoa_r+0x382>
 8003c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c38:	4b93      	ldr	r3, [pc, #588]	; (8003e88 <_dtoa_r+0x5a8>)
 8003c3a:	2703      	movs	r7, #3
 8003c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c40:	f7fc fd74 	bl	800072c <__aeabi_ddiv>
 8003c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c48:	f004 040f 	and.w	r4, r4, #15
 8003c4c:	4e8e      	ldr	r6, [pc, #568]	; (8003e88 <_dtoa_r+0x5a8>)
 8003c4e:	b954      	cbnz	r4, 8003c66 <_dtoa_r+0x386>
 8003c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c58:	f7fc fd68 	bl	800072c <__aeabi_ddiv>
 8003c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c60:	e029      	b.n	8003cb6 <_dtoa_r+0x3d6>
 8003c62:	2702      	movs	r7, #2
 8003c64:	e7f2      	b.n	8003c4c <_dtoa_r+0x36c>
 8003c66:	07e1      	lsls	r1, r4, #31
 8003c68:	d508      	bpl.n	8003c7c <_dtoa_r+0x39c>
 8003c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c72:	f7fc fc31 	bl	80004d8 <__aeabi_dmul>
 8003c76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c7a:	3701      	adds	r7, #1
 8003c7c:	1064      	asrs	r4, r4, #1
 8003c7e:	3608      	adds	r6, #8
 8003c80:	e7e5      	b.n	8003c4e <_dtoa_r+0x36e>
 8003c82:	f000 80a5 	beq.w	8003dd0 <_dtoa_r+0x4f0>
 8003c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c8a:	f1c9 0400 	rsb	r4, r9, #0
 8003c8e:	4b7d      	ldr	r3, [pc, #500]	; (8003e84 <_dtoa_r+0x5a4>)
 8003c90:	f004 020f 	and.w	r2, r4, #15
 8003c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f7fc fc1c 	bl	80004d8 <__aeabi_dmul>
 8003ca0:	2702      	movs	r7, #2
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ca8:	4e77      	ldr	r6, [pc, #476]	; (8003e88 <_dtoa_r+0x5a8>)
 8003caa:	1124      	asrs	r4, r4, #4
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	f040 8084 	bne.w	8003dba <_dtoa_r+0x4da>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d2      	bne.n	8003c5c <_dtoa_r+0x37c>
 8003cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 808b 	beq.w	8003dd4 <_dtoa_r+0x4f4>
 8003cbe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003cc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003cc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <_dtoa_r+0x5ac>)
 8003cce:	f7fc fe75 	bl	80009bc <__aeabi_dcmplt>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d07e      	beq.n	8003dd4 <_dtoa_r+0x4f4>
 8003cd6:	9b02      	ldr	r3, [sp, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d07b      	beq.n	8003dd4 <_dtoa_r+0x4f4>
 8003cdc:	f1bb 0f00 	cmp.w	fp, #0
 8003ce0:	dd38      	ble.n	8003d54 <_dtoa_r+0x474>
 8003ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <_dtoa_r+0x5b0>)
 8003cea:	f7fc fbf5 	bl	80004d8 <__aeabi_dmul>
 8003cee:	465c      	mov	r4, fp
 8003cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003cf4:	f109 38ff 	add.w	r8, r9, #4294967295
 8003cf8:	3701      	adds	r7, #1
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	f7fc fb82 	bl	8000404 <__aeabi_i2d>
 8003d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d04:	f7fc fbe8 	bl	80004d8 <__aeabi_dmul>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4b62      	ldr	r3, [pc, #392]	; (8003e94 <_dtoa_r+0x5b4>)
 8003d0c:	f7fc fa2e 	bl	800016c <__adddf3>
 8003d10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003d14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d18:	9611      	str	r6, [sp, #68]	; 0x44
 8003d1a:	2c00      	cmp	r4, #0
 8003d1c:	d15d      	bne.n	8003dda <_dtoa_r+0x4fa>
 8003d1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d22:	2200      	movs	r2, #0
 8003d24:	4b5c      	ldr	r3, [pc, #368]	; (8003e98 <_dtoa_r+0x5b8>)
 8003d26:	f7fc fa1f 	bl	8000168 <__aeabi_dsub>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d32:	4633      	mov	r3, r6
 8003d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d36:	f7fc fe5f 	bl	80009f8 <__aeabi_dcmpgt>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	f040 829e 	bne.w	800427c <_dtoa_r+0x99c>
 8003d40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003d4a:	f7fc fe37 	bl	80009bc <__aeabi_dcmplt>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	f040 8292 	bne.w	8004278 <_dtoa_r+0x998>
 8003d54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003d58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f2c0 8153 	blt.w	800400a <_dtoa_r+0x72a>
 8003d64:	f1b9 0f0e 	cmp.w	r9, #14
 8003d68:	f300 814f 	bgt.w	800400a <_dtoa_r+0x72a>
 8003d6c:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <_dtoa_r+0x5a4>)
 8003d6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003d72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f280 80db 	bge.w	8003f38 <_dtoa_r+0x658>
 8003d82:	9b02      	ldr	r3, [sp, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f300 80d7 	bgt.w	8003f38 <_dtoa_r+0x658>
 8003d8a:	f040 8274 	bne.w	8004276 <_dtoa_r+0x996>
 8003d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d92:	2200      	movs	r2, #0
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <_dtoa_r+0x5b8>)
 8003d96:	f7fc fb9f 	bl	80004d8 <__aeabi_dmul>
 8003d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d9e:	f7fc fe21 	bl	80009e4 <__aeabi_dcmpge>
 8003da2:	9c02      	ldr	r4, [sp, #8]
 8003da4:	4626      	mov	r6, r4
 8003da6:	2800      	cmp	r0, #0
 8003da8:	f040 824a 	bne.w	8004240 <_dtoa_r+0x960>
 8003dac:	2331      	movs	r3, #49	; 0x31
 8003dae:	9f08      	ldr	r7, [sp, #32]
 8003db0:	f109 0901 	add.w	r9, r9, #1
 8003db4:	f807 3b01 	strb.w	r3, [r7], #1
 8003db8:	e246      	b.n	8004248 <_dtoa_r+0x968>
 8003dba:	07e2      	lsls	r2, r4, #31
 8003dbc:	d505      	bpl.n	8003dca <_dtoa_r+0x4ea>
 8003dbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003dc2:	f7fc fb89 	bl	80004d8 <__aeabi_dmul>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	3701      	adds	r7, #1
 8003dca:	1064      	asrs	r4, r4, #1
 8003dcc:	3608      	adds	r6, #8
 8003dce:	e76d      	b.n	8003cac <_dtoa_r+0x3cc>
 8003dd0:	2702      	movs	r7, #2
 8003dd2:	e770      	b.n	8003cb6 <_dtoa_r+0x3d6>
 8003dd4:	46c8      	mov	r8, r9
 8003dd6:	9c02      	ldr	r4, [sp, #8]
 8003dd8:	e78f      	b.n	8003cfa <_dtoa_r+0x41a>
 8003dda:	9908      	ldr	r1, [sp, #32]
 8003ddc:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <_dtoa_r+0x5a4>)
 8003dde:	4421      	add	r1, r4
 8003de0:	9112      	str	r1, [sp, #72]	; 0x48
 8003de2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003de8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003dec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d055      	beq.n	8003ea0 <_dtoa_r+0x5c0>
 8003df4:	2000      	movs	r0, #0
 8003df6:	4929      	ldr	r1, [pc, #164]	; (8003e9c <_dtoa_r+0x5bc>)
 8003df8:	f7fc fc98 	bl	800072c <__aeabi_ddiv>
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4632      	mov	r2, r6
 8003e00:	f7fc f9b2 	bl	8000168 <__aeabi_dsub>
 8003e04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e08:	9f08      	ldr	r7, [sp, #32]
 8003e0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e0e:	f7fc fe13 	bl	8000a38 <__aeabi_d2iz>
 8003e12:	4604      	mov	r4, r0
 8003e14:	f7fc faf6 	bl	8000404 <__aeabi_i2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e20:	f7fc f9a2 	bl	8000168 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	3430      	adds	r4, #48	; 0x30
 8003e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e32:	f807 4b01 	strb.w	r4, [r7], #1
 8003e36:	f7fc fdc1 	bl	80009bc <__aeabi_dcmplt>
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d174      	bne.n	8003f28 <_dtoa_r+0x648>
 8003e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e42:	2000      	movs	r0, #0
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <_dtoa_r+0x5ac>)
 8003e46:	f7fc f98f 	bl	8000168 <__aeabi_dsub>
 8003e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e4e:	f7fc fdb5 	bl	80009bc <__aeabi_dcmplt>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f040 80b6 	bne.w	8003fc4 <_dtoa_r+0x6e4>
 8003e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e5a:	429f      	cmp	r7, r3
 8003e5c:	f43f af7a 	beq.w	8003d54 <_dtoa_r+0x474>
 8003e60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e64:	2200      	movs	r2, #0
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <_dtoa_r+0x5b0>)
 8003e68:	f7fc fb36 	bl	80004d8 <__aeabi_dmul>
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <_dtoa_r+0x5b0>)
 8003e78:	f7fc fb2e 	bl	80004d8 <__aeabi_dmul>
 8003e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e80:	e7c3      	b.n	8003e0a <_dtoa_r+0x52a>
 8003e82:	bf00      	nop
 8003e84:	08005f68 	.word	0x08005f68
 8003e88:	08005f40 	.word	0x08005f40
 8003e8c:	3ff00000 	.word	0x3ff00000
 8003e90:	40240000 	.word	0x40240000
 8003e94:	401c0000 	.word	0x401c0000
 8003e98:	40140000 	.word	0x40140000
 8003e9c:	3fe00000 	.word	0x3fe00000
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	f7fc fb18 	bl	80004d8 <__aeabi_dmul>
 8003ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003eaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003eae:	9c08      	ldr	r4, [sp, #32]
 8003eb0:	9314      	str	r3, [sp, #80]	; 0x50
 8003eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eb6:	f7fc fdbf 	bl	8000a38 <__aeabi_d2iz>
 8003eba:	9015      	str	r0, [sp, #84]	; 0x54
 8003ebc:	f7fc faa2 	bl	8000404 <__aeabi_i2d>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ec8:	f7fc f94e 	bl	8000168 <__aeabi_dsub>
 8003ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ece:	4606      	mov	r6, r0
 8003ed0:	3330      	adds	r3, #48	; 0x30
 8003ed2:	f804 3b01 	strb.w	r3, [r4], #1
 8003ed6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ed8:	460f      	mov	r7, r1
 8003eda:	429c      	cmp	r4, r3
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	d124      	bne.n	8003f2c <_dtoa_r+0x64c>
 8003ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ee6:	4bb3      	ldr	r3, [pc, #716]	; (80041b4 <_dtoa_r+0x8d4>)
 8003ee8:	f7fc f940 	bl	800016c <__adddf3>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	f7fc fd80 	bl	80009f8 <__aeabi_dcmpgt>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d162      	bne.n	8003fc2 <_dtoa_r+0x6e2>
 8003efc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f00:	2000      	movs	r0, #0
 8003f02:	49ac      	ldr	r1, [pc, #688]	; (80041b4 <_dtoa_r+0x8d4>)
 8003f04:	f7fc f930 	bl	8000168 <__aeabi_dsub>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	4639      	mov	r1, r7
 8003f10:	f7fc fd54 	bl	80009bc <__aeabi_dcmplt>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f43f af1d 	beq.w	8003d54 <_dtoa_r+0x474>
 8003f1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f1c:	1e7b      	subs	r3, r7, #1
 8003f1e:	9314      	str	r3, [sp, #80]	; 0x50
 8003f20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d0f8      	beq.n	8003f1a <_dtoa_r+0x63a>
 8003f28:	46c1      	mov	r9, r8
 8003f2a:	e03a      	b.n	8003fa2 <_dtoa_r+0x6c2>
 8003f2c:	4ba2      	ldr	r3, [pc, #648]	; (80041b8 <_dtoa_r+0x8d8>)
 8003f2e:	f7fc fad3 	bl	80004d8 <__aeabi_dmul>
 8003f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f36:	e7bc      	b.n	8003eb2 <_dtoa_r+0x5d2>
 8003f38:	9f08      	ldr	r7, [sp, #32]
 8003f3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f42:	f7fc fbf3 	bl	800072c <__aeabi_ddiv>
 8003f46:	f7fc fd77 	bl	8000a38 <__aeabi_d2iz>
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	f7fc fa5a 	bl	8000404 <__aeabi_i2d>
 8003f50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f54:	f7fc fac0 	bl	80004d8 <__aeabi_dmul>
 8003f58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4602      	mov	r2, r0
 8003f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f64:	f7fc f900 	bl	8000168 <__aeabi_dsub>
 8003f68:	f807 6b01 	strb.w	r6, [r7], #1
 8003f6c:	9e08      	ldr	r6, [sp, #32]
 8003f6e:	9b02      	ldr	r3, [sp, #8]
 8003f70:	1bbe      	subs	r6, r7, r6
 8003f72:	42b3      	cmp	r3, r6
 8003f74:	d13a      	bne.n	8003fec <_dtoa_r+0x70c>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	f7fc f8f7 	bl	800016c <__adddf3>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f8a:	f7fc fd35 	bl	80009f8 <__aeabi_dcmpgt>
 8003f8e:	bb58      	cbnz	r0, 8003fe8 <_dtoa_r+0x708>
 8003f90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f98:	f7fc fd06 	bl	80009a8 <__aeabi_dcmpeq>
 8003f9c:	b108      	cbz	r0, 8003fa2 <_dtoa_r+0x6c2>
 8003f9e:	07e1      	lsls	r1, r4, #31
 8003fa0:	d422      	bmi.n	8003fe8 <_dtoa_r+0x708>
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	f000 fae3 	bl	8004570 <_Bfree>
 8003faa:	2300      	movs	r3, #0
 8003fac:	703b      	strb	r3, [r7, #0]
 8003fae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003fb0:	f109 0001 	add.w	r0, r9, #1
 8003fb4:	6018      	str	r0, [r3, #0]
 8003fb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f43f acdf 	beq.w	800397c <_dtoa_r+0x9c>
 8003fbe:	601f      	str	r7, [r3, #0]
 8003fc0:	e4dc      	b.n	800397c <_dtoa_r+0x9c>
 8003fc2:	4627      	mov	r7, r4
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fcc:	2a39      	cmp	r2, #57	; 0x39
 8003fce:	d107      	bne.n	8003fe0 <_dtoa_r+0x700>
 8003fd0:	9a08      	ldr	r2, [sp, #32]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d1f7      	bne.n	8003fc6 <_dtoa_r+0x6e6>
 8003fd6:	2230      	movs	r2, #48	; 0x30
 8003fd8:	9908      	ldr	r1, [sp, #32]
 8003fda:	f108 0801 	add.w	r8, r8, #1
 8003fde:	700a      	strb	r2, [r1, #0]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	3201      	adds	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e79f      	b.n	8003f28 <_dtoa_r+0x648>
 8003fe8:	46c8      	mov	r8, r9
 8003fea:	e7eb      	b.n	8003fc4 <_dtoa_r+0x6e4>
 8003fec:	2200      	movs	r2, #0
 8003fee:	4b72      	ldr	r3, [pc, #456]	; (80041b8 <_dtoa_r+0x8d8>)
 8003ff0:	f7fc fa72 	bl	80004d8 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2300      	movs	r3, #0
 8004000:	f7fc fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8004004:	2800      	cmp	r0, #0
 8004006:	d098      	beq.n	8003f3a <_dtoa_r+0x65a>
 8004008:	e7cb      	b.n	8003fa2 <_dtoa_r+0x6c2>
 800400a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800400c:	2a00      	cmp	r2, #0
 800400e:	f000 80cd 	beq.w	80041ac <_dtoa_r+0x8cc>
 8004012:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004014:	2a01      	cmp	r2, #1
 8004016:	f300 80af 	bgt.w	8004178 <_dtoa_r+0x898>
 800401a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800401c:	2a00      	cmp	r2, #0
 800401e:	f000 80a7 	beq.w	8004170 <_dtoa_r+0x890>
 8004022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004026:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004028:	9f06      	ldr	r7, [sp, #24]
 800402a:	9a06      	ldr	r2, [sp, #24]
 800402c:	2101      	movs	r1, #1
 800402e:	441a      	add	r2, r3
 8004030:	9206      	str	r2, [sp, #24]
 8004032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004034:	4628      	mov	r0, r5
 8004036:	441a      	add	r2, r3
 8004038:	9209      	str	r2, [sp, #36]	; 0x24
 800403a:	f000 fb53 	bl	80046e4 <__i2b>
 800403e:	4606      	mov	r6, r0
 8004040:	2f00      	cmp	r7, #0
 8004042:	dd0c      	ble.n	800405e <_dtoa_r+0x77e>
 8004044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	dd09      	ble.n	800405e <_dtoa_r+0x77e>
 800404a:	42bb      	cmp	r3, r7
 800404c:	bfa8      	it	ge
 800404e:	463b      	movge	r3, r7
 8004050:	9a06      	ldr	r2, [sp, #24]
 8004052:	1aff      	subs	r7, r7, r3
 8004054:	1ad2      	subs	r2, r2, r3
 8004056:	9206      	str	r2, [sp, #24]
 8004058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	9309      	str	r3, [sp, #36]	; 0x24
 800405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004060:	b1f3      	cbz	r3, 80040a0 <_dtoa_r+0x7c0>
 8004062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a9 	beq.w	80041bc <_dtoa_r+0x8dc>
 800406a:	2c00      	cmp	r4, #0
 800406c:	dd10      	ble.n	8004090 <_dtoa_r+0x7b0>
 800406e:	4631      	mov	r1, r6
 8004070:	4622      	mov	r2, r4
 8004072:	4628      	mov	r0, r5
 8004074:	f000 fbf0 	bl	8004858 <__pow5mult>
 8004078:	4652      	mov	r2, sl
 800407a:	4601      	mov	r1, r0
 800407c:	4606      	mov	r6, r0
 800407e:	4628      	mov	r0, r5
 8004080:	f000 fb46 	bl	8004710 <__multiply>
 8004084:	4680      	mov	r8, r0
 8004086:	4651      	mov	r1, sl
 8004088:	4628      	mov	r0, r5
 800408a:	f000 fa71 	bl	8004570 <_Bfree>
 800408e:	46c2      	mov	sl, r8
 8004090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004092:	1b1a      	subs	r2, r3, r4
 8004094:	d004      	beq.n	80040a0 <_dtoa_r+0x7c0>
 8004096:	4651      	mov	r1, sl
 8004098:	4628      	mov	r0, r5
 800409a:	f000 fbdd 	bl	8004858 <__pow5mult>
 800409e:	4682      	mov	sl, r0
 80040a0:	2101      	movs	r1, #1
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 fb1e 	bl	80046e4 <__i2b>
 80040a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040aa:	4604      	mov	r4, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f340 8087 	ble.w	80041c0 <_dtoa_r+0x8e0>
 80040b2:	461a      	mov	r2, r3
 80040b4:	4601      	mov	r1, r0
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 fbce 	bl	8004858 <__pow5mult>
 80040bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040be:	4604      	mov	r4, r0
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	f340 8080 	ble.w	80041c6 <_dtoa_r+0x8e6>
 80040c6:	f04f 0800 	mov.w	r8, #0
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80040d0:	6918      	ldr	r0, [r3, #16]
 80040d2:	f000 fab9 	bl	8004648 <__hi0bits>
 80040d6:	f1c0 0020 	rsb	r0, r0, #32
 80040da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040dc:	4418      	add	r0, r3
 80040de:	f010 001f 	ands.w	r0, r0, #31
 80040e2:	f000 8092 	beq.w	800420a <_dtoa_r+0x92a>
 80040e6:	f1c0 0320 	rsb	r3, r0, #32
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	f340 808a 	ble.w	8004204 <_dtoa_r+0x924>
 80040f0:	f1c0 001c 	rsb	r0, r0, #28
 80040f4:	9b06      	ldr	r3, [sp, #24]
 80040f6:	4407      	add	r7, r0
 80040f8:	4403      	add	r3, r0
 80040fa:	9306      	str	r3, [sp, #24]
 80040fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fe:	4403      	add	r3, r0
 8004100:	9309      	str	r3, [sp, #36]	; 0x24
 8004102:	9b06      	ldr	r3, [sp, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dd05      	ble.n	8004114 <_dtoa_r+0x834>
 8004108:	4651      	mov	r1, sl
 800410a:	461a      	mov	r2, r3
 800410c:	4628      	mov	r0, r5
 800410e:	f000 fbfd 	bl	800490c <__lshift>
 8004112:	4682      	mov	sl, r0
 8004114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	dd05      	ble.n	8004126 <_dtoa_r+0x846>
 800411a:	4621      	mov	r1, r4
 800411c:	461a      	mov	r2, r3
 800411e:	4628      	mov	r0, r5
 8004120:	f000 fbf4 	bl	800490c <__lshift>
 8004124:	4604      	mov	r4, r0
 8004126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d070      	beq.n	800420e <_dtoa_r+0x92e>
 800412c:	4621      	mov	r1, r4
 800412e:	4650      	mov	r0, sl
 8004130:	f000 fc58 	bl	80049e4 <__mcmp>
 8004134:	2800      	cmp	r0, #0
 8004136:	da6a      	bge.n	800420e <_dtoa_r+0x92e>
 8004138:	2300      	movs	r3, #0
 800413a:	4651      	mov	r1, sl
 800413c:	220a      	movs	r2, #10
 800413e:	4628      	mov	r0, r5
 8004140:	f000 fa38 	bl	80045b4 <__multadd>
 8004144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004146:	4682      	mov	sl, r0
 8004148:	f109 39ff 	add.w	r9, r9, #4294967295
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8193 	beq.w	8004478 <_dtoa_r+0xb98>
 8004152:	4631      	mov	r1, r6
 8004154:	2300      	movs	r3, #0
 8004156:	220a      	movs	r2, #10
 8004158:	4628      	mov	r0, r5
 800415a:	f000 fa2b 	bl	80045b4 <__multadd>
 800415e:	f1bb 0f00 	cmp.w	fp, #0
 8004162:	4606      	mov	r6, r0
 8004164:	f300 8093 	bgt.w	800428e <_dtoa_r+0x9ae>
 8004168:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800416a:	2b02      	cmp	r3, #2
 800416c:	dc57      	bgt.n	800421e <_dtoa_r+0x93e>
 800416e:	e08e      	b.n	800428e <_dtoa_r+0x9ae>
 8004170:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004172:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004176:	e756      	b.n	8004026 <_dtoa_r+0x746>
 8004178:	9b02      	ldr	r3, [sp, #8]
 800417a:	1e5c      	subs	r4, r3, #1
 800417c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800417e:	42a3      	cmp	r3, r4
 8004180:	bfb7      	itett	lt
 8004182:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004184:	1b1c      	subge	r4, r3, r4
 8004186:	1ae2      	sublt	r2, r4, r3
 8004188:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800418a:	bfbe      	ittt	lt
 800418c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800418e:	189b      	addlt	r3, r3, r2
 8004190:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	bfb8      	it	lt
 8004196:	2400      	movlt	r4, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	bfbb      	ittet	lt
 800419c:	9b06      	ldrlt	r3, [sp, #24]
 800419e:	9a02      	ldrlt	r2, [sp, #8]
 80041a0:	9f06      	ldrge	r7, [sp, #24]
 80041a2:	1a9f      	sublt	r7, r3, r2
 80041a4:	bfac      	ite	ge
 80041a6:	9b02      	ldrge	r3, [sp, #8]
 80041a8:	2300      	movlt	r3, #0
 80041aa:	e73e      	b.n	800402a <_dtoa_r+0x74a>
 80041ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80041ae:	9f06      	ldr	r7, [sp, #24]
 80041b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80041b2:	e745      	b.n	8004040 <_dtoa_r+0x760>
 80041b4:	3fe00000 	.word	0x3fe00000
 80041b8:	40240000 	.word	0x40240000
 80041bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041be:	e76a      	b.n	8004096 <_dtoa_r+0x7b6>
 80041c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	dc19      	bgt.n	80041fa <_dtoa_r+0x91a>
 80041c6:	9b04      	ldr	r3, [sp, #16]
 80041c8:	b9bb      	cbnz	r3, 80041fa <_dtoa_r+0x91a>
 80041ca:	9b05      	ldr	r3, [sp, #20]
 80041cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d0:	b99b      	cbnz	r3, 80041fa <_dtoa_r+0x91a>
 80041d2:	9b05      	ldr	r3, [sp, #20]
 80041d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	0d1b      	lsrs	r3, r3, #20
 80041da:	051b      	lsls	r3, r3, #20
 80041dc:	b183      	cbz	r3, 8004200 <_dtoa_r+0x920>
 80041de:	f04f 0801 	mov.w	r8, #1
 80041e2:	9b06      	ldr	r3, [sp, #24]
 80041e4:	3301      	adds	r3, #1
 80041e6:	9306      	str	r3, [sp, #24]
 80041e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ea:	3301      	adds	r3, #1
 80041ec:	9309      	str	r3, [sp, #36]	; 0x24
 80041ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f47f af6a 	bne.w	80040ca <_dtoa_r+0x7ea>
 80041f6:	2001      	movs	r0, #1
 80041f8:	e76f      	b.n	80040da <_dtoa_r+0x7fa>
 80041fa:	f04f 0800 	mov.w	r8, #0
 80041fe:	e7f6      	b.n	80041ee <_dtoa_r+0x90e>
 8004200:	4698      	mov	r8, r3
 8004202:	e7f4      	b.n	80041ee <_dtoa_r+0x90e>
 8004204:	f43f af7d 	beq.w	8004102 <_dtoa_r+0x822>
 8004208:	4618      	mov	r0, r3
 800420a:	301c      	adds	r0, #28
 800420c:	e772      	b.n	80040f4 <_dtoa_r+0x814>
 800420e:	9b02      	ldr	r3, [sp, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	dc36      	bgt.n	8004282 <_dtoa_r+0x9a2>
 8004214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004216:	2b02      	cmp	r3, #2
 8004218:	dd33      	ble.n	8004282 <_dtoa_r+0x9a2>
 800421a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800421e:	f1bb 0f00 	cmp.w	fp, #0
 8004222:	d10d      	bne.n	8004240 <_dtoa_r+0x960>
 8004224:	4621      	mov	r1, r4
 8004226:	465b      	mov	r3, fp
 8004228:	2205      	movs	r2, #5
 800422a:	4628      	mov	r0, r5
 800422c:	f000 f9c2 	bl	80045b4 <__multadd>
 8004230:	4601      	mov	r1, r0
 8004232:	4604      	mov	r4, r0
 8004234:	4650      	mov	r0, sl
 8004236:	f000 fbd5 	bl	80049e4 <__mcmp>
 800423a:	2800      	cmp	r0, #0
 800423c:	f73f adb6 	bgt.w	8003dac <_dtoa_r+0x4cc>
 8004240:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004242:	9f08      	ldr	r7, [sp, #32]
 8004244:	ea6f 0903 	mvn.w	r9, r3
 8004248:	f04f 0800 	mov.w	r8, #0
 800424c:	4621      	mov	r1, r4
 800424e:	4628      	mov	r0, r5
 8004250:	f000 f98e 	bl	8004570 <_Bfree>
 8004254:	2e00      	cmp	r6, #0
 8004256:	f43f aea4 	beq.w	8003fa2 <_dtoa_r+0x6c2>
 800425a:	f1b8 0f00 	cmp.w	r8, #0
 800425e:	d005      	beq.n	800426c <_dtoa_r+0x98c>
 8004260:	45b0      	cmp	r8, r6
 8004262:	d003      	beq.n	800426c <_dtoa_r+0x98c>
 8004264:	4641      	mov	r1, r8
 8004266:	4628      	mov	r0, r5
 8004268:	f000 f982 	bl	8004570 <_Bfree>
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f97e 	bl	8004570 <_Bfree>
 8004274:	e695      	b.n	8003fa2 <_dtoa_r+0x6c2>
 8004276:	2400      	movs	r4, #0
 8004278:	4626      	mov	r6, r4
 800427a:	e7e1      	b.n	8004240 <_dtoa_r+0x960>
 800427c:	46c1      	mov	r9, r8
 800427e:	4626      	mov	r6, r4
 8004280:	e594      	b.n	8003dac <_dtoa_r+0x4cc>
 8004282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004284:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80fc 	beq.w	8004486 <_dtoa_r+0xba6>
 800428e:	2f00      	cmp	r7, #0
 8004290:	dd05      	ble.n	800429e <_dtoa_r+0x9be>
 8004292:	4631      	mov	r1, r6
 8004294:	463a      	mov	r2, r7
 8004296:	4628      	mov	r0, r5
 8004298:	f000 fb38 	bl	800490c <__lshift>
 800429c:	4606      	mov	r6, r0
 800429e:	f1b8 0f00 	cmp.w	r8, #0
 80042a2:	d05c      	beq.n	800435e <_dtoa_r+0xa7e>
 80042a4:	4628      	mov	r0, r5
 80042a6:	6871      	ldr	r1, [r6, #4]
 80042a8:	f000 f922 	bl	80044f0 <_Balloc>
 80042ac:	4607      	mov	r7, r0
 80042ae:	b928      	cbnz	r0, 80042bc <_dtoa_r+0x9dc>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80042b6:	4b7e      	ldr	r3, [pc, #504]	; (80044b0 <_dtoa_r+0xbd0>)
 80042b8:	f7ff bb26 	b.w	8003908 <_dtoa_r+0x28>
 80042bc:	6932      	ldr	r2, [r6, #16]
 80042be:	f106 010c 	add.w	r1, r6, #12
 80042c2:	3202      	adds	r2, #2
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	300c      	adds	r0, #12
 80042c8:	f7fe fde6 	bl	8002e98 <memcpy>
 80042cc:	2201      	movs	r2, #1
 80042ce:	4639      	mov	r1, r7
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 fb1b 	bl	800490c <__lshift>
 80042d6:	46b0      	mov	r8, r6
 80042d8:	4606      	mov	r6, r0
 80042da:	9b08      	ldr	r3, [sp, #32]
 80042dc:	3301      	adds	r3, #1
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	9b08      	ldr	r3, [sp, #32]
 80042e2:	445b      	add	r3, fp
 80042e4:	930a      	str	r3, [sp, #40]	; 0x28
 80042e6:	9b04      	ldr	r3, [sp, #16]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	9309      	str	r3, [sp, #36]	; 0x24
 80042ee:	9b02      	ldr	r3, [sp, #8]
 80042f0:	4621      	mov	r1, r4
 80042f2:	4650      	mov	r0, sl
 80042f4:	f103 3bff 	add.w	fp, r3, #4294967295
 80042f8:	f7ff fa64 	bl	80037c4 <quorem>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4641      	mov	r1, r8
 8004300:	3330      	adds	r3, #48	; 0x30
 8004302:	9004      	str	r0, [sp, #16]
 8004304:	4650      	mov	r0, sl
 8004306:	930b      	str	r3, [sp, #44]	; 0x2c
 8004308:	f000 fb6c 	bl	80049e4 <__mcmp>
 800430c:	4632      	mov	r2, r6
 800430e:	9006      	str	r0, [sp, #24]
 8004310:	4621      	mov	r1, r4
 8004312:	4628      	mov	r0, r5
 8004314:	f000 fb82 	bl	8004a1c <__mdiff>
 8004318:	68c2      	ldr	r2, [r0, #12]
 800431a:	4607      	mov	r7, r0
 800431c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800431e:	bb02      	cbnz	r2, 8004362 <_dtoa_r+0xa82>
 8004320:	4601      	mov	r1, r0
 8004322:	4650      	mov	r0, sl
 8004324:	f000 fb5e 	bl	80049e4 <__mcmp>
 8004328:	4602      	mov	r2, r0
 800432a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800432c:	4639      	mov	r1, r7
 800432e:	4628      	mov	r0, r5
 8004330:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004334:	f000 f91c 	bl	8004570 <_Bfree>
 8004338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800433a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800433c:	9f02      	ldr	r7, [sp, #8]
 800433e:	ea43 0102 	orr.w	r1, r3, r2
 8004342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004344:	430b      	orrs	r3, r1
 8004346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004348:	d10d      	bne.n	8004366 <_dtoa_r+0xa86>
 800434a:	2b39      	cmp	r3, #57	; 0x39
 800434c:	d027      	beq.n	800439e <_dtoa_r+0xabe>
 800434e:	9a06      	ldr	r2, [sp, #24]
 8004350:	2a00      	cmp	r2, #0
 8004352:	dd01      	ble.n	8004358 <_dtoa_r+0xa78>
 8004354:	9b04      	ldr	r3, [sp, #16]
 8004356:	3331      	adds	r3, #49	; 0x31
 8004358:	f88b 3000 	strb.w	r3, [fp]
 800435c:	e776      	b.n	800424c <_dtoa_r+0x96c>
 800435e:	4630      	mov	r0, r6
 8004360:	e7b9      	b.n	80042d6 <_dtoa_r+0x9f6>
 8004362:	2201      	movs	r2, #1
 8004364:	e7e2      	b.n	800432c <_dtoa_r+0xa4c>
 8004366:	9906      	ldr	r1, [sp, #24]
 8004368:	2900      	cmp	r1, #0
 800436a:	db04      	blt.n	8004376 <_dtoa_r+0xa96>
 800436c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800436e:	4301      	orrs	r1, r0
 8004370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004372:	4301      	orrs	r1, r0
 8004374:	d120      	bne.n	80043b8 <_dtoa_r+0xad8>
 8004376:	2a00      	cmp	r2, #0
 8004378:	ddee      	ble.n	8004358 <_dtoa_r+0xa78>
 800437a:	4651      	mov	r1, sl
 800437c:	2201      	movs	r2, #1
 800437e:	4628      	mov	r0, r5
 8004380:	9302      	str	r3, [sp, #8]
 8004382:	f000 fac3 	bl	800490c <__lshift>
 8004386:	4621      	mov	r1, r4
 8004388:	4682      	mov	sl, r0
 800438a:	f000 fb2b 	bl	80049e4 <__mcmp>
 800438e:	2800      	cmp	r0, #0
 8004390:	9b02      	ldr	r3, [sp, #8]
 8004392:	dc02      	bgt.n	800439a <_dtoa_r+0xaba>
 8004394:	d1e0      	bne.n	8004358 <_dtoa_r+0xa78>
 8004396:	07da      	lsls	r2, r3, #31
 8004398:	d5de      	bpl.n	8004358 <_dtoa_r+0xa78>
 800439a:	2b39      	cmp	r3, #57	; 0x39
 800439c:	d1da      	bne.n	8004354 <_dtoa_r+0xa74>
 800439e:	2339      	movs	r3, #57	; 0x39
 80043a0:	f88b 3000 	strb.w	r3, [fp]
 80043a4:	463b      	mov	r3, r7
 80043a6:	461f      	mov	r7, r3
 80043a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	2a39      	cmp	r2, #57	; 0x39
 80043b0:	d050      	beq.n	8004454 <_dtoa_r+0xb74>
 80043b2:	3201      	adds	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e749      	b.n	800424c <_dtoa_r+0x96c>
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	dd03      	ble.n	80043c4 <_dtoa_r+0xae4>
 80043bc:	2b39      	cmp	r3, #57	; 0x39
 80043be:	d0ee      	beq.n	800439e <_dtoa_r+0xabe>
 80043c0:	3301      	adds	r3, #1
 80043c2:	e7c9      	b.n	8004358 <_dtoa_r+0xa78>
 80043c4:	9a02      	ldr	r2, [sp, #8]
 80043c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043cc:	428a      	cmp	r2, r1
 80043ce:	d02a      	beq.n	8004426 <_dtoa_r+0xb46>
 80043d0:	4651      	mov	r1, sl
 80043d2:	2300      	movs	r3, #0
 80043d4:	220a      	movs	r2, #10
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 f8ec 	bl	80045b4 <__multadd>
 80043dc:	45b0      	cmp	r8, r6
 80043de:	4682      	mov	sl, r0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f04f 020a 	mov.w	r2, #10
 80043e8:	4641      	mov	r1, r8
 80043ea:	4628      	mov	r0, r5
 80043ec:	d107      	bne.n	80043fe <_dtoa_r+0xb1e>
 80043ee:	f000 f8e1 	bl	80045b4 <__multadd>
 80043f2:	4680      	mov	r8, r0
 80043f4:	4606      	mov	r6, r0
 80043f6:	9b02      	ldr	r3, [sp, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	9302      	str	r3, [sp, #8]
 80043fc:	e777      	b.n	80042ee <_dtoa_r+0xa0e>
 80043fe:	f000 f8d9 	bl	80045b4 <__multadd>
 8004402:	4631      	mov	r1, r6
 8004404:	4680      	mov	r8, r0
 8004406:	2300      	movs	r3, #0
 8004408:	220a      	movs	r2, #10
 800440a:	4628      	mov	r0, r5
 800440c:	f000 f8d2 	bl	80045b4 <__multadd>
 8004410:	4606      	mov	r6, r0
 8004412:	e7f0      	b.n	80043f6 <_dtoa_r+0xb16>
 8004414:	f1bb 0f00 	cmp.w	fp, #0
 8004418:	bfcc      	ite	gt
 800441a:	465f      	movgt	r7, fp
 800441c:	2701      	movle	r7, #1
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	9a08      	ldr	r2, [sp, #32]
 8004424:	4417      	add	r7, r2
 8004426:	4651      	mov	r1, sl
 8004428:	2201      	movs	r2, #1
 800442a:	4628      	mov	r0, r5
 800442c:	9302      	str	r3, [sp, #8]
 800442e:	f000 fa6d 	bl	800490c <__lshift>
 8004432:	4621      	mov	r1, r4
 8004434:	4682      	mov	sl, r0
 8004436:	f000 fad5 	bl	80049e4 <__mcmp>
 800443a:	2800      	cmp	r0, #0
 800443c:	dcb2      	bgt.n	80043a4 <_dtoa_r+0xac4>
 800443e:	d102      	bne.n	8004446 <_dtoa_r+0xb66>
 8004440:	9b02      	ldr	r3, [sp, #8]
 8004442:	07db      	lsls	r3, r3, #31
 8004444:	d4ae      	bmi.n	80043a4 <_dtoa_r+0xac4>
 8004446:	463b      	mov	r3, r7
 8004448:	461f      	mov	r7, r3
 800444a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800444e:	2a30      	cmp	r2, #48	; 0x30
 8004450:	d0fa      	beq.n	8004448 <_dtoa_r+0xb68>
 8004452:	e6fb      	b.n	800424c <_dtoa_r+0x96c>
 8004454:	9a08      	ldr	r2, [sp, #32]
 8004456:	429a      	cmp	r2, r3
 8004458:	d1a5      	bne.n	80043a6 <_dtoa_r+0xac6>
 800445a:	2331      	movs	r3, #49	; 0x31
 800445c:	f109 0901 	add.w	r9, r9, #1
 8004460:	7013      	strb	r3, [r2, #0]
 8004462:	e6f3      	b.n	800424c <_dtoa_r+0x96c>
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <_dtoa_r+0xbd4>)
 8004466:	f7ff baa7 	b.w	80039b8 <_dtoa_r+0xd8>
 800446a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f aa80 	bne.w	8003972 <_dtoa_r+0x92>
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <_dtoa_r+0xbd8>)
 8004474:	f7ff baa0 	b.w	80039b8 <_dtoa_r+0xd8>
 8004478:	f1bb 0f00 	cmp.w	fp, #0
 800447c:	dc03      	bgt.n	8004486 <_dtoa_r+0xba6>
 800447e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004480:	2b02      	cmp	r3, #2
 8004482:	f73f aecc 	bgt.w	800421e <_dtoa_r+0x93e>
 8004486:	9f08      	ldr	r7, [sp, #32]
 8004488:	4621      	mov	r1, r4
 800448a:	4650      	mov	r0, sl
 800448c:	f7ff f99a 	bl	80037c4 <quorem>
 8004490:	9a08      	ldr	r2, [sp, #32]
 8004492:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004496:	f807 3b01 	strb.w	r3, [r7], #1
 800449a:	1aba      	subs	r2, r7, r2
 800449c:	4593      	cmp	fp, r2
 800449e:	ddb9      	ble.n	8004414 <_dtoa_r+0xb34>
 80044a0:	4651      	mov	r1, sl
 80044a2:	2300      	movs	r3, #0
 80044a4:	220a      	movs	r2, #10
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f884 	bl	80045b4 <__multadd>
 80044ac:	4682      	mov	sl, r0
 80044ae:	e7eb      	b.n	8004488 <_dtoa_r+0xba8>
 80044b0:	08005ecb 	.word	0x08005ecb
 80044b4:	08005e24 	.word	0x08005e24
 80044b8:	08005e48 	.word	0x08005e48

080044bc <_localeconv_r>:
 80044bc:	4800      	ldr	r0, [pc, #0]	; (80044c0 <_localeconv_r+0x4>)
 80044be:	4770      	bx	lr
 80044c0:	20000160 	.word	0x20000160

080044c4 <malloc>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <malloc+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f000 bbed 	b.w	8004ca8 <_malloc_r>
 80044ce:	bf00      	nop
 80044d0:	2000000c 	.word	0x2000000c

080044d4 <memchr>:
 80044d4:	4603      	mov	r3, r0
 80044d6:	b510      	push	{r4, lr}
 80044d8:	b2c9      	uxtb	r1, r1
 80044da:	4402      	add	r2, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	d101      	bne.n	80044e6 <memchr+0x12>
 80044e2:	2000      	movs	r0, #0
 80044e4:	e003      	b.n	80044ee <memchr+0x1a>
 80044e6:	7804      	ldrb	r4, [r0, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	428c      	cmp	r4, r1
 80044ec:	d1f6      	bne.n	80044dc <memchr+0x8>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <_Balloc>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80044f4:	4604      	mov	r4, r0
 80044f6:	460d      	mov	r5, r1
 80044f8:	b976      	cbnz	r6, 8004518 <_Balloc+0x28>
 80044fa:	2010      	movs	r0, #16
 80044fc:	f7ff ffe2 	bl	80044c4 <malloc>
 8004500:	4602      	mov	r2, r0
 8004502:	6260      	str	r0, [r4, #36]	; 0x24
 8004504:	b920      	cbnz	r0, 8004510 <_Balloc+0x20>
 8004506:	2166      	movs	r1, #102	; 0x66
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <_Balloc+0x78>)
 800450a:	4818      	ldr	r0, [pc, #96]	; (800456c <_Balloc+0x7c>)
 800450c:	f000 fd92 	bl	8005034 <__assert_func>
 8004510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004514:	6006      	str	r6, [r0, #0]
 8004516:	60c6      	str	r6, [r0, #12]
 8004518:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800451a:	68f3      	ldr	r3, [r6, #12]
 800451c:	b183      	cbz	r3, 8004540 <_Balloc+0x50>
 800451e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004526:	b9b8      	cbnz	r0, 8004558 <_Balloc+0x68>
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f605 	lsl.w	r6, r1, r5
 800452e:	1d72      	adds	r2, r6, #5
 8004530:	4620      	mov	r0, r4
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	f000 fb5e 	bl	8004bf4 <_calloc_r>
 8004538:	b160      	cbz	r0, 8004554 <_Balloc+0x64>
 800453a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800453e:	e00e      	b.n	800455e <_Balloc+0x6e>
 8004540:	2221      	movs	r2, #33	; 0x21
 8004542:	2104      	movs	r1, #4
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fb55 	bl	8004bf4 <_calloc_r>
 800454a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800454c:	60f0      	str	r0, [r6, #12]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e4      	bne.n	800451e <_Balloc+0x2e>
 8004554:	2000      	movs	r0, #0
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	6802      	ldr	r2, [r0, #0]
 800455a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800455e:	2300      	movs	r3, #0
 8004560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004564:	e7f7      	b.n	8004556 <_Balloc+0x66>
 8004566:	bf00      	nop
 8004568:	08005e55 	.word	0x08005e55
 800456c:	08005edc 	.word	0x08005edc

08004570 <_Bfree>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004574:	4605      	mov	r5, r0
 8004576:	460c      	mov	r4, r1
 8004578:	b976      	cbnz	r6, 8004598 <_Bfree+0x28>
 800457a:	2010      	movs	r0, #16
 800457c:	f7ff ffa2 	bl	80044c4 <malloc>
 8004580:	4602      	mov	r2, r0
 8004582:	6268      	str	r0, [r5, #36]	; 0x24
 8004584:	b920      	cbnz	r0, 8004590 <_Bfree+0x20>
 8004586:	218a      	movs	r1, #138	; 0x8a
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <_Bfree+0x3c>)
 800458a:	4809      	ldr	r0, [pc, #36]	; (80045b0 <_Bfree+0x40>)
 800458c:	f000 fd52 	bl	8005034 <__assert_func>
 8004590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004594:	6006      	str	r6, [r0, #0]
 8004596:	60c6      	str	r6, [r0, #12]
 8004598:	b13c      	cbz	r4, 80045aa <_Bfree+0x3a>
 800459a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800459c:	6862      	ldr	r2, [r4, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045a4:	6021      	str	r1, [r4, #0]
 80045a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	08005e55 	.word	0x08005e55
 80045b0:	08005edc 	.word	0x08005edc

080045b4 <__multadd>:
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4698      	mov	r8, r3
 80045ba:	460c      	mov	r4, r1
 80045bc:	2300      	movs	r3, #0
 80045be:	690e      	ldr	r6, [r1, #16]
 80045c0:	4607      	mov	r7, r0
 80045c2:	f101 0014 	add.w	r0, r1, #20
 80045c6:	6805      	ldr	r5, [r0, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2a9      	uxth	r1, r5
 80045cc:	fb02 8101 	mla	r1, r2, r1, r8
 80045d0:	0c2d      	lsrs	r5, r5, #16
 80045d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80045d6:	fb02 c505 	mla	r5, r2, r5, ip
 80045da:	b289      	uxth	r1, r1
 80045dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80045e0:	429e      	cmp	r6, r3
 80045e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80045e6:	f840 1b04 	str.w	r1, [r0], #4
 80045ea:	dcec      	bgt.n	80045c6 <__multadd+0x12>
 80045ec:	f1b8 0f00 	cmp.w	r8, #0
 80045f0:	d022      	beq.n	8004638 <__multadd+0x84>
 80045f2:	68a3      	ldr	r3, [r4, #8]
 80045f4:	42b3      	cmp	r3, r6
 80045f6:	dc19      	bgt.n	800462c <__multadd+0x78>
 80045f8:	6861      	ldr	r1, [r4, #4]
 80045fa:	4638      	mov	r0, r7
 80045fc:	3101      	adds	r1, #1
 80045fe:	f7ff ff77 	bl	80044f0 <_Balloc>
 8004602:	4605      	mov	r5, r0
 8004604:	b928      	cbnz	r0, 8004612 <__multadd+0x5e>
 8004606:	4602      	mov	r2, r0
 8004608:	21b5      	movs	r1, #181	; 0xb5
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <__multadd+0x8c>)
 800460c:	480d      	ldr	r0, [pc, #52]	; (8004644 <__multadd+0x90>)
 800460e:	f000 fd11 	bl	8005034 <__assert_func>
 8004612:	6922      	ldr	r2, [r4, #16]
 8004614:	f104 010c 	add.w	r1, r4, #12
 8004618:	3202      	adds	r2, #2
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	300c      	adds	r0, #12
 800461e:	f7fe fc3b 	bl	8002e98 <memcpy>
 8004622:	4621      	mov	r1, r4
 8004624:	4638      	mov	r0, r7
 8004626:	f7ff ffa3 	bl	8004570 <_Bfree>
 800462a:	462c      	mov	r4, r5
 800462c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004630:	3601      	adds	r6, #1
 8004632:	f8c3 8014 	str.w	r8, [r3, #20]
 8004636:	6126      	str	r6, [r4, #16]
 8004638:	4620      	mov	r0, r4
 800463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800463e:	bf00      	nop
 8004640:	08005ecb 	.word	0x08005ecb
 8004644:	08005edc 	.word	0x08005edc

08004648 <__hi0bits>:
 8004648:	0c02      	lsrs	r2, r0, #16
 800464a:	0412      	lsls	r2, r2, #16
 800464c:	4603      	mov	r3, r0
 800464e:	b9ca      	cbnz	r2, 8004684 <__hi0bits+0x3c>
 8004650:	0403      	lsls	r3, r0, #16
 8004652:	2010      	movs	r0, #16
 8004654:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004658:	bf04      	itt	eq
 800465a:	021b      	lsleq	r3, r3, #8
 800465c:	3008      	addeq	r0, #8
 800465e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004662:	bf04      	itt	eq
 8004664:	011b      	lsleq	r3, r3, #4
 8004666:	3004      	addeq	r0, #4
 8004668:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800466c:	bf04      	itt	eq
 800466e:	009b      	lsleq	r3, r3, #2
 8004670:	3002      	addeq	r0, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	db05      	blt.n	8004682 <__hi0bits+0x3a>
 8004676:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800467a:	f100 0001 	add.w	r0, r0, #1
 800467e:	bf08      	it	eq
 8004680:	2020      	moveq	r0, #32
 8004682:	4770      	bx	lr
 8004684:	2000      	movs	r0, #0
 8004686:	e7e5      	b.n	8004654 <__hi0bits+0xc>

08004688 <__lo0bits>:
 8004688:	6803      	ldr	r3, [r0, #0]
 800468a:	4602      	mov	r2, r0
 800468c:	f013 0007 	ands.w	r0, r3, #7
 8004690:	d00b      	beq.n	80046aa <__lo0bits+0x22>
 8004692:	07d9      	lsls	r1, r3, #31
 8004694:	d422      	bmi.n	80046dc <__lo0bits+0x54>
 8004696:	0798      	lsls	r0, r3, #30
 8004698:	bf49      	itett	mi
 800469a:	085b      	lsrmi	r3, r3, #1
 800469c:	089b      	lsrpl	r3, r3, #2
 800469e:	2001      	movmi	r0, #1
 80046a0:	6013      	strmi	r3, [r2, #0]
 80046a2:	bf5c      	itt	pl
 80046a4:	2002      	movpl	r0, #2
 80046a6:	6013      	strpl	r3, [r2, #0]
 80046a8:	4770      	bx	lr
 80046aa:	b299      	uxth	r1, r3
 80046ac:	b909      	cbnz	r1, 80046b2 <__lo0bits+0x2a>
 80046ae:	2010      	movs	r0, #16
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046b6:	bf04      	itt	eq
 80046b8:	0a1b      	lsreq	r3, r3, #8
 80046ba:	3008      	addeq	r0, #8
 80046bc:	0719      	lsls	r1, r3, #28
 80046be:	bf04      	itt	eq
 80046c0:	091b      	lsreq	r3, r3, #4
 80046c2:	3004      	addeq	r0, #4
 80046c4:	0799      	lsls	r1, r3, #30
 80046c6:	bf04      	itt	eq
 80046c8:	089b      	lsreq	r3, r3, #2
 80046ca:	3002      	addeq	r0, #2
 80046cc:	07d9      	lsls	r1, r3, #31
 80046ce:	d403      	bmi.n	80046d8 <__lo0bits+0x50>
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	f100 0001 	add.w	r0, r0, #1
 80046d6:	d003      	beq.n	80046e0 <__lo0bits+0x58>
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4770      	bx	lr
 80046dc:	2000      	movs	r0, #0
 80046de:	4770      	bx	lr
 80046e0:	2020      	movs	r0, #32
 80046e2:	4770      	bx	lr

080046e4 <__i2b>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	2101      	movs	r1, #1
 80046ea:	f7ff ff01 	bl	80044f0 <_Balloc>
 80046ee:	4602      	mov	r2, r0
 80046f0:	b928      	cbnz	r0, 80046fe <__i2b+0x1a>
 80046f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <__i2b+0x24>)
 80046f8:	4804      	ldr	r0, [pc, #16]	; (800470c <__i2b+0x28>)
 80046fa:	f000 fc9b 	bl	8005034 <__assert_func>
 80046fe:	2301      	movs	r3, #1
 8004700:	6144      	str	r4, [r0, #20]
 8004702:	6103      	str	r3, [r0, #16]
 8004704:	bd10      	pop	{r4, pc}
 8004706:	bf00      	nop
 8004708:	08005ecb 	.word	0x08005ecb
 800470c:	08005edc 	.word	0x08005edc

08004710 <__multiply>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4614      	mov	r4, r2
 8004716:	690a      	ldr	r2, [r1, #16]
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	460d      	mov	r5, r1
 800471c:	429a      	cmp	r2, r3
 800471e:	bfbe      	ittt	lt
 8004720:	460b      	movlt	r3, r1
 8004722:	4625      	movlt	r5, r4
 8004724:	461c      	movlt	r4, r3
 8004726:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800472a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800472e:	68ab      	ldr	r3, [r5, #8]
 8004730:	6869      	ldr	r1, [r5, #4]
 8004732:	eb0a 0709 	add.w	r7, sl, r9
 8004736:	42bb      	cmp	r3, r7
 8004738:	b085      	sub	sp, #20
 800473a:	bfb8      	it	lt
 800473c:	3101      	addlt	r1, #1
 800473e:	f7ff fed7 	bl	80044f0 <_Balloc>
 8004742:	b930      	cbnz	r0, 8004752 <__multiply+0x42>
 8004744:	4602      	mov	r2, r0
 8004746:	f240 115d 	movw	r1, #349	; 0x15d
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <__multiply+0x140>)
 800474c:	4841      	ldr	r0, [pc, #260]	; (8004854 <__multiply+0x144>)
 800474e:	f000 fc71 	bl	8005034 <__assert_func>
 8004752:	f100 0614 	add.w	r6, r0, #20
 8004756:	4633      	mov	r3, r6
 8004758:	2200      	movs	r2, #0
 800475a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800475e:	4543      	cmp	r3, r8
 8004760:	d31e      	bcc.n	80047a0 <__multiply+0x90>
 8004762:	f105 0c14 	add.w	ip, r5, #20
 8004766:	f104 0314 	add.w	r3, r4, #20
 800476a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800476e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	ebac 0205 	sub.w	r2, ip, r5
 8004778:	3a15      	subs	r2, #21
 800477a:	f022 0203 	bic.w	r2, r2, #3
 800477e:	3204      	adds	r2, #4
 8004780:	f105 0115 	add.w	r1, r5, #21
 8004784:	458c      	cmp	ip, r1
 8004786:	bf38      	it	cc
 8004788:	2204      	movcc	r2, #4
 800478a:	9201      	str	r2, [sp, #4]
 800478c:	9a02      	ldr	r2, [sp, #8]
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d808      	bhi.n	80047a6 <__multiply+0x96>
 8004794:	2f00      	cmp	r7, #0
 8004796:	dc55      	bgt.n	8004844 <__multiply+0x134>
 8004798:	6107      	str	r7, [r0, #16]
 800479a:	b005      	add	sp, #20
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	f843 2b04 	str.w	r2, [r3], #4
 80047a4:	e7db      	b.n	800475e <__multiply+0x4e>
 80047a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80047aa:	f1ba 0f00 	cmp.w	sl, #0
 80047ae:	d020      	beq.n	80047f2 <__multiply+0xe2>
 80047b0:	46b1      	mov	r9, r6
 80047b2:	2200      	movs	r2, #0
 80047b4:	f105 0e14 	add.w	lr, r5, #20
 80047b8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80047bc:	f8d9 b000 	ldr.w	fp, [r9]
 80047c0:	b2a1      	uxth	r1, r4
 80047c2:	fa1f fb8b 	uxth.w	fp, fp
 80047c6:	fb0a b101 	mla	r1, sl, r1, fp
 80047ca:	4411      	add	r1, r2
 80047cc:	f8d9 2000 	ldr.w	r2, [r9]
 80047d0:	0c24      	lsrs	r4, r4, #16
 80047d2:	0c12      	lsrs	r2, r2, #16
 80047d4:	fb0a 2404 	mla	r4, sl, r4, r2
 80047d8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80047dc:	b289      	uxth	r1, r1
 80047de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80047e2:	45f4      	cmp	ip, lr
 80047e4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80047e8:	f849 1b04 	str.w	r1, [r9], #4
 80047ec:	d8e4      	bhi.n	80047b8 <__multiply+0xa8>
 80047ee:	9901      	ldr	r1, [sp, #4]
 80047f0:	5072      	str	r2, [r6, r1]
 80047f2:	9a03      	ldr	r2, [sp, #12]
 80047f4:	3304      	adds	r3, #4
 80047f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	d01f      	beq.n	8004840 <__multiply+0x130>
 8004800:	46b6      	mov	lr, r6
 8004802:	f04f 0a00 	mov.w	sl, #0
 8004806:	6834      	ldr	r4, [r6, #0]
 8004808:	f105 0114 	add.w	r1, r5, #20
 800480c:	880a      	ldrh	r2, [r1, #0]
 800480e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004812:	b2a4      	uxth	r4, r4
 8004814:	fb09 b202 	mla	r2, r9, r2, fp
 8004818:	4492      	add	sl, r2
 800481a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800481e:	f84e 4b04 	str.w	r4, [lr], #4
 8004822:	f851 4b04 	ldr.w	r4, [r1], #4
 8004826:	f8be 2000 	ldrh.w	r2, [lr]
 800482a:	0c24      	lsrs	r4, r4, #16
 800482c:	fb09 2404 	mla	r4, r9, r4, r2
 8004830:	458c      	cmp	ip, r1
 8004832:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004836:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800483a:	d8e7      	bhi.n	800480c <__multiply+0xfc>
 800483c:	9a01      	ldr	r2, [sp, #4]
 800483e:	50b4      	str	r4, [r6, r2]
 8004840:	3604      	adds	r6, #4
 8004842:	e7a3      	b.n	800478c <__multiply+0x7c>
 8004844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1a5      	bne.n	8004798 <__multiply+0x88>
 800484c:	3f01      	subs	r7, #1
 800484e:	e7a1      	b.n	8004794 <__multiply+0x84>
 8004850:	08005ecb 	.word	0x08005ecb
 8004854:	08005edc 	.word	0x08005edc

08004858 <__pow5mult>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	4615      	mov	r5, r2
 800485e:	f012 0203 	ands.w	r2, r2, #3
 8004862:	4606      	mov	r6, r0
 8004864:	460f      	mov	r7, r1
 8004866:	d007      	beq.n	8004878 <__pow5mult+0x20>
 8004868:	4c25      	ldr	r4, [pc, #148]	; (8004900 <__pow5mult+0xa8>)
 800486a:	3a01      	subs	r2, #1
 800486c:	2300      	movs	r3, #0
 800486e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004872:	f7ff fe9f 	bl	80045b4 <__multadd>
 8004876:	4607      	mov	r7, r0
 8004878:	10ad      	asrs	r5, r5, #2
 800487a:	d03d      	beq.n	80048f8 <__pow5mult+0xa0>
 800487c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800487e:	b97c      	cbnz	r4, 80048a0 <__pow5mult+0x48>
 8004880:	2010      	movs	r0, #16
 8004882:	f7ff fe1f 	bl	80044c4 <malloc>
 8004886:	4602      	mov	r2, r0
 8004888:	6270      	str	r0, [r6, #36]	; 0x24
 800488a:	b928      	cbnz	r0, 8004898 <__pow5mult+0x40>
 800488c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <__pow5mult+0xac>)
 8004892:	481d      	ldr	r0, [pc, #116]	; (8004908 <__pow5mult+0xb0>)
 8004894:	f000 fbce 	bl	8005034 <__assert_func>
 8004898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800489c:	6004      	str	r4, [r0, #0]
 800489e:	60c4      	str	r4, [r0, #12]
 80048a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048a8:	b94c      	cbnz	r4, 80048be <__pow5mult+0x66>
 80048aa:	f240 2171 	movw	r1, #625	; 0x271
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ff18 	bl	80046e4 <__i2b>
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80048bc:	6003      	str	r3, [r0, #0]
 80048be:	f04f 0900 	mov.w	r9, #0
 80048c2:	07eb      	lsls	r3, r5, #31
 80048c4:	d50a      	bpl.n	80048dc <__pow5mult+0x84>
 80048c6:	4639      	mov	r1, r7
 80048c8:	4622      	mov	r2, r4
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ff20 	bl	8004710 <__multiply>
 80048d0:	4680      	mov	r8, r0
 80048d2:	4639      	mov	r1, r7
 80048d4:	4630      	mov	r0, r6
 80048d6:	f7ff fe4b 	bl	8004570 <_Bfree>
 80048da:	4647      	mov	r7, r8
 80048dc:	106d      	asrs	r5, r5, #1
 80048de:	d00b      	beq.n	80048f8 <__pow5mult+0xa0>
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	b938      	cbnz	r0, 80048f4 <__pow5mult+0x9c>
 80048e4:	4622      	mov	r2, r4
 80048e6:	4621      	mov	r1, r4
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7ff ff11 	bl	8004710 <__multiply>
 80048ee:	6020      	str	r0, [r4, #0]
 80048f0:	f8c0 9000 	str.w	r9, [r0]
 80048f4:	4604      	mov	r4, r0
 80048f6:	e7e4      	b.n	80048c2 <__pow5mult+0x6a>
 80048f8:	4638      	mov	r0, r7
 80048fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fe:	bf00      	nop
 8004900:	08006030 	.word	0x08006030
 8004904:	08005e55 	.word	0x08005e55
 8004908:	08005edc 	.word	0x08005edc

0800490c <__lshift>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	460c      	mov	r4, r1
 8004912:	4607      	mov	r7, r0
 8004914:	4691      	mov	r9, r2
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	6849      	ldr	r1, [r1, #4]
 800491a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004924:	f108 0601 	add.w	r6, r8, #1
 8004928:	42b3      	cmp	r3, r6
 800492a:	db0b      	blt.n	8004944 <__lshift+0x38>
 800492c:	4638      	mov	r0, r7
 800492e:	f7ff fddf 	bl	80044f0 <_Balloc>
 8004932:	4605      	mov	r5, r0
 8004934:	b948      	cbnz	r0, 800494a <__lshift+0x3e>
 8004936:	4602      	mov	r2, r0
 8004938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <__lshift+0xd0>)
 800493e:	4828      	ldr	r0, [pc, #160]	; (80049e0 <__lshift+0xd4>)
 8004940:	f000 fb78 	bl	8005034 <__assert_func>
 8004944:	3101      	adds	r1, #1
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	e7ee      	b.n	8004928 <__lshift+0x1c>
 800494a:	2300      	movs	r3, #0
 800494c:	f100 0114 	add.w	r1, r0, #20
 8004950:	f100 0210 	add.w	r2, r0, #16
 8004954:	4618      	mov	r0, r3
 8004956:	4553      	cmp	r3, sl
 8004958:	db33      	blt.n	80049c2 <__lshift+0xb6>
 800495a:	6920      	ldr	r0, [r4, #16]
 800495c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004960:	f104 0314 	add.w	r3, r4, #20
 8004964:	f019 091f 	ands.w	r9, r9, #31
 8004968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800496c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004970:	d02b      	beq.n	80049ca <__lshift+0xbe>
 8004972:	468a      	mov	sl, r1
 8004974:	2200      	movs	r2, #0
 8004976:	f1c9 0e20 	rsb	lr, r9, #32
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	fa00 f009 	lsl.w	r0, r0, r9
 8004980:	4302      	orrs	r2, r0
 8004982:	f84a 2b04 	str.w	r2, [sl], #4
 8004986:	f853 2b04 	ldr.w	r2, [r3], #4
 800498a:	459c      	cmp	ip, r3
 800498c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004990:	d8f3      	bhi.n	800497a <__lshift+0x6e>
 8004992:	ebac 0304 	sub.w	r3, ip, r4
 8004996:	3b15      	subs	r3, #21
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	3304      	adds	r3, #4
 800499e:	f104 0015 	add.w	r0, r4, #21
 80049a2:	4584      	cmp	ip, r0
 80049a4:	bf38      	it	cc
 80049a6:	2304      	movcc	r3, #4
 80049a8:	50ca      	str	r2, [r1, r3]
 80049aa:	b10a      	cbz	r2, 80049b0 <__lshift+0xa4>
 80049ac:	f108 0602 	add.w	r6, r8, #2
 80049b0:	3e01      	subs	r6, #1
 80049b2:	4638      	mov	r0, r7
 80049b4:	4621      	mov	r1, r4
 80049b6:	612e      	str	r6, [r5, #16]
 80049b8:	f7ff fdda 	bl	8004570 <_Bfree>
 80049bc:	4628      	mov	r0, r5
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80049c6:	3301      	adds	r3, #1
 80049c8:	e7c5      	b.n	8004956 <__lshift+0x4a>
 80049ca:	3904      	subs	r1, #4
 80049cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d0:	459c      	cmp	ip, r3
 80049d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80049d6:	d8f9      	bhi.n	80049cc <__lshift+0xc0>
 80049d8:	e7ea      	b.n	80049b0 <__lshift+0xa4>
 80049da:	bf00      	nop
 80049dc:	08005ecb 	.word	0x08005ecb
 80049e0:	08005edc 	.word	0x08005edc

080049e4 <__mcmp>:
 80049e4:	4603      	mov	r3, r0
 80049e6:	690a      	ldr	r2, [r1, #16]
 80049e8:	6900      	ldr	r0, [r0, #16]
 80049ea:	b530      	push	{r4, r5, lr}
 80049ec:	1a80      	subs	r0, r0, r2
 80049ee:	d10d      	bne.n	8004a0c <__mcmp+0x28>
 80049f0:	3314      	adds	r3, #20
 80049f2:	3114      	adds	r1, #20
 80049f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80049f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80049fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a04:	4295      	cmp	r5, r2
 8004a06:	d002      	beq.n	8004a0e <__mcmp+0x2a>
 8004a08:	d304      	bcc.n	8004a14 <__mcmp+0x30>
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	bd30      	pop	{r4, r5, pc}
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	d3f4      	bcc.n	80049fc <__mcmp+0x18>
 8004a12:	e7fb      	b.n	8004a0c <__mcmp+0x28>
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	e7f8      	b.n	8004a0c <__mcmp+0x28>
	...

08004a1c <__mdiff>:
 8004a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	460c      	mov	r4, r1
 8004a22:	4606      	mov	r6, r0
 8004a24:	4611      	mov	r1, r2
 8004a26:	4620      	mov	r0, r4
 8004a28:	4692      	mov	sl, r2
 8004a2a:	f7ff ffdb 	bl	80049e4 <__mcmp>
 8004a2e:	1e05      	subs	r5, r0, #0
 8004a30:	d111      	bne.n	8004a56 <__mdiff+0x3a>
 8004a32:	4629      	mov	r1, r5
 8004a34:	4630      	mov	r0, r6
 8004a36:	f7ff fd5b 	bl	80044f0 <_Balloc>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	b928      	cbnz	r0, 8004a4a <__mdiff+0x2e>
 8004a3e:	f240 2132 	movw	r1, #562	; 0x232
 8004a42:	4b3c      	ldr	r3, [pc, #240]	; (8004b34 <__mdiff+0x118>)
 8004a44:	483c      	ldr	r0, [pc, #240]	; (8004b38 <__mdiff+0x11c>)
 8004a46:	f000 faf5 	bl	8005034 <__assert_func>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a50:	4610      	mov	r0, r2
 8004a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a56:	bfa4      	itt	ge
 8004a58:	4653      	movge	r3, sl
 8004a5a:	46a2      	movge	sl, r4
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004a62:	bfa6      	itte	ge
 8004a64:	461c      	movge	r4, r3
 8004a66:	2500      	movge	r5, #0
 8004a68:	2501      	movlt	r5, #1
 8004a6a:	f7ff fd41 	bl	80044f0 <_Balloc>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	b918      	cbnz	r0, 8004a7a <__mdiff+0x5e>
 8004a72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <__mdiff+0x118>)
 8004a78:	e7e4      	b.n	8004a44 <__mdiff+0x28>
 8004a7a:	f100 0814 	add.w	r8, r0, #20
 8004a7e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004a82:	60c5      	str	r5, [r0, #12]
 8004a84:	f04f 0c00 	mov.w	ip, #0
 8004a88:	f10a 0514 	add.w	r5, sl, #20
 8004a8c:	f10a 0010 	add.w	r0, sl, #16
 8004a90:	46c2      	mov	sl, r8
 8004a92:	6926      	ldr	r6, [r4, #16]
 8004a94:	f104 0914 	add.w	r9, r4, #20
 8004a98:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004aa0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004aa8:	fa1f f18b 	uxth.w	r1, fp
 8004aac:	4461      	add	r1, ip
 8004aae:	fa1f fc83 	uxth.w	ip, r3
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	eba1 010c 	sub.w	r1, r1, ip
 8004ab8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004abc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ac0:	b289      	uxth	r1, r1
 8004ac2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ac6:	454e      	cmp	r6, r9
 8004ac8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004acc:	f84a 3b04 	str.w	r3, [sl], #4
 8004ad0:	d8e6      	bhi.n	8004aa0 <__mdiff+0x84>
 8004ad2:	1b33      	subs	r3, r6, r4
 8004ad4:	3b15      	subs	r3, #21
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	3415      	adds	r4, #21
 8004adc:	3304      	adds	r3, #4
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	bf38      	it	cc
 8004ae2:	2304      	movcc	r3, #4
 8004ae4:	441d      	add	r5, r3
 8004ae6:	4443      	add	r3, r8
 8004ae8:	461e      	mov	r6, r3
 8004aea:	462c      	mov	r4, r5
 8004aec:	4574      	cmp	r4, lr
 8004aee:	d30e      	bcc.n	8004b0e <__mdiff+0xf2>
 8004af0:	f10e 0103 	add.w	r1, lr, #3
 8004af4:	1b49      	subs	r1, r1, r5
 8004af6:	f021 0103 	bic.w	r1, r1, #3
 8004afa:	3d03      	subs	r5, #3
 8004afc:	45ae      	cmp	lr, r5
 8004afe:	bf38      	it	cc
 8004b00:	2100      	movcc	r1, #0
 8004b02:	4419      	add	r1, r3
 8004b04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004b08:	b18b      	cbz	r3, 8004b2e <__mdiff+0x112>
 8004b0a:	6117      	str	r7, [r2, #16]
 8004b0c:	e7a0      	b.n	8004a50 <__mdiff+0x34>
 8004b0e:	f854 8b04 	ldr.w	r8, [r4], #4
 8004b12:	fa1f f188 	uxth.w	r1, r8
 8004b16:	4461      	add	r1, ip
 8004b18:	1408      	asrs	r0, r1, #16
 8004b1a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004b1e:	b289      	uxth	r1, r1
 8004b20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b28:	f846 1b04 	str.w	r1, [r6], #4
 8004b2c:	e7de      	b.n	8004aec <__mdiff+0xd0>
 8004b2e:	3f01      	subs	r7, #1
 8004b30:	e7e8      	b.n	8004b04 <__mdiff+0xe8>
 8004b32:	bf00      	nop
 8004b34:	08005ecb 	.word	0x08005ecb
 8004b38:	08005edc 	.word	0x08005edc

08004b3c <__d2b>:
 8004b3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b40:	2101      	movs	r1, #1
 8004b42:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004b46:	4690      	mov	r8, r2
 8004b48:	461d      	mov	r5, r3
 8004b4a:	f7ff fcd1 	bl	80044f0 <_Balloc>
 8004b4e:	4604      	mov	r4, r0
 8004b50:	b930      	cbnz	r0, 8004b60 <__d2b+0x24>
 8004b52:	4602      	mov	r2, r0
 8004b54:	f240 310a 	movw	r1, #778	; 0x30a
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <__d2b+0xb0>)
 8004b5a:	4825      	ldr	r0, [pc, #148]	; (8004bf0 <__d2b+0xb4>)
 8004b5c:	f000 fa6a 	bl	8005034 <__assert_func>
 8004b60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004b64:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004b68:	bb2d      	cbnz	r5, 8004bb6 <__d2b+0x7a>
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	f1b8 0300 	subs.w	r3, r8, #0
 8004b70:	d026      	beq.n	8004bc0 <__d2b+0x84>
 8004b72:	4668      	mov	r0, sp
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	f7ff fd87 	bl	8004688 <__lo0bits>
 8004b7a:	9900      	ldr	r1, [sp, #0]
 8004b7c:	b1f0      	cbz	r0, 8004bbc <__d2b+0x80>
 8004b7e:	9a01      	ldr	r2, [sp, #4]
 8004b80:	f1c0 0320 	rsb	r3, r0, #32
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	40c2      	lsrs	r2, r0
 8004b8c:	6163      	str	r3, [r4, #20]
 8004b8e:	9201      	str	r2, [sp, #4]
 8004b90:	9b01      	ldr	r3, [sp, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bf14      	ite	ne
 8004b96:	2102      	movne	r1, #2
 8004b98:	2101      	moveq	r1, #1
 8004b9a:	61a3      	str	r3, [r4, #24]
 8004b9c:	6121      	str	r1, [r4, #16]
 8004b9e:	b1c5      	cbz	r5, 8004bd2 <__d2b+0x96>
 8004ba0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004ba4:	4405      	add	r5, r0
 8004ba6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004baa:	603d      	str	r5, [r7, #0]
 8004bac:	6030      	str	r0, [r6, #0]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	b002      	add	sp, #8
 8004bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	e7d6      	b.n	8004b6a <__d2b+0x2e>
 8004bbc:	6161      	str	r1, [r4, #20]
 8004bbe:	e7e7      	b.n	8004b90 <__d2b+0x54>
 8004bc0:	a801      	add	r0, sp, #4
 8004bc2:	f7ff fd61 	bl	8004688 <__lo0bits>
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	6121      	str	r1, [r4, #16]
 8004bcc:	6163      	str	r3, [r4, #20]
 8004bce:	3020      	adds	r0, #32
 8004bd0:	e7e5      	b.n	8004b9e <__d2b+0x62>
 8004bd2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004bd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004bda:	6038      	str	r0, [r7, #0]
 8004bdc:	6918      	ldr	r0, [r3, #16]
 8004bde:	f7ff fd33 	bl	8004648 <__hi0bits>
 8004be2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004be6:	6031      	str	r1, [r6, #0]
 8004be8:	e7e1      	b.n	8004bae <__d2b+0x72>
 8004bea:	bf00      	nop
 8004bec:	08005ecb 	.word	0x08005ecb
 8004bf0:	08005edc 	.word	0x08005edc

08004bf4 <_calloc_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	fb02 f501 	mul.w	r5, r2, r1
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f000 f854 	bl	8004ca8 <_malloc_r>
 8004c00:	4604      	mov	r4, r0
 8004c02:	b118      	cbz	r0, 8004c0c <_calloc_r+0x18>
 8004c04:	462a      	mov	r2, r5
 8004c06:	2100      	movs	r1, #0
 8004c08:	f7fe f954 	bl	8002eb4 <memset>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d043      	beq.n	8004ca0 <_free_r+0x90>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 fa62 	bl	80050ec <__malloc_lock>
 8004c28:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <_free_r+0x94>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	b933      	cbnz	r3, 8004c3e <_free_r+0x2e>
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6014      	str	r4, [r2, #0]
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3a:	f000 ba5d 	b.w	80050f8 <__malloc_unlock>
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	d90a      	bls.n	8004c58 <_free_r+0x48>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	1862      	adds	r2, r4, r1
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf01      	itttt	eq
 8004c4a:	681a      	ldreq	r2, [r3, #0]
 8004c4c:	685b      	ldreq	r3, [r3, #4]
 8004c4e:	1852      	addeq	r2, r2, r1
 8004c50:	6022      	streq	r2, [r4, #0]
 8004c52:	6063      	str	r3, [r4, #4]
 8004c54:	6004      	str	r4, [r0, #0]
 8004c56:	e7ed      	b.n	8004c34 <_free_r+0x24>
 8004c58:	461a      	mov	r2, r3
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b10b      	cbz	r3, 8004c62 <_free_r+0x52>
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	d9fa      	bls.n	8004c58 <_free_r+0x48>
 8004c62:	6811      	ldr	r1, [r2, #0]
 8004c64:	1850      	adds	r0, r2, r1
 8004c66:	42a0      	cmp	r0, r4
 8004c68:	d10b      	bne.n	8004c82 <_free_r+0x72>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	1850      	adds	r0, r2, r1
 8004c70:	4283      	cmp	r3, r0
 8004c72:	6011      	str	r1, [r2, #0]
 8004c74:	d1de      	bne.n	8004c34 <_free_r+0x24>
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4401      	add	r1, r0
 8004c7c:	6011      	str	r1, [r2, #0]
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e7d8      	b.n	8004c34 <_free_r+0x24>
 8004c82:	d902      	bls.n	8004c8a <_free_r+0x7a>
 8004c84:	230c      	movs	r3, #12
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	e7d4      	b.n	8004c34 <_free_r+0x24>
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1821      	adds	r1, r4, r0
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	bf01      	itttt	eq
 8004c92:	6819      	ldreq	r1, [r3, #0]
 8004c94:	685b      	ldreq	r3, [r3, #4]
 8004c96:	1809      	addeq	r1, r1, r0
 8004c98:	6021      	streq	r1, [r4, #0]
 8004c9a:	6063      	str	r3, [r4, #4]
 8004c9c:	6054      	str	r4, [r2, #4]
 8004c9e:	e7c9      	b.n	8004c34 <_free_r+0x24>
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000604 	.word	0x20000604

08004ca8 <_malloc_r>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	1ccd      	adds	r5, r1, #3
 8004cac:	f025 0503 	bic.w	r5, r5, #3
 8004cb0:	3508      	adds	r5, #8
 8004cb2:	2d0c      	cmp	r5, #12
 8004cb4:	bf38      	it	cc
 8004cb6:	250c      	movcc	r5, #12
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	4606      	mov	r6, r0
 8004cbc:	db01      	blt.n	8004cc2 <_malloc_r+0x1a>
 8004cbe:	42a9      	cmp	r1, r5
 8004cc0:	d903      	bls.n	8004cca <_malloc_r+0x22>
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cca:	f000 fa0f 	bl	80050ec <__malloc_lock>
 8004cce:	4921      	ldr	r1, [pc, #132]	; (8004d54 <_malloc_r+0xac>)
 8004cd0:	680a      	ldr	r2, [r1, #0]
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	b99c      	cbnz	r4, 8004cfe <_malloc_r+0x56>
 8004cd6:	4f20      	ldr	r7, [pc, #128]	; (8004d58 <_malloc_r+0xb0>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	b923      	cbnz	r3, 8004ce6 <_malloc_r+0x3e>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f000 f998 	bl	8005014 <_sbrk_r>
 8004ce4:	6038      	str	r0, [r7, #0]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f993 	bl	8005014 <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d123      	bne.n	8004d3a <_malloc_r+0x92>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f000 f9fe 	bl	80050f8 <__malloc_unlock>
 8004cfc:	e7e3      	b.n	8004cc6 <_malloc_r+0x1e>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	1b5b      	subs	r3, r3, r5
 8004d02:	d417      	bmi.n	8004d34 <_malloc_r+0x8c>
 8004d04:	2b0b      	cmp	r3, #11
 8004d06:	d903      	bls.n	8004d10 <_malloc_r+0x68>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	441c      	add	r4, r3
 8004d0c:	6025      	str	r5, [r4, #0]
 8004d0e:	e004      	b.n	8004d1a <_malloc_r+0x72>
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	42a2      	cmp	r2, r4
 8004d14:	bf0c      	ite	eq
 8004d16:	600b      	streq	r3, [r1, #0]
 8004d18:	6053      	strne	r3, [r2, #4]
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f000 f9ec 	bl	80050f8 <__malloc_unlock>
 8004d20:	f104 000b 	add.w	r0, r4, #11
 8004d24:	1d23      	adds	r3, r4, #4
 8004d26:	f020 0007 	bic.w	r0, r0, #7
 8004d2a:	1ac2      	subs	r2, r0, r3
 8004d2c:	d0cc      	beq.n	8004cc8 <_malloc_r+0x20>
 8004d2e:	1a1b      	subs	r3, r3, r0
 8004d30:	50a3      	str	r3, [r4, r2]
 8004d32:	e7c9      	b.n	8004cc8 <_malloc_r+0x20>
 8004d34:	4622      	mov	r2, r4
 8004d36:	6864      	ldr	r4, [r4, #4]
 8004d38:	e7cc      	b.n	8004cd4 <_malloc_r+0x2c>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d0e3      	beq.n	8004d0c <_malloc_r+0x64>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 f964 	bl	8005014 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d1dd      	bne.n	8004d0c <_malloc_r+0x64>
 8004d50:	e7cf      	b.n	8004cf2 <_malloc_r+0x4a>
 8004d52:	bf00      	nop
 8004d54:	20000604 	.word	0x20000604
 8004d58:	20000608 	.word	0x20000608

08004d5c <__ssputs_r>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	688e      	ldr	r6, [r1, #8]
 8004d62:	4682      	mov	sl, r0
 8004d64:	429e      	cmp	r6, r3
 8004d66:	460c      	mov	r4, r1
 8004d68:	4690      	mov	r8, r2
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	d838      	bhi.n	8004de0 <__ssputs_r+0x84>
 8004d6e:	898a      	ldrh	r2, [r1, #12]
 8004d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d74:	d032      	beq.n	8004ddc <__ssputs_r+0x80>
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	6909      	ldr	r1, [r1, #16]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	eba5 0901 	sub.w	r9, r5, r1
 8004d80:	6965      	ldr	r5, [r4, #20]
 8004d82:	444b      	add	r3, r9
 8004d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d8c:	106d      	asrs	r5, r5, #1
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	bf38      	it	cc
 8004d92:	461d      	movcc	r5, r3
 8004d94:	0553      	lsls	r3, r2, #21
 8004d96:	d531      	bpl.n	8004dfc <__ssputs_r+0xa0>
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7ff ff85 	bl	8004ca8 <_malloc_r>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	b950      	cbnz	r0, 8004db8 <__ssputs_r+0x5c>
 8004da2:	230c      	movs	r3, #12
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	f8ca 3000 	str.w	r3, [sl]
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	464a      	mov	r2, r9
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	f7fe f86c 	bl	8002e98 <memcpy>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	6126      	str	r6, [r4, #16]
 8004dce:	444e      	add	r6, r9
 8004dd0:	6026      	str	r6, [r4, #0]
 8004dd2:	463e      	mov	r6, r7
 8004dd4:	6165      	str	r5, [r4, #20]
 8004dd6:	eba5 0509 	sub.w	r5, r5, r9
 8004dda:	60a5      	str	r5, [r4, #8]
 8004ddc:	42be      	cmp	r6, r7
 8004dde:	d900      	bls.n	8004de2 <__ssputs_r+0x86>
 8004de0:	463e      	mov	r6, r7
 8004de2:	4632      	mov	r2, r6
 8004de4:	4641      	mov	r1, r8
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	f000 f966 	bl	80050b8 <memmove>
 8004dec:	68a3      	ldr	r3, [r4, #8]
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	1b9b      	subs	r3, r3, r6
 8004df2:	4432      	add	r2, r6
 8004df4:	2000      	movs	r0, #0
 8004df6:	60a3      	str	r3, [r4, #8]
 8004df8:	6022      	str	r2, [r4, #0]
 8004dfa:	e7db      	b.n	8004db4 <__ssputs_r+0x58>
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	f000 f981 	bl	8005104 <_realloc_r>
 8004e02:	4606      	mov	r6, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1e1      	bne.n	8004dcc <__ssputs_r+0x70>
 8004e08:	4650      	mov	r0, sl
 8004e0a:	6921      	ldr	r1, [r4, #16]
 8004e0c:	f7ff ff00 	bl	8004c10 <_free_r>
 8004e10:	e7c7      	b.n	8004da2 <__ssputs_r+0x46>
	...

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	4698      	mov	r8, r3
 8004e1a:	898b      	ldrh	r3, [r1, #12]
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	460d      	mov	r5, r1
 8004e22:	4614      	mov	r4, r2
 8004e24:	b09d      	sub	sp, #116	; 0x74
 8004e26:	d50e      	bpl.n	8004e46 <_svfiprintf_r+0x32>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b963      	cbnz	r3, 8004e46 <_svfiprintf_r+0x32>
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	f7ff ff3b 	bl	8004ca8 <_malloc_r>
 8004e32:	6028      	str	r0, [r5, #0]
 8004e34:	6128      	str	r0, [r5, #16]
 8004e36:	b920      	cbnz	r0, 8004e42 <_svfiprintf_r+0x2e>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	e0d1      	b.n	8004fe6 <_svfiprintf_r+0x1d2>
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	616b      	str	r3, [r5, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e50:	2330      	movs	r3, #48	; 0x30
 8004e52:	f04f 0901 	mov.w	r9, #1
 8004e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005000 <_svfiprintf_r+0x1ec>
 8004e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e62:	4623      	mov	r3, r4
 8004e64:	469a      	mov	sl, r3
 8004e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6a:	b10a      	cbz	r2, 8004e70 <_svfiprintf_r+0x5c>
 8004e6c:	2a25      	cmp	r2, #37	; 0x25
 8004e6e:	d1f9      	bne.n	8004e64 <_svfiprintf_r+0x50>
 8004e70:	ebba 0b04 	subs.w	fp, sl, r4
 8004e74:	d00b      	beq.n	8004e8e <_svfiprintf_r+0x7a>
 8004e76:	465b      	mov	r3, fp
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff ff6d 	bl	8004d5c <__ssputs_r>
 8004e82:	3001      	adds	r0, #1
 8004e84:	f000 80aa 	beq.w	8004fdc <_svfiprintf_r+0x1c8>
 8004e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e8a:	445a      	add	r2, fp
 8004e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80a2 	beq.w	8004fdc <_svfiprintf_r+0x1c8>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea2:	f10a 0a01 	add.w	sl, sl, #1
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	9307      	str	r3, [sp, #28]
 8004eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eae:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb0:	4654      	mov	r4, sl
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	4851      	ldr	r0, [pc, #324]	; (8005000 <_svfiprintf_r+0x1ec>)
 8004eba:	f7ff fb0b 	bl	80044d4 <memchr>
 8004ebe:	9a04      	ldr	r2, [sp, #16]
 8004ec0:	b9d8      	cbnz	r0, 8004efa <_svfiprintf_r+0xe6>
 8004ec2:	06d0      	lsls	r0, r2, #27
 8004ec4:	bf44      	itt	mi
 8004ec6:	2320      	movmi	r3, #32
 8004ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ecc:	0711      	lsls	r1, r2, #28
 8004ece:	bf44      	itt	mi
 8004ed0:	232b      	movmi	r3, #43	; 0x2b
 8004ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eda:	2b2a      	cmp	r3, #42	; 0x2a
 8004edc:	d015      	beq.n	8004f0a <_svfiprintf_r+0xf6>
 8004ede:	4654      	mov	r4, sl
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f04f 0c0a 	mov.w	ip, #10
 8004ee6:	9a07      	ldr	r2, [sp, #28]
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eee:	3b30      	subs	r3, #48	; 0x30
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d94e      	bls.n	8004f92 <_svfiprintf_r+0x17e>
 8004ef4:	b1b0      	cbz	r0, 8004f24 <_svfiprintf_r+0x110>
 8004ef6:	9207      	str	r2, [sp, #28]
 8004ef8:	e014      	b.n	8004f24 <_svfiprintf_r+0x110>
 8004efa:	eba0 0308 	sub.w	r3, r0, r8
 8004efe:	fa09 f303 	lsl.w	r3, r9, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	46a2      	mov	sl, r4
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	e7d2      	b.n	8004eb0 <_svfiprintf_r+0x9c>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	1d19      	adds	r1, r3, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	9103      	str	r1, [sp, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfbb      	ittet	lt
 8004f16:	425b      	neglt	r3, r3
 8004f18:	f042 0202 	orrlt.w	r2, r2, #2
 8004f1c:	9307      	strge	r3, [sp, #28]
 8004f1e:	9307      	strlt	r3, [sp, #28]
 8004f20:	bfb8      	it	lt
 8004f22:	9204      	strlt	r2, [sp, #16]
 8004f24:	7823      	ldrb	r3, [r4, #0]
 8004f26:	2b2e      	cmp	r3, #46	; 0x2e
 8004f28:	d10c      	bne.n	8004f44 <_svfiprintf_r+0x130>
 8004f2a:	7863      	ldrb	r3, [r4, #1]
 8004f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2e:	d135      	bne.n	8004f9c <_svfiprintf_r+0x188>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	3402      	adds	r4, #2
 8004f34:	1d1a      	adds	r2, r3, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	9203      	str	r2, [sp, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bfb8      	it	lt
 8004f3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005010 <_svfiprintf_r+0x1fc>
 8004f48:	2203      	movs	r2, #3
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	7821      	ldrb	r1, [r4, #0]
 8004f4e:	f7ff fac1 	bl	80044d4 <memchr>
 8004f52:	b140      	cbz	r0, 8004f66 <_svfiprintf_r+0x152>
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	3401      	adds	r4, #1
 8004f62:	4303      	orrs	r3, r0
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6a:	2206      	movs	r2, #6
 8004f6c:	4825      	ldr	r0, [pc, #148]	; (8005004 <_svfiprintf_r+0x1f0>)
 8004f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f72:	f7ff faaf 	bl	80044d4 <memchr>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d038      	beq.n	8004fec <_svfiprintf_r+0x1d8>
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <_svfiprintf_r+0x1f4>)
 8004f7c:	bb1b      	cbnz	r3, 8004fc6 <_svfiprintf_r+0x1b2>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	3307      	adds	r3, #7
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	3308      	adds	r3, #8
 8004f88:	9303      	str	r3, [sp, #12]
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	4433      	add	r3, r6
 8004f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f90:	e767      	b.n	8004e62 <_svfiprintf_r+0x4e>
 8004f92:	460c      	mov	r4, r1
 8004f94:	2001      	movs	r0, #1
 8004f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f9a:	e7a5      	b.n	8004ee8 <_svfiprintf_r+0xd4>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 0c0a 	mov.w	ip, #10
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	3401      	adds	r4, #1
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fae:	3a30      	subs	r2, #48	; 0x30
 8004fb0:	2a09      	cmp	r2, #9
 8004fb2:	d903      	bls.n	8004fbc <_svfiprintf_r+0x1a8>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0c5      	beq.n	8004f44 <_svfiprintf_r+0x130>
 8004fb8:	9105      	str	r1, [sp, #20]
 8004fba:	e7c3      	b.n	8004f44 <_svfiprintf_r+0x130>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc4:	e7f0      	b.n	8004fa8 <_svfiprintf_r+0x194>
 8004fc6:	ab03      	add	r3, sp, #12
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462a      	mov	r2, r5
 8004fcc:	4638      	mov	r0, r7
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <_svfiprintf_r+0x1f8>)
 8004fd0:	a904      	add	r1, sp, #16
 8004fd2:	f7fe f815 	bl	8003000 <_printf_float>
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	4606      	mov	r6, r0
 8004fda:	d1d6      	bne.n	8004f8a <_svfiprintf_r+0x176>
 8004fdc:	89ab      	ldrh	r3, [r5, #12]
 8004fde:	065b      	lsls	r3, r3, #25
 8004fe0:	f53f af2c 	bmi.w	8004e3c <_svfiprintf_r+0x28>
 8004fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe6:	b01d      	add	sp, #116	; 0x74
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <_svfiprintf_r+0x1f8>)
 8004ff6:	a904      	add	r1, sp, #16
 8004ff8:	f7fe fa9e 	bl	8003538 <_printf_i>
 8004ffc:	e7eb      	b.n	8004fd6 <_svfiprintf_r+0x1c2>
 8004ffe:	bf00      	nop
 8005000:	0800603c 	.word	0x0800603c
 8005004:	08006046 	.word	0x08006046
 8005008:	08003001 	.word	0x08003001
 800500c:	08004d5d 	.word	0x08004d5d
 8005010:	08006042 	.word	0x08006042

08005014 <_sbrk_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	2300      	movs	r3, #0
 8005018:	4d05      	ldr	r5, [pc, #20]	; (8005030 <_sbrk_r+0x1c>)
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fc fb70 	bl	8001704 <_sbrk>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_sbrk_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_sbrk_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000664 	.word	0x20000664

08005034 <__assert_func>:
 8005034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005036:	4614      	mov	r4, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <__assert_func+0x2c>)
 800503c:	4605      	mov	r5, r0
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68d8      	ldr	r0, [r3, #12]
 8005042:	b14c      	cbz	r4, 8005058 <__assert_func+0x24>
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <__assert_func+0x30>)
 8005046:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800504a:	9100      	str	r1, [sp, #0]
 800504c:	462b      	mov	r3, r5
 800504e:	4906      	ldr	r1, [pc, #24]	; (8005068 <__assert_func+0x34>)
 8005050:	f000 f80e 	bl	8005070 <fiprintf>
 8005054:	f000 faa2 	bl	800559c <abort>
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <__assert_func+0x38>)
 800505a:	461c      	mov	r4, r3
 800505c:	e7f3      	b.n	8005046 <__assert_func+0x12>
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c
 8005064:	0800604d 	.word	0x0800604d
 8005068:	0800605a 	.word	0x0800605a
 800506c:	08006088 	.word	0x08006088

08005070 <fiprintf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	b503      	push	{r0, r1, lr}
 8005074:	4601      	mov	r1, r0
 8005076:	ab03      	add	r3, sp, #12
 8005078:	4805      	ldr	r0, [pc, #20]	; (8005090 <fiprintf+0x20>)
 800507a:	f853 2b04 	ldr.w	r2, [r3], #4
 800507e:	6800      	ldr	r0, [r0, #0]
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	f000 f88d 	bl	80051a0 <_vfiprintf_r>
 8005086:	b002      	add	sp, #8
 8005088:	f85d eb04 	ldr.w	lr, [sp], #4
 800508c:	b003      	add	sp, #12
 800508e:	4770      	bx	lr
 8005090:	2000000c 	.word	0x2000000c

08005094 <__ascii_mbtowc>:
 8005094:	b082      	sub	sp, #8
 8005096:	b901      	cbnz	r1, 800509a <__ascii_mbtowc+0x6>
 8005098:	a901      	add	r1, sp, #4
 800509a:	b142      	cbz	r2, 80050ae <__ascii_mbtowc+0x1a>
 800509c:	b14b      	cbz	r3, 80050b2 <__ascii_mbtowc+0x1e>
 800509e:	7813      	ldrb	r3, [r2, #0]
 80050a0:	600b      	str	r3, [r1, #0]
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	1e10      	subs	r0, r2, #0
 80050a6:	bf18      	it	ne
 80050a8:	2001      	movne	r0, #1
 80050aa:	b002      	add	sp, #8
 80050ac:	4770      	bx	lr
 80050ae:	4610      	mov	r0, r2
 80050b0:	e7fb      	b.n	80050aa <__ascii_mbtowc+0x16>
 80050b2:	f06f 0001 	mvn.w	r0, #1
 80050b6:	e7f8      	b.n	80050aa <__ascii_mbtowc+0x16>

080050b8 <memmove>:
 80050b8:	4288      	cmp	r0, r1
 80050ba:	b510      	push	{r4, lr}
 80050bc:	eb01 0402 	add.w	r4, r1, r2
 80050c0:	d902      	bls.n	80050c8 <memmove+0x10>
 80050c2:	4284      	cmp	r4, r0
 80050c4:	4623      	mov	r3, r4
 80050c6:	d807      	bhi.n	80050d8 <memmove+0x20>
 80050c8:	1e43      	subs	r3, r0, #1
 80050ca:	42a1      	cmp	r1, r4
 80050cc:	d008      	beq.n	80050e0 <memmove+0x28>
 80050ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d6:	e7f8      	b.n	80050ca <memmove+0x12>
 80050d8:	4601      	mov	r1, r0
 80050da:	4402      	add	r2, r0
 80050dc:	428a      	cmp	r2, r1
 80050de:	d100      	bne.n	80050e2 <memmove+0x2a>
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ea:	e7f7      	b.n	80050dc <memmove+0x24>

080050ec <__malloc_lock>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__malloc_lock+0x8>)
 80050ee:	f000 bc15 	b.w	800591c <__retarget_lock_acquire_recursive>
 80050f2:	bf00      	nop
 80050f4:	2000066c 	.word	0x2000066c

080050f8 <__malloc_unlock>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__malloc_unlock+0x8>)
 80050fa:	f000 bc10 	b.w	800591e <__retarget_lock_release_recursive>
 80050fe:	bf00      	nop
 8005100:	2000066c 	.word	0x2000066c

08005104 <_realloc_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	4607      	mov	r7, r0
 8005108:	4614      	mov	r4, r2
 800510a:	460e      	mov	r6, r1
 800510c:	b921      	cbnz	r1, 8005118 <_realloc_r+0x14>
 800510e:	4611      	mov	r1, r2
 8005110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005114:	f7ff bdc8 	b.w	8004ca8 <_malloc_r>
 8005118:	b922      	cbnz	r2, 8005124 <_realloc_r+0x20>
 800511a:	f7ff fd79 	bl	8004c10 <_free_r>
 800511e:	4625      	mov	r5, r4
 8005120:	4628      	mov	r0, r5
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	f000 fc60 	bl	80059e8 <_malloc_usable_size_r>
 8005128:	42a0      	cmp	r0, r4
 800512a:	d20f      	bcs.n	800514c <_realloc_r+0x48>
 800512c:	4621      	mov	r1, r4
 800512e:	4638      	mov	r0, r7
 8005130:	f7ff fdba 	bl	8004ca8 <_malloc_r>
 8005134:	4605      	mov	r5, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	d0f2      	beq.n	8005120 <_realloc_r+0x1c>
 800513a:	4631      	mov	r1, r6
 800513c:	4622      	mov	r2, r4
 800513e:	f7fd feab 	bl	8002e98 <memcpy>
 8005142:	4631      	mov	r1, r6
 8005144:	4638      	mov	r0, r7
 8005146:	f7ff fd63 	bl	8004c10 <_free_r>
 800514a:	e7e9      	b.n	8005120 <_realloc_r+0x1c>
 800514c:	4635      	mov	r5, r6
 800514e:	e7e7      	b.n	8005120 <_realloc_r+0x1c>

08005150 <__sfputc_r>:
 8005150:	6893      	ldr	r3, [r2, #8]
 8005152:	b410      	push	{r4}
 8005154:	3b01      	subs	r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	6093      	str	r3, [r2, #8]
 800515a:	da07      	bge.n	800516c <__sfputc_r+0x1c>
 800515c:	6994      	ldr	r4, [r2, #24]
 800515e:	42a3      	cmp	r3, r4
 8005160:	db01      	blt.n	8005166 <__sfputc_r+0x16>
 8005162:	290a      	cmp	r1, #10
 8005164:	d102      	bne.n	800516c <__sfputc_r+0x1c>
 8005166:	bc10      	pop	{r4}
 8005168:	f000 b94a 	b.w	8005400 <__swbuf_r>
 800516c:	6813      	ldr	r3, [r2, #0]
 800516e:	1c58      	adds	r0, r3, #1
 8005170:	6010      	str	r0, [r2, #0]
 8005172:	7019      	strb	r1, [r3, #0]
 8005174:	4608      	mov	r0, r1
 8005176:	bc10      	pop	{r4}
 8005178:	4770      	bx	lr

0800517a <__sfputs_r>:
 800517a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	4614      	mov	r4, r2
 8005182:	18d5      	adds	r5, r2, r3
 8005184:	42ac      	cmp	r4, r5
 8005186:	d101      	bne.n	800518c <__sfputs_r+0x12>
 8005188:	2000      	movs	r0, #0
 800518a:	e007      	b.n	800519c <__sfputs_r+0x22>
 800518c:	463a      	mov	r2, r7
 800518e:	4630      	mov	r0, r6
 8005190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005194:	f7ff ffdc 	bl	8005150 <__sfputc_r>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d1f3      	bne.n	8005184 <__sfputs_r+0xa>
 800519c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051a0 <_vfiprintf_r>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	460d      	mov	r5, r1
 80051a6:	4614      	mov	r4, r2
 80051a8:	4698      	mov	r8, r3
 80051aa:	4606      	mov	r6, r0
 80051ac:	b09d      	sub	sp, #116	; 0x74
 80051ae:	b118      	cbz	r0, 80051b8 <_vfiprintf_r+0x18>
 80051b0:	6983      	ldr	r3, [r0, #24]
 80051b2:	b90b      	cbnz	r3, 80051b8 <_vfiprintf_r+0x18>
 80051b4:	f000 fb14 	bl	80057e0 <__sinit>
 80051b8:	4b89      	ldr	r3, [pc, #548]	; (80053e0 <_vfiprintf_r+0x240>)
 80051ba:	429d      	cmp	r5, r3
 80051bc:	d11b      	bne.n	80051f6 <_vfiprintf_r+0x56>
 80051be:	6875      	ldr	r5, [r6, #4]
 80051c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	d405      	bmi.n	80051d2 <_vfiprintf_r+0x32>
 80051c6:	89ab      	ldrh	r3, [r5, #12]
 80051c8:	059a      	lsls	r2, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_vfiprintf_r+0x32>
 80051cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ce:	f000 fba5 	bl	800591c <__retarget_lock_acquire_recursive>
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	071b      	lsls	r3, r3, #28
 80051d6:	d501      	bpl.n	80051dc <_vfiprintf_r+0x3c>
 80051d8:	692b      	ldr	r3, [r5, #16]
 80051da:	b9eb      	cbnz	r3, 8005218 <_vfiprintf_r+0x78>
 80051dc:	4629      	mov	r1, r5
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 f96e 	bl	80054c0 <__swsetup_r>
 80051e4:	b1c0      	cbz	r0, 8005218 <_vfiprintf_r+0x78>
 80051e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051e8:	07dc      	lsls	r4, r3, #31
 80051ea:	d50e      	bpl.n	800520a <_vfiprintf_r+0x6a>
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	b01d      	add	sp, #116	; 0x74
 80051f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f6:	4b7b      	ldr	r3, [pc, #492]	; (80053e4 <_vfiprintf_r+0x244>)
 80051f8:	429d      	cmp	r5, r3
 80051fa:	d101      	bne.n	8005200 <_vfiprintf_r+0x60>
 80051fc:	68b5      	ldr	r5, [r6, #8]
 80051fe:	e7df      	b.n	80051c0 <_vfiprintf_r+0x20>
 8005200:	4b79      	ldr	r3, [pc, #484]	; (80053e8 <_vfiprintf_r+0x248>)
 8005202:	429d      	cmp	r5, r3
 8005204:	bf08      	it	eq
 8005206:	68f5      	ldreq	r5, [r6, #12]
 8005208:	e7da      	b.n	80051c0 <_vfiprintf_r+0x20>
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	0598      	lsls	r0, r3, #22
 800520e:	d4ed      	bmi.n	80051ec <_vfiprintf_r+0x4c>
 8005210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005212:	f000 fb84 	bl	800591e <__retarget_lock_release_recursive>
 8005216:	e7e9      	b.n	80051ec <_vfiprintf_r+0x4c>
 8005218:	2300      	movs	r3, #0
 800521a:	9309      	str	r3, [sp, #36]	; 0x24
 800521c:	2320      	movs	r3, #32
 800521e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005222:	2330      	movs	r3, #48	; 0x30
 8005224:	f04f 0901 	mov.w	r9, #1
 8005228:	f8cd 800c 	str.w	r8, [sp, #12]
 800522c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80053ec <_vfiprintf_r+0x24c>
 8005230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005234:	4623      	mov	r3, r4
 8005236:	469a      	mov	sl, r3
 8005238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800523c:	b10a      	cbz	r2, 8005242 <_vfiprintf_r+0xa2>
 800523e:	2a25      	cmp	r2, #37	; 0x25
 8005240:	d1f9      	bne.n	8005236 <_vfiprintf_r+0x96>
 8005242:	ebba 0b04 	subs.w	fp, sl, r4
 8005246:	d00b      	beq.n	8005260 <_vfiprintf_r+0xc0>
 8005248:	465b      	mov	r3, fp
 800524a:	4622      	mov	r2, r4
 800524c:	4629      	mov	r1, r5
 800524e:	4630      	mov	r0, r6
 8005250:	f7ff ff93 	bl	800517a <__sfputs_r>
 8005254:	3001      	adds	r0, #1
 8005256:	f000 80aa 	beq.w	80053ae <_vfiprintf_r+0x20e>
 800525a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525c:	445a      	add	r2, fp
 800525e:	9209      	str	r2, [sp, #36]	; 0x24
 8005260:	f89a 3000 	ldrb.w	r3, [sl]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80a2 	beq.w	80053ae <_vfiprintf_r+0x20e>
 800526a:	2300      	movs	r3, #0
 800526c:	f04f 32ff 	mov.w	r2, #4294967295
 8005270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005274:	f10a 0a01 	add.w	sl, sl, #1
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	9307      	str	r3, [sp, #28]
 800527c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005280:	931a      	str	r3, [sp, #104]	; 0x68
 8005282:	4654      	mov	r4, sl
 8005284:	2205      	movs	r2, #5
 8005286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528a:	4858      	ldr	r0, [pc, #352]	; (80053ec <_vfiprintf_r+0x24c>)
 800528c:	f7ff f922 	bl	80044d4 <memchr>
 8005290:	9a04      	ldr	r2, [sp, #16]
 8005292:	b9d8      	cbnz	r0, 80052cc <_vfiprintf_r+0x12c>
 8005294:	06d1      	lsls	r1, r2, #27
 8005296:	bf44      	itt	mi
 8005298:	2320      	movmi	r3, #32
 800529a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800529e:	0713      	lsls	r3, r2, #28
 80052a0:	bf44      	itt	mi
 80052a2:	232b      	movmi	r3, #43	; 0x2b
 80052a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a8:	f89a 3000 	ldrb.w	r3, [sl]
 80052ac:	2b2a      	cmp	r3, #42	; 0x2a
 80052ae:	d015      	beq.n	80052dc <_vfiprintf_r+0x13c>
 80052b0:	4654      	mov	r4, sl
 80052b2:	2000      	movs	r0, #0
 80052b4:	f04f 0c0a 	mov.w	ip, #10
 80052b8:	9a07      	ldr	r2, [sp, #28]
 80052ba:	4621      	mov	r1, r4
 80052bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c0:	3b30      	subs	r3, #48	; 0x30
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	d94e      	bls.n	8005364 <_vfiprintf_r+0x1c4>
 80052c6:	b1b0      	cbz	r0, 80052f6 <_vfiprintf_r+0x156>
 80052c8:	9207      	str	r2, [sp, #28]
 80052ca:	e014      	b.n	80052f6 <_vfiprintf_r+0x156>
 80052cc:	eba0 0308 	sub.w	r3, r0, r8
 80052d0:	fa09 f303 	lsl.w	r3, r9, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	46a2      	mov	sl, r4
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	e7d2      	b.n	8005282 <_vfiprintf_r+0xe2>
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	1d19      	adds	r1, r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	9103      	str	r1, [sp, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bfbb      	ittet	lt
 80052e8:	425b      	neglt	r3, r3
 80052ea:	f042 0202 	orrlt.w	r2, r2, #2
 80052ee:	9307      	strge	r3, [sp, #28]
 80052f0:	9307      	strlt	r3, [sp, #28]
 80052f2:	bfb8      	it	lt
 80052f4:	9204      	strlt	r2, [sp, #16]
 80052f6:	7823      	ldrb	r3, [r4, #0]
 80052f8:	2b2e      	cmp	r3, #46	; 0x2e
 80052fa:	d10c      	bne.n	8005316 <_vfiprintf_r+0x176>
 80052fc:	7863      	ldrb	r3, [r4, #1]
 80052fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005300:	d135      	bne.n	800536e <_vfiprintf_r+0x1ce>
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	3402      	adds	r4, #2
 8005306:	1d1a      	adds	r2, r3, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	9203      	str	r2, [sp, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	bfb8      	it	lt
 8005310:	f04f 33ff 	movlt.w	r3, #4294967295
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053fc <_vfiprintf_r+0x25c>
 800531a:	2203      	movs	r2, #3
 800531c:	4650      	mov	r0, sl
 800531e:	7821      	ldrb	r1, [r4, #0]
 8005320:	f7ff f8d8 	bl	80044d4 <memchr>
 8005324:	b140      	cbz	r0, 8005338 <_vfiprintf_r+0x198>
 8005326:	2340      	movs	r3, #64	; 0x40
 8005328:	eba0 000a 	sub.w	r0, r0, sl
 800532c:	fa03 f000 	lsl.w	r0, r3, r0
 8005330:	9b04      	ldr	r3, [sp, #16]
 8005332:	3401      	adds	r4, #1
 8005334:	4303      	orrs	r3, r0
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533c:	2206      	movs	r2, #6
 800533e:	482c      	ldr	r0, [pc, #176]	; (80053f0 <_vfiprintf_r+0x250>)
 8005340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005344:	f7ff f8c6 	bl	80044d4 <memchr>
 8005348:	2800      	cmp	r0, #0
 800534a:	d03f      	beq.n	80053cc <_vfiprintf_r+0x22c>
 800534c:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <_vfiprintf_r+0x254>)
 800534e:	bb1b      	cbnz	r3, 8005398 <_vfiprintf_r+0x1f8>
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	3307      	adds	r3, #7
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	3308      	adds	r3, #8
 800535a:	9303      	str	r3, [sp, #12]
 800535c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535e:	443b      	add	r3, r7
 8005360:	9309      	str	r3, [sp, #36]	; 0x24
 8005362:	e767      	b.n	8005234 <_vfiprintf_r+0x94>
 8005364:	460c      	mov	r4, r1
 8005366:	2001      	movs	r0, #1
 8005368:	fb0c 3202 	mla	r2, ip, r2, r3
 800536c:	e7a5      	b.n	80052ba <_vfiprintf_r+0x11a>
 800536e:	2300      	movs	r3, #0
 8005370:	f04f 0c0a 	mov.w	ip, #10
 8005374:	4619      	mov	r1, r3
 8005376:	3401      	adds	r4, #1
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	4620      	mov	r0, r4
 800537c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005380:	3a30      	subs	r2, #48	; 0x30
 8005382:	2a09      	cmp	r2, #9
 8005384:	d903      	bls.n	800538e <_vfiprintf_r+0x1ee>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0c5      	beq.n	8005316 <_vfiprintf_r+0x176>
 800538a:	9105      	str	r1, [sp, #20]
 800538c:	e7c3      	b.n	8005316 <_vfiprintf_r+0x176>
 800538e:	4604      	mov	r4, r0
 8005390:	2301      	movs	r3, #1
 8005392:	fb0c 2101 	mla	r1, ip, r1, r2
 8005396:	e7f0      	b.n	800537a <_vfiprintf_r+0x1da>
 8005398:	ab03      	add	r3, sp, #12
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	462a      	mov	r2, r5
 800539e:	4630      	mov	r0, r6
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <_vfiprintf_r+0x258>)
 80053a2:	a904      	add	r1, sp, #16
 80053a4:	f7fd fe2c 	bl	8003000 <_printf_float>
 80053a8:	4607      	mov	r7, r0
 80053aa:	1c78      	adds	r0, r7, #1
 80053ac:	d1d6      	bne.n	800535c <_vfiprintf_r+0x1bc>
 80053ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b0:	07d9      	lsls	r1, r3, #31
 80053b2:	d405      	bmi.n	80053c0 <_vfiprintf_r+0x220>
 80053b4:	89ab      	ldrh	r3, [r5, #12]
 80053b6:	059a      	lsls	r2, r3, #22
 80053b8:	d402      	bmi.n	80053c0 <_vfiprintf_r+0x220>
 80053ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053bc:	f000 faaf 	bl	800591e <__retarget_lock_release_recursive>
 80053c0:	89ab      	ldrh	r3, [r5, #12]
 80053c2:	065b      	lsls	r3, r3, #25
 80053c4:	f53f af12 	bmi.w	80051ec <_vfiprintf_r+0x4c>
 80053c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ca:	e711      	b.n	80051f0 <_vfiprintf_r+0x50>
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	462a      	mov	r2, r5
 80053d2:	4630      	mov	r0, r6
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <_vfiprintf_r+0x258>)
 80053d6:	a904      	add	r1, sp, #16
 80053d8:	f7fe f8ae 	bl	8003538 <_printf_i>
 80053dc:	e7e4      	b.n	80053a8 <_vfiprintf_r+0x208>
 80053de:	bf00      	nop
 80053e0:	080061b4 	.word	0x080061b4
 80053e4:	080061d4 	.word	0x080061d4
 80053e8:	08006194 	.word	0x08006194
 80053ec:	0800603c 	.word	0x0800603c
 80053f0:	08006046 	.word	0x08006046
 80053f4:	08003001 	.word	0x08003001
 80053f8:	0800517b 	.word	0x0800517b
 80053fc:	08006042 	.word	0x08006042

08005400 <__swbuf_r>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	460e      	mov	r6, r1
 8005404:	4614      	mov	r4, r2
 8005406:	4605      	mov	r5, r0
 8005408:	b118      	cbz	r0, 8005412 <__swbuf_r+0x12>
 800540a:	6983      	ldr	r3, [r0, #24]
 800540c:	b90b      	cbnz	r3, 8005412 <__swbuf_r+0x12>
 800540e:	f000 f9e7 	bl	80057e0 <__sinit>
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <__swbuf_r+0x98>)
 8005414:	429c      	cmp	r4, r3
 8005416:	d12b      	bne.n	8005470 <__swbuf_r+0x70>
 8005418:	686c      	ldr	r4, [r5, #4]
 800541a:	69a3      	ldr	r3, [r4, #24]
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	071a      	lsls	r2, r3, #28
 8005422:	d52f      	bpl.n	8005484 <__swbuf_r+0x84>
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	b36b      	cbz	r3, 8005484 <__swbuf_r+0x84>
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	b2f6      	uxtb	r6, r6
 800542e:	1ac0      	subs	r0, r0, r3
 8005430:	6963      	ldr	r3, [r4, #20]
 8005432:	4637      	mov	r7, r6
 8005434:	4283      	cmp	r3, r0
 8005436:	dc04      	bgt.n	8005442 <__swbuf_r+0x42>
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f93c 	bl	80056b8 <_fflush_r>
 8005440:	bb30      	cbnz	r0, 8005490 <__swbuf_r+0x90>
 8005442:	68a3      	ldr	r3, [r4, #8]
 8005444:	3001      	adds	r0, #1
 8005446:	3b01      	subs	r3, #1
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	6022      	str	r2, [r4, #0]
 8005450:	701e      	strb	r6, [r3, #0]
 8005452:	6963      	ldr	r3, [r4, #20]
 8005454:	4283      	cmp	r3, r0
 8005456:	d004      	beq.n	8005462 <__swbuf_r+0x62>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	07db      	lsls	r3, r3, #31
 800545c:	d506      	bpl.n	800546c <__swbuf_r+0x6c>
 800545e:	2e0a      	cmp	r6, #10
 8005460:	d104      	bne.n	800546c <__swbuf_r+0x6c>
 8005462:	4621      	mov	r1, r4
 8005464:	4628      	mov	r0, r5
 8005466:	f000 f927 	bl	80056b8 <_fflush_r>
 800546a:	b988      	cbnz	r0, 8005490 <__swbuf_r+0x90>
 800546c:	4638      	mov	r0, r7
 800546e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <__swbuf_r+0x9c>)
 8005472:	429c      	cmp	r4, r3
 8005474:	d101      	bne.n	800547a <__swbuf_r+0x7a>
 8005476:	68ac      	ldr	r4, [r5, #8]
 8005478:	e7cf      	b.n	800541a <__swbuf_r+0x1a>
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <__swbuf_r+0xa0>)
 800547c:	429c      	cmp	r4, r3
 800547e:	bf08      	it	eq
 8005480:	68ec      	ldreq	r4, [r5, #12]
 8005482:	e7ca      	b.n	800541a <__swbuf_r+0x1a>
 8005484:	4621      	mov	r1, r4
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f81a 	bl	80054c0 <__swsetup_r>
 800548c:	2800      	cmp	r0, #0
 800548e:	d0cb      	beq.n	8005428 <__swbuf_r+0x28>
 8005490:	f04f 37ff 	mov.w	r7, #4294967295
 8005494:	e7ea      	b.n	800546c <__swbuf_r+0x6c>
 8005496:	bf00      	nop
 8005498:	080061b4 	.word	0x080061b4
 800549c:	080061d4 	.word	0x080061d4
 80054a0:	08006194 	.word	0x08006194

080054a4 <__ascii_wctomb>:
 80054a4:	4603      	mov	r3, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	b141      	cbz	r1, 80054bc <__ascii_wctomb+0x18>
 80054aa:	2aff      	cmp	r2, #255	; 0xff
 80054ac:	d904      	bls.n	80054b8 <__ascii_wctomb+0x14>
 80054ae:	228a      	movs	r2, #138	; 0x8a
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	4770      	bx	lr
 80054b8:	2001      	movs	r0, #1
 80054ba:	700a      	strb	r2, [r1, #0]
 80054bc:	4770      	bx	lr
	...

080054c0 <__swsetup_r>:
 80054c0:	4b32      	ldr	r3, [pc, #200]	; (800558c <__swsetup_r+0xcc>)
 80054c2:	b570      	push	{r4, r5, r6, lr}
 80054c4:	681d      	ldr	r5, [r3, #0]
 80054c6:	4606      	mov	r6, r0
 80054c8:	460c      	mov	r4, r1
 80054ca:	b125      	cbz	r5, 80054d6 <__swsetup_r+0x16>
 80054cc:	69ab      	ldr	r3, [r5, #24]
 80054ce:	b913      	cbnz	r3, 80054d6 <__swsetup_r+0x16>
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 f985 	bl	80057e0 <__sinit>
 80054d6:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <__swsetup_r+0xd0>)
 80054d8:	429c      	cmp	r4, r3
 80054da:	d10f      	bne.n	80054fc <__swsetup_r+0x3c>
 80054dc:	686c      	ldr	r4, [r5, #4]
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054e4:	0719      	lsls	r1, r3, #28
 80054e6:	d42c      	bmi.n	8005542 <__swsetup_r+0x82>
 80054e8:	06dd      	lsls	r5, r3, #27
 80054ea:	d411      	bmi.n	8005510 <__swsetup_r+0x50>
 80054ec:	2309      	movs	r3, #9
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	81a3      	strh	r3, [r4, #12]
 80054fa:	e03e      	b.n	800557a <__swsetup_r+0xba>
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <__swsetup_r+0xd4>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	d101      	bne.n	8005506 <__swsetup_r+0x46>
 8005502:	68ac      	ldr	r4, [r5, #8]
 8005504:	e7eb      	b.n	80054de <__swsetup_r+0x1e>
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <__swsetup_r+0xd8>)
 8005508:	429c      	cmp	r4, r3
 800550a:	bf08      	it	eq
 800550c:	68ec      	ldreq	r4, [r5, #12]
 800550e:	e7e6      	b.n	80054de <__swsetup_r+0x1e>
 8005510:	0758      	lsls	r0, r3, #29
 8005512:	d512      	bpl.n	800553a <__swsetup_r+0x7a>
 8005514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005516:	b141      	cbz	r1, 800552a <__swsetup_r+0x6a>
 8005518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800551c:	4299      	cmp	r1, r3
 800551e:	d002      	beq.n	8005526 <__swsetup_r+0x66>
 8005520:	4630      	mov	r0, r6
 8005522:	f7ff fb75 	bl	8004c10 <_free_r>
 8005526:	2300      	movs	r3, #0
 8005528:	6363      	str	r3, [r4, #52]	; 0x34
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	2300      	movs	r3, #0
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	6923      	ldr	r3, [r4, #16]
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f043 0308 	orr.w	r3, r3, #8
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	b94b      	cbnz	r3, 800555a <__swsetup_r+0x9a>
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800554c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005550:	d003      	beq.n	800555a <__swsetup_r+0x9a>
 8005552:	4621      	mov	r1, r4
 8005554:	4630      	mov	r0, r6
 8005556:	f000 fa07 	bl	8005968 <__smakebuf_r>
 800555a:	89a0      	ldrh	r0, [r4, #12]
 800555c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005560:	f010 0301 	ands.w	r3, r0, #1
 8005564:	d00a      	beq.n	800557c <__swsetup_r+0xbc>
 8005566:	2300      	movs	r3, #0
 8005568:	60a3      	str	r3, [r4, #8]
 800556a:	6963      	ldr	r3, [r4, #20]
 800556c:	425b      	negs	r3, r3
 800556e:	61a3      	str	r3, [r4, #24]
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	b943      	cbnz	r3, 8005586 <__swsetup_r+0xc6>
 8005574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005578:	d1ba      	bne.n	80054f0 <__swsetup_r+0x30>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	0781      	lsls	r1, r0, #30
 800557e:	bf58      	it	pl
 8005580:	6963      	ldrpl	r3, [r4, #20]
 8005582:	60a3      	str	r3, [r4, #8]
 8005584:	e7f4      	b.n	8005570 <__swsetup_r+0xb0>
 8005586:	2000      	movs	r0, #0
 8005588:	e7f7      	b.n	800557a <__swsetup_r+0xba>
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c
 8005590:	080061b4 	.word	0x080061b4
 8005594:	080061d4 	.word	0x080061d4
 8005598:	08006194 	.word	0x08006194

0800559c <abort>:
 800559c:	2006      	movs	r0, #6
 800559e:	b508      	push	{r3, lr}
 80055a0:	f000 fa52 	bl	8005a48 <raise>
 80055a4:	2001      	movs	r0, #1
 80055a6:	f7fc f839 	bl	800161c <_exit>
	...

080055ac <__sflush_r>:
 80055ac:	898a      	ldrh	r2, [r1, #12]
 80055ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b2:	4605      	mov	r5, r0
 80055b4:	0710      	lsls	r0, r2, #28
 80055b6:	460c      	mov	r4, r1
 80055b8:	d458      	bmi.n	800566c <__sflush_r+0xc0>
 80055ba:	684b      	ldr	r3, [r1, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dc05      	bgt.n	80055cc <__sflush_r+0x20>
 80055c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	dc02      	bgt.n	80055cc <__sflush_r+0x20>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	d0f9      	beq.n	80055c6 <__sflush_r+0x1a>
 80055d2:	2300      	movs	r3, #0
 80055d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055d8:	682f      	ldr	r7, [r5, #0]
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	d032      	beq.n	8005644 <__sflush_r+0x98>
 80055de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	075a      	lsls	r2, r3, #29
 80055e4:	d505      	bpl.n	80055f2 <__sflush_r+0x46>
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	1ac0      	subs	r0, r0, r3
 80055ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055ec:	b10b      	cbz	r3, 80055f2 <__sflush_r+0x46>
 80055ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	4602      	mov	r2, r0
 80055f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055f8:	4628      	mov	r0, r5
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	47b0      	blx	r6
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	d106      	bne.n	8005612 <__sflush_r+0x66>
 8005604:	6829      	ldr	r1, [r5, #0]
 8005606:	291d      	cmp	r1, #29
 8005608:	d82c      	bhi.n	8005664 <__sflush_r+0xb8>
 800560a:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <__sflush_r+0x108>)
 800560c:	40ca      	lsrs	r2, r1
 800560e:	07d6      	lsls	r6, r2, #31
 8005610:	d528      	bpl.n	8005664 <__sflush_r+0xb8>
 8005612:	2200      	movs	r2, #0
 8005614:	6062      	str	r2, [r4, #4]
 8005616:	6922      	ldr	r2, [r4, #16]
 8005618:	04d9      	lsls	r1, r3, #19
 800561a:	6022      	str	r2, [r4, #0]
 800561c:	d504      	bpl.n	8005628 <__sflush_r+0x7c>
 800561e:	1c42      	adds	r2, r0, #1
 8005620:	d101      	bne.n	8005626 <__sflush_r+0x7a>
 8005622:	682b      	ldr	r3, [r5, #0]
 8005624:	b903      	cbnz	r3, 8005628 <__sflush_r+0x7c>
 8005626:	6560      	str	r0, [r4, #84]	; 0x54
 8005628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800562a:	602f      	str	r7, [r5, #0]
 800562c:	2900      	cmp	r1, #0
 800562e:	d0ca      	beq.n	80055c6 <__sflush_r+0x1a>
 8005630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005634:	4299      	cmp	r1, r3
 8005636:	d002      	beq.n	800563e <__sflush_r+0x92>
 8005638:	4628      	mov	r0, r5
 800563a:	f7ff fae9 	bl	8004c10 <_free_r>
 800563e:	2000      	movs	r0, #0
 8005640:	6360      	str	r0, [r4, #52]	; 0x34
 8005642:	e7c1      	b.n	80055c8 <__sflush_r+0x1c>
 8005644:	6a21      	ldr	r1, [r4, #32]
 8005646:	2301      	movs	r3, #1
 8005648:	4628      	mov	r0, r5
 800564a:	47b0      	blx	r6
 800564c:	1c41      	adds	r1, r0, #1
 800564e:	d1c7      	bne.n	80055e0 <__sflush_r+0x34>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0c4      	beq.n	80055e0 <__sflush_r+0x34>
 8005656:	2b1d      	cmp	r3, #29
 8005658:	d001      	beq.n	800565e <__sflush_r+0xb2>
 800565a:	2b16      	cmp	r3, #22
 800565c:	d101      	bne.n	8005662 <__sflush_r+0xb6>
 800565e:	602f      	str	r7, [r5, #0]
 8005660:	e7b1      	b.n	80055c6 <__sflush_r+0x1a>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005668:	81a3      	strh	r3, [r4, #12]
 800566a:	e7ad      	b.n	80055c8 <__sflush_r+0x1c>
 800566c:	690f      	ldr	r7, [r1, #16]
 800566e:	2f00      	cmp	r7, #0
 8005670:	d0a9      	beq.n	80055c6 <__sflush_r+0x1a>
 8005672:	0793      	lsls	r3, r2, #30
 8005674:	bf18      	it	ne
 8005676:	2300      	movne	r3, #0
 8005678:	680e      	ldr	r6, [r1, #0]
 800567a:	bf08      	it	eq
 800567c:	694b      	ldreq	r3, [r1, #20]
 800567e:	eba6 0807 	sub.w	r8, r6, r7
 8005682:	600f      	str	r7, [r1, #0]
 8005684:	608b      	str	r3, [r1, #8]
 8005686:	f1b8 0f00 	cmp.w	r8, #0
 800568a:	dd9c      	ble.n	80055c6 <__sflush_r+0x1a>
 800568c:	4643      	mov	r3, r8
 800568e:	463a      	mov	r2, r7
 8005690:	4628      	mov	r0, r5
 8005692:	6a21      	ldr	r1, [r4, #32]
 8005694:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005696:	47b0      	blx	r6
 8005698:	2800      	cmp	r0, #0
 800569a:	dc06      	bgt.n	80056aa <__sflush_r+0xfe>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	f04f 30ff 	mov.w	r0, #4294967295
 80056a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a6:	81a3      	strh	r3, [r4, #12]
 80056a8:	e78e      	b.n	80055c8 <__sflush_r+0x1c>
 80056aa:	4407      	add	r7, r0
 80056ac:	eba8 0800 	sub.w	r8, r8, r0
 80056b0:	e7e9      	b.n	8005686 <__sflush_r+0xda>
 80056b2:	bf00      	nop
 80056b4:	20400001 	.word	0x20400001

080056b8 <_fflush_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	4605      	mov	r5, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	b913      	cbnz	r3, 80056c8 <_fflush_r+0x10>
 80056c2:	2500      	movs	r5, #0
 80056c4:	4628      	mov	r0, r5
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	b118      	cbz	r0, 80056d2 <_fflush_r+0x1a>
 80056ca:	6983      	ldr	r3, [r0, #24]
 80056cc:	b90b      	cbnz	r3, 80056d2 <_fflush_r+0x1a>
 80056ce:	f000 f887 	bl	80057e0 <__sinit>
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <_fflush_r+0x6c>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d11b      	bne.n	8005710 <_fflush_r+0x58>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <_fflush_r+0xa>
 80056e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056e4:	07d0      	lsls	r0, r2, #31
 80056e6:	d404      	bmi.n	80056f2 <_fflush_r+0x3a>
 80056e8:	0599      	lsls	r1, r3, #22
 80056ea:	d402      	bmi.n	80056f2 <_fflush_r+0x3a>
 80056ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ee:	f000 f915 	bl	800591c <__retarget_lock_acquire_recursive>
 80056f2:	4628      	mov	r0, r5
 80056f4:	4621      	mov	r1, r4
 80056f6:	f7ff ff59 	bl	80055ac <__sflush_r>
 80056fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056fc:	4605      	mov	r5, r0
 80056fe:	07da      	lsls	r2, r3, #31
 8005700:	d4e0      	bmi.n	80056c4 <_fflush_r+0xc>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	059b      	lsls	r3, r3, #22
 8005706:	d4dd      	bmi.n	80056c4 <_fflush_r+0xc>
 8005708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570a:	f000 f908 	bl	800591e <__retarget_lock_release_recursive>
 800570e:	e7d9      	b.n	80056c4 <_fflush_r+0xc>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_fflush_r+0x70>)
 8005712:	429c      	cmp	r4, r3
 8005714:	d101      	bne.n	800571a <_fflush_r+0x62>
 8005716:	68ac      	ldr	r4, [r5, #8]
 8005718:	e7df      	b.n	80056da <_fflush_r+0x22>
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <_fflush_r+0x74>)
 800571c:	429c      	cmp	r4, r3
 800571e:	bf08      	it	eq
 8005720:	68ec      	ldreq	r4, [r5, #12]
 8005722:	e7da      	b.n	80056da <_fflush_r+0x22>
 8005724:	080061b4 	.word	0x080061b4
 8005728:	080061d4 	.word	0x080061d4
 800572c:	08006194 	.word	0x08006194

08005730 <std>:
 8005730:	2300      	movs	r3, #0
 8005732:	b510      	push	{r4, lr}
 8005734:	4604      	mov	r4, r0
 8005736:	e9c0 3300 	strd	r3, r3, [r0]
 800573a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800573e:	6083      	str	r3, [r0, #8]
 8005740:	8181      	strh	r1, [r0, #12]
 8005742:	6643      	str	r3, [r0, #100]	; 0x64
 8005744:	81c2      	strh	r2, [r0, #14]
 8005746:	6183      	str	r3, [r0, #24]
 8005748:	4619      	mov	r1, r3
 800574a:	2208      	movs	r2, #8
 800574c:	305c      	adds	r0, #92	; 0x5c
 800574e:	f7fd fbb1 	bl	8002eb4 <memset>
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <std+0x38>)
 8005754:	6224      	str	r4, [r4, #32]
 8005756:	6263      	str	r3, [r4, #36]	; 0x24
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <std+0x3c>)
 800575a:	62a3      	str	r3, [r4, #40]	; 0x28
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <std+0x40>)
 800575e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <std+0x44>)
 8005762:	6323      	str	r3, [r4, #48]	; 0x30
 8005764:	bd10      	pop	{r4, pc}
 8005766:	bf00      	nop
 8005768:	08005a81 	.word	0x08005a81
 800576c:	08005aa3 	.word	0x08005aa3
 8005770:	08005adb 	.word	0x08005adb
 8005774:	08005aff 	.word	0x08005aff

08005778 <_cleanup_r>:
 8005778:	4901      	ldr	r1, [pc, #4]	; (8005780 <_cleanup_r+0x8>)
 800577a:	f000 b8af 	b.w	80058dc <_fwalk_reent>
 800577e:	bf00      	nop
 8005780:	080056b9 	.word	0x080056b9

08005784 <__sfmoreglue>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	2568      	movs	r5, #104	; 0x68
 8005788:	1e4a      	subs	r2, r1, #1
 800578a:	4355      	muls	r5, r2
 800578c:	460e      	mov	r6, r1
 800578e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005792:	f7ff fa89 	bl	8004ca8 <_malloc_r>
 8005796:	4604      	mov	r4, r0
 8005798:	b140      	cbz	r0, 80057ac <__sfmoreglue+0x28>
 800579a:	2100      	movs	r1, #0
 800579c:	e9c0 1600 	strd	r1, r6, [r0]
 80057a0:	300c      	adds	r0, #12
 80057a2:	60a0      	str	r0, [r4, #8]
 80057a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057a8:	f7fd fb84 	bl	8002eb4 <memset>
 80057ac:	4620      	mov	r0, r4
 80057ae:	bd70      	pop	{r4, r5, r6, pc}

080057b0 <__sfp_lock_acquire>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__sfp_lock_acquire+0x8>)
 80057b2:	f000 b8b3 	b.w	800591c <__retarget_lock_acquire_recursive>
 80057b6:	bf00      	nop
 80057b8:	20000670 	.word	0x20000670

080057bc <__sfp_lock_release>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__sfp_lock_release+0x8>)
 80057be:	f000 b8ae 	b.w	800591e <__retarget_lock_release_recursive>
 80057c2:	bf00      	nop
 80057c4:	20000670 	.word	0x20000670

080057c8 <__sinit_lock_acquire>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__sinit_lock_acquire+0x8>)
 80057ca:	f000 b8a7 	b.w	800591c <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	2000066b 	.word	0x2000066b

080057d4 <__sinit_lock_release>:
 80057d4:	4801      	ldr	r0, [pc, #4]	; (80057dc <__sinit_lock_release+0x8>)
 80057d6:	f000 b8a2 	b.w	800591e <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	2000066b 	.word	0x2000066b

080057e0 <__sinit>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	4604      	mov	r4, r0
 80057e4:	f7ff fff0 	bl	80057c8 <__sinit_lock_acquire>
 80057e8:	69a3      	ldr	r3, [r4, #24]
 80057ea:	b11b      	cbz	r3, 80057f4 <__sinit+0x14>
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f0:	f7ff bff0 	b.w	80057d4 <__sinit_lock_release>
 80057f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057f8:	6523      	str	r3, [r4, #80]	; 0x50
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <__sinit+0x68>)
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <__sinit+0x6c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	62a2      	str	r2, [r4, #40]	; 0x28
 8005802:	42a3      	cmp	r3, r4
 8005804:	bf08      	it	eq
 8005806:	2301      	moveq	r3, #1
 8005808:	4620      	mov	r0, r4
 800580a:	bf08      	it	eq
 800580c:	61a3      	streq	r3, [r4, #24]
 800580e:	f000 f81f 	bl	8005850 <__sfp>
 8005812:	6060      	str	r0, [r4, #4]
 8005814:	4620      	mov	r0, r4
 8005816:	f000 f81b 	bl	8005850 <__sfp>
 800581a:	60a0      	str	r0, [r4, #8]
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f817 	bl	8005850 <__sfp>
 8005822:	2200      	movs	r2, #0
 8005824:	2104      	movs	r1, #4
 8005826:	60e0      	str	r0, [r4, #12]
 8005828:	6860      	ldr	r0, [r4, #4]
 800582a:	f7ff ff81 	bl	8005730 <std>
 800582e:	2201      	movs	r2, #1
 8005830:	2109      	movs	r1, #9
 8005832:	68a0      	ldr	r0, [r4, #8]
 8005834:	f7ff ff7c 	bl	8005730 <std>
 8005838:	2202      	movs	r2, #2
 800583a:	2112      	movs	r1, #18
 800583c:	68e0      	ldr	r0, [r4, #12]
 800583e:	f7ff ff77 	bl	8005730 <std>
 8005842:	2301      	movs	r3, #1
 8005844:	61a3      	str	r3, [r4, #24]
 8005846:	e7d1      	b.n	80057ec <__sinit+0xc>
 8005848:	08005e10 	.word	0x08005e10
 800584c:	08005779 	.word	0x08005779

08005850 <__sfp>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	4607      	mov	r7, r0
 8005854:	f7ff ffac 	bl	80057b0 <__sfp_lock_acquire>
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <__sfp+0x84>)
 800585a:	681e      	ldr	r6, [r3, #0]
 800585c:	69b3      	ldr	r3, [r6, #24]
 800585e:	b913      	cbnz	r3, 8005866 <__sfp+0x16>
 8005860:	4630      	mov	r0, r6
 8005862:	f7ff ffbd 	bl	80057e0 <__sinit>
 8005866:	3648      	adds	r6, #72	; 0x48
 8005868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800586c:	3b01      	subs	r3, #1
 800586e:	d503      	bpl.n	8005878 <__sfp+0x28>
 8005870:	6833      	ldr	r3, [r6, #0]
 8005872:	b30b      	cbz	r3, 80058b8 <__sfp+0x68>
 8005874:	6836      	ldr	r6, [r6, #0]
 8005876:	e7f7      	b.n	8005868 <__sfp+0x18>
 8005878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800587c:	b9d5      	cbnz	r5, 80058b4 <__sfp+0x64>
 800587e:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <__sfp+0x88>)
 8005880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005884:	60e3      	str	r3, [r4, #12]
 8005886:	6665      	str	r5, [r4, #100]	; 0x64
 8005888:	f000 f847 	bl	800591a <__retarget_lock_init_recursive>
 800588c:	f7ff ff96 	bl	80057bc <__sfp_lock_release>
 8005890:	2208      	movs	r2, #8
 8005892:	4629      	mov	r1, r5
 8005894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800589c:	6025      	str	r5, [r4, #0]
 800589e:	61a5      	str	r5, [r4, #24]
 80058a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058a4:	f7fd fb06 	bl	8002eb4 <memset>
 80058a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058b0:	4620      	mov	r0, r4
 80058b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b4:	3468      	adds	r4, #104	; 0x68
 80058b6:	e7d9      	b.n	800586c <__sfp+0x1c>
 80058b8:	2104      	movs	r1, #4
 80058ba:	4638      	mov	r0, r7
 80058bc:	f7ff ff62 	bl	8005784 <__sfmoreglue>
 80058c0:	4604      	mov	r4, r0
 80058c2:	6030      	str	r0, [r6, #0]
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d1d5      	bne.n	8005874 <__sfp+0x24>
 80058c8:	f7ff ff78 	bl	80057bc <__sfp_lock_release>
 80058cc:	230c      	movs	r3, #12
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	e7ee      	b.n	80058b0 <__sfp+0x60>
 80058d2:	bf00      	nop
 80058d4:	08005e10 	.word	0x08005e10
 80058d8:	ffff0001 	.word	0xffff0001

080058dc <_fwalk_reent>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	4606      	mov	r6, r0
 80058e2:	4688      	mov	r8, r1
 80058e4:	2700      	movs	r7, #0
 80058e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058ee:	f1b9 0901 	subs.w	r9, r9, #1
 80058f2:	d505      	bpl.n	8005900 <_fwalk_reent+0x24>
 80058f4:	6824      	ldr	r4, [r4, #0]
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d1f7      	bne.n	80058ea <_fwalk_reent+0xe>
 80058fa:	4638      	mov	r0, r7
 80058fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005900:	89ab      	ldrh	r3, [r5, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d907      	bls.n	8005916 <_fwalk_reent+0x3a>
 8005906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800590a:	3301      	adds	r3, #1
 800590c:	d003      	beq.n	8005916 <_fwalk_reent+0x3a>
 800590e:	4629      	mov	r1, r5
 8005910:	4630      	mov	r0, r6
 8005912:	47c0      	blx	r8
 8005914:	4307      	orrs	r7, r0
 8005916:	3568      	adds	r5, #104	; 0x68
 8005918:	e7e9      	b.n	80058ee <_fwalk_reent+0x12>

0800591a <__retarget_lock_init_recursive>:
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_acquire_recursive>:
 800591c:	4770      	bx	lr

0800591e <__retarget_lock_release_recursive>:
 800591e:	4770      	bx	lr

08005920 <__swhatbuf_r>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	460e      	mov	r6, r1
 8005924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005928:	4614      	mov	r4, r2
 800592a:	2900      	cmp	r1, #0
 800592c:	461d      	mov	r5, r3
 800592e:	b096      	sub	sp, #88	; 0x58
 8005930:	da07      	bge.n	8005942 <__swhatbuf_r+0x22>
 8005932:	2300      	movs	r3, #0
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	89b3      	ldrh	r3, [r6, #12]
 8005938:	061a      	lsls	r2, r3, #24
 800593a:	d410      	bmi.n	800595e <__swhatbuf_r+0x3e>
 800593c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005940:	e00e      	b.n	8005960 <__swhatbuf_r+0x40>
 8005942:	466a      	mov	r2, sp
 8005944:	f000 f902 	bl	8005b4c <_fstat_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	dbf2      	blt.n	8005932 <__swhatbuf_r+0x12>
 800594c:	9a01      	ldr	r2, [sp, #4]
 800594e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005956:	425a      	negs	r2, r3
 8005958:	415a      	adcs	r2, r3
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	e7ee      	b.n	800593c <__swhatbuf_r+0x1c>
 800595e:	2340      	movs	r3, #64	; 0x40
 8005960:	2000      	movs	r0, #0
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	b016      	add	sp, #88	; 0x58
 8005966:	bd70      	pop	{r4, r5, r6, pc}

08005968 <__smakebuf_r>:
 8005968:	898b      	ldrh	r3, [r1, #12]
 800596a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800596c:	079d      	lsls	r5, r3, #30
 800596e:	4606      	mov	r6, r0
 8005970:	460c      	mov	r4, r1
 8005972:	d507      	bpl.n	8005984 <__smakebuf_r+0x1c>
 8005974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	2301      	movs	r3, #1
 800597e:	6163      	str	r3, [r4, #20]
 8005980:	b002      	add	sp, #8
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	466a      	mov	r2, sp
 8005986:	ab01      	add	r3, sp, #4
 8005988:	f7ff ffca 	bl	8005920 <__swhatbuf_r>
 800598c:	9900      	ldr	r1, [sp, #0]
 800598e:	4605      	mov	r5, r0
 8005990:	4630      	mov	r0, r6
 8005992:	f7ff f989 	bl	8004ca8 <_malloc_r>
 8005996:	b948      	cbnz	r0, 80059ac <__smakebuf_r+0x44>
 8005998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599c:	059a      	lsls	r2, r3, #22
 800599e:	d4ef      	bmi.n	8005980 <__smakebuf_r+0x18>
 80059a0:	f023 0303 	bic.w	r3, r3, #3
 80059a4:	f043 0302 	orr.w	r3, r3, #2
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	e7e3      	b.n	8005974 <__smakebuf_r+0xc>
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <__smakebuf_r+0x7c>)
 80059ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	6020      	str	r0, [r4, #0]
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	9b00      	ldr	r3, [sp, #0]
 80059bc:	6120      	str	r0, [r4, #16]
 80059be:	6163      	str	r3, [r4, #20]
 80059c0:	9b01      	ldr	r3, [sp, #4]
 80059c2:	b15b      	cbz	r3, 80059dc <__smakebuf_r+0x74>
 80059c4:	4630      	mov	r0, r6
 80059c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ca:	f000 f8d1 	bl	8005b70 <_isatty_r>
 80059ce:	b128      	cbz	r0, 80059dc <__smakebuf_r+0x74>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	89a0      	ldrh	r0, [r4, #12]
 80059de:	4305      	orrs	r5, r0
 80059e0:	81a5      	strh	r5, [r4, #12]
 80059e2:	e7cd      	b.n	8005980 <__smakebuf_r+0x18>
 80059e4:	08005779 	.word	0x08005779

080059e8 <_malloc_usable_size_r>:
 80059e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ec:	1f18      	subs	r0, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfbc      	itt	lt
 80059f2:	580b      	ldrlt	r3, [r1, r0]
 80059f4:	18c0      	addlt	r0, r0, r3
 80059f6:	4770      	bx	lr

080059f8 <_raise_r>:
 80059f8:	291f      	cmp	r1, #31
 80059fa:	b538      	push	{r3, r4, r5, lr}
 80059fc:	4604      	mov	r4, r0
 80059fe:	460d      	mov	r5, r1
 8005a00:	d904      	bls.n	8005a0c <_raise_r+0x14>
 8005a02:	2316      	movs	r3, #22
 8005a04:	6003      	str	r3, [r0, #0]
 8005a06:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a0e:	b112      	cbz	r2, 8005a16 <_raise_r+0x1e>
 8005a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a14:	b94b      	cbnz	r3, 8005a2a <_raise_r+0x32>
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f830 	bl	8005a7c <_getpid_r>
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4601      	mov	r1, r0
 8005a20:	4620      	mov	r0, r4
 8005a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a26:	f000 b817 	b.w	8005a58 <_kill_r>
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d00a      	beq.n	8005a44 <_raise_r+0x4c>
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	d103      	bne.n	8005a3a <_raise_r+0x42>
 8005a32:	2316      	movs	r3, #22
 8005a34:	6003      	str	r3, [r0, #0]
 8005a36:	2001      	movs	r0, #1
 8005a38:	e7e7      	b.n	8005a0a <_raise_r+0x12>
 8005a3a:	2400      	movs	r4, #0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a42:	4798      	blx	r3
 8005a44:	2000      	movs	r0, #0
 8005a46:	e7e0      	b.n	8005a0a <_raise_r+0x12>

08005a48 <raise>:
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <raise+0xc>)
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f7ff bfd3 	b.w	80059f8 <_raise_r>
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <_kill_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4d06      	ldr	r5, [pc, #24]	; (8005a78 <_kill_r+0x20>)
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	f7fb fdc9 	bl	80015fc <_kill>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d102      	bne.n	8005a74 <_kill_r+0x1c>
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	b103      	cbz	r3, 8005a74 <_kill_r+0x1c>
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	bd38      	pop	{r3, r4, r5, pc}
 8005a76:	bf00      	nop
 8005a78:	20000664 	.word	0x20000664

08005a7c <_getpid_r>:
 8005a7c:	f7fb bdb7 	b.w	80015ee <_getpid>

08005a80 <__sread>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	460c      	mov	r4, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	f000 f894 	bl	8005bb4 <_read_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	bfab      	itete	ge
 8005a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a92:	89a3      	ldrhlt	r3, [r4, #12]
 8005a94:	181b      	addge	r3, r3, r0
 8005a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a9a:	bfac      	ite	ge
 8005a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a9e:	81a3      	strhlt	r3, [r4, #12]
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <__swrite>:
 8005aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	898b      	ldrh	r3, [r1, #12]
 8005aaa:	4605      	mov	r5, r0
 8005aac:	05db      	lsls	r3, r3, #23
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	d505      	bpl.n	8005ac0 <__swrite+0x1e>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	f000 f868 	bl	8005b90 <_lseek_r>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	4628      	mov	r0, r5
 8005acc:	463b      	mov	r3, r7
 8005ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad6:	f000 b817 	b.w	8005b08 <_write_r>

08005ada <__sseek>:
 8005ada:	b510      	push	{r4, lr}
 8005adc:	460c      	mov	r4, r1
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 f855 	bl	8005b90 <_lseek_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	bf15      	itete	ne
 8005aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005af6:	81a3      	strheq	r3, [r4, #12]
 8005af8:	bf18      	it	ne
 8005afa:	81a3      	strhne	r3, [r4, #12]
 8005afc:	bd10      	pop	{r4, pc}

08005afe <__sclose>:
 8005afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b02:	f000 b813 	b.w	8005b2c <_close_r>
	...

08005b08 <_write_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	2200      	movs	r2, #0
 8005b12:	4d05      	ldr	r5, [pc, #20]	; (8005b28 <_write_r+0x20>)
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fb fda7 	bl	800166a <_write>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_write_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_write_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20000664 	.word	0x20000664

08005b2c <_close_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4d05      	ldr	r5, [pc, #20]	; (8005b48 <_close_r+0x1c>)
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	f7fb fdb3 	bl	80016a2 <_close>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_close_r+0x1a>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_close_r+0x1a>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	20000664 	.word	0x20000664

08005b4c <_fstat_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	2300      	movs	r3, #0
 8005b50:	4d06      	ldr	r5, [pc, #24]	; (8005b6c <_fstat_r+0x20>)
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	f7fb fdad 	bl	80016b8 <_fstat>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d102      	bne.n	8005b68 <_fstat_r+0x1c>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	b103      	cbz	r3, 8005b68 <_fstat_r+0x1c>
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000664 	.word	0x20000664

08005b70 <_isatty_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	2300      	movs	r3, #0
 8005b74:	4d05      	ldr	r5, [pc, #20]	; (8005b8c <_isatty_r+0x1c>)
 8005b76:	4604      	mov	r4, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	602b      	str	r3, [r5, #0]
 8005b7c:	f7fb fdab 	bl	80016d6 <_isatty>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d102      	bne.n	8005b8a <_isatty_r+0x1a>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	b103      	cbz	r3, 8005b8a <_isatty_r+0x1a>
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	20000664 	.word	0x20000664

08005b90 <_lseek_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4d05      	ldr	r5, [pc, #20]	; (8005bb0 <_lseek_r+0x20>)
 8005b9c:	602a      	str	r2, [r5, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f7fb fda3 	bl	80016ea <_lseek>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_lseek_r+0x1e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_lseek_r+0x1e>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000664 	.word	0x20000664

08005bb4 <_read_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4d05      	ldr	r5, [pc, #20]	; (8005bd4 <_read_r+0x20>)
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fb fd34 	bl	8001630 <_read>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_read_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_read_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000664 	.word	0x20000664

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
